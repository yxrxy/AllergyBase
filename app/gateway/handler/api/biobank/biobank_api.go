// Code generated by hertz generator.

package biobank

import (
	"context"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	api "github.com/yxrxy/AllergyBase/app/gateway/model/biobank"
	"github.com/yxrxy/AllergyBase/app/gateway/model/model"
	"github.com/yxrxy/AllergyBase/app/gateway/pack"
	"github.com/yxrxy/AllergyBase/app/gateway/rpc"
	"github.com/yxrxy/AllergyBase/kitex_gen/biobank"
	kitexModel "github.com/yxrxy/AllergyBase/kitex_gen/model"
	"github.com/yxrxy/AllergyBase/pkg/errno"
)

// 转换函数：将网关层模型转换为 kitex 生成的模型
func convertSampleInfo(sample *model.SampleInfo) *kitexModel.SampleInfo {
	if sample == nil {
		return nil
	}
	return &kitexModel.SampleInfo{
		Id:               sample.ID,
		PatientId:        sample.PatientId,
		SampleNo:         sample.SampleNo,
		SampleType:       sample.SampleType,
		CollectionTime:   sample.CollectionTime,
		CollectionMethod: sample.CollectionMethod,
		Processor:        sample.Processor,
	}
}

func convertStorageInfo(storage *model.StorageInfo) *kitexModel.StorageInfo {
	if storage == nil {
		return nil
	}
	return &kitexModel.StorageInfo{
		Id:                 storage.ID,
		SampleId:           storage.SampleId,
		StorageLocation:    storage.StorageLocation,
		StorageTemperature: storage.StorageTemperature,
		StorageTime:        storage.StorageTime,
		Status:             storage.Status,
	}
}

func convertGenomicData(data *model.GenomicData) *kitexModel.GenomicData {
	if data == nil {
		return nil
	}
	return &kitexModel.GenomicData{
		Id:               data.ID,
		SampleId:         data.SampleId,
		SequencePlatform: data.SequencePlatform,
		SequenceType:     data.SequenceType,
		GeneType:         data.GeneType,
		ResultFilePath:   data.ResultFilePath,
	}
}

func convertProteomicsData(data *model.ProteomicsData) *kitexModel.ProteomicsData {
	if data == nil {
		return nil
	}
	return &kitexModel.ProteomicsData{
		Id:               data.ID,
		SampleId:         data.SampleId,
		AnalysisPlatform: data.AnalysisPlatform,
		ProteinMarker:    data.ProteinMarker,
		Concentration:    data.Concentration,
	}
}

// CreateSample .
// @router /api/v1/sample [POST]
func CreateSample(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CreateSampleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.CreateSampleRPC(ctx, &biobank.CreateSampleRequest{
		Sample: convertSampleInfo(req.Sample),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, map[string]any{
		"sample_id": resp,
	})
}

// GetSample .
// @router /api/v1/sample/:sampleId [GET]
func GetSample(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetSampleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetSampleRPC(ctx, &biobank.GetSampleRequest{
		SampleId: req.SampleId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// GetPatientSamples .
// @router /api/v1/patient/:patientId/samples [GET]
func GetPatientSamples(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetPatientSamplesRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetPatientSamplesRPC(ctx, &biobank.GetPatientSamplesRequest{
		PatientId: req.PatientId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// AddStorageInfo .
// @router /api/v1/sample/storage [POST]
func AddStorageInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.AddStorageInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.AddStorageInfoRPC(ctx, &biobank.AddStorageInfoRequest{
		Storage: convertStorageInfo(req.Storage),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, map[string]any{
		"storage_id": resp,
	})
}

// GetStorageInfo .
// @router /api/v1/sample/:sampleId/storage [GET]
func GetStorageInfo(ctx context.Context, c *app.RequestContext) {
	var err error

	// 从URL路径中获取sampleId
	sampleIdStr := c.Param("sampleId")
	sampleId, err := strconv.ParseInt(sampleIdStr, 10, 64)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.GetStorageInfoRPC(ctx, &biobank.GetStorageInfoRequest{
		SampleId: sampleId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// AddGenomicData .
// @router /api/v1/sample/genomic [POST]
func AddGenomicData(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.AddGenomicDataRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.AddGenomicDataRPC(ctx, &biobank.AddGenomicDataRequest{
		Data: convertGenomicData(req.Data),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, map[string]any{
		"data_id": resp,
	})
}

// GetSampleGenomicData .
// @router /api/v1/sample/:sampleId/genomic [GET]
func GetSampleGenomicData(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetSampleGenomicDataRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetSampleGenomicDataRPC(ctx, &biobank.GetSampleGenomicDataRequest{
		SampleId: req.SampleId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// AddProteomicsData .
// @router /api/v1/sample/proteomics [POST]
func AddProteomicsData(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.AddProteomicsDataRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.AddProteomicsDataRPC(ctx, &biobank.AddProteomicsDataRequest{
		Data: convertProteomicsData(req.Data),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, map[string]any{
		"data_id": resp,
	})
}

// GetSampleProteomicsData .
// @router /api/v1/sample/:sampleId/proteomics [GET]
func GetSampleProteomicsData(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetSampleProteomicsDataRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetSampleProteomicsDataRPC(ctx, &biobank.GetSampleProteomicsDataRequest{
		SampleId: req.SampleId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// ListSamples .
// @router /api/v1/samples [GET]
func ListSamples(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ListSamplesRequest
	err = c.Bind(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	// 构建RPC请求
	rpcReq := &biobank.ListSamplesRequest{
		Offset:    req.Offset,
		Limit:     req.Limit,
		SampleNo:  req.SampleNo,
		PatientId: req.PatientId,
	}

	resp, err := rpc.ListSamplesRPC(ctx, rpcReq)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}
