// Code generated by hertz generator.

package clinical

import (
	"context"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	api "github.com/yxrxy/AllergyBase/app/gateway/model/clinical"
	"github.com/yxrxy/AllergyBase/app/gateway/model/model"
	"github.com/yxrxy/AllergyBase/app/gateway/pack"
	rpc "github.com/yxrxy/AllergyBase/app/gateway/rpc"
	"github.com/yxrxy/AllergyBase/kitex_gen/clinical"
	kitex_gen_model "github.com/yxrxy/AllergyBase/kitex_gen/model"
	"github.com/yxrxy/AllergyBase/pkg/errno"
)

// convertPatient 转换患者信息
func convertPatient(patient *model.Patient) *kitex_gen_model.Patient {
	result := &kitex_gen_model.Patient{
		Id:        patient.GetID(),
		PatientNo: patient.GetPatientNo(),
		Name:      patient.GetName(),
		Gender:    kitex_gen_model.Gender(patient.GetGender()),
		BirthDate: patient.GetBirthDate(),
	}

	// 处理可选的字符串字段 - 只有当字段不为空时才设置指针
	if patient.IsSetIdCard() && patient.GetIdCard() != "" {
		idCard := patient.GetIdCard()
		result.IdCard = &idCard
	}
	if patient.IsSetPhone() && patient.GetPhone() != "" {
		phone := patient.GetPhone()
		result.Phone = &phone
	}
	if patient.IsSetAddress() && patient.GetAddress() != "" {
		address := patient.GetAddress()
		result.Address = &address
	}
	if patient.IsSetEmergencyContact() && patient.GetEmergencyContact() != "" {
		emergencyContact := patient.GetEmergencyContact()
		result.EmergencyContact = &emergencyContact
	}
	if patient.IsSetEmergencyPhone() && patient.GetEmergencyPhone() != "" {
		emergencyPhone := patient.GetEmergencyPhone()
		result.EmergencyPhone = &emergencyPhone
	}
	if patient.IsSetMedicalInsuranceNo() && patient.GetMedicalInsuranceNo() != "" {
		medicalInsuranceNo := patient.GetMedicalInsuranceNo()
		result.MedicalInsuranceNo = &medicalInsuranceNo
	}

	// 处理可选的数值字段 - 只有当字段不为零值时才设置指针
	if patient.IsSetHeight() && patient.GetHeight() != 0 {
		height := patient.GetHeight()
		result.Height = &height
	}
	if patient.IsSetWeight() && patient.GetWeight() != 0 {
		weight := patient.GetWeight()
		result.Weight = &weight
	}
	if patient.IsSetBirthWeight() && patient.GetBirthWeight() != 0 {
		birthWeight := patient.GetBirthWeight()
		result.BirthWeight = &birthWeight
	}
	if patient.IsSetMedicalInsuranceType() && patient.GetMedicalInsuranceType() != 0 {
		medicalInsuranceType := patient.GetMedicalInsuranceType()
		result.MedicalInsuranceType = &medicalInsuranceType
	}

	return result
}

// convertVisit 转换就诊信息
func convertVisit(src *model.Visit) *kitex_gen_model.Visit {
	if src == nil {
		return nil
	}
	return &kitex_gen_model.Visit{
		Id:             src.ID,
		PatientId:      src.PatientId,
		VisitNo:        src.VisitNo,
		VisitTime:      src.VisitTime,
		Department:     src.Department,
		VisitType:      kitex_gen_model.VisitType(src.VisitType),
		DoctorId:       src.DoctorId,
		ChiefComplaint: src.ChiefComplaint,
	}
}

// convertDiagnosis 转换诊断信息
func convertDiagnosis(src *model.Diagnosis) *kitex_gen_model.Diagnosis {
	if src == nil {
		return nil
	}
	return &kitex_gen_model.Diagnosis{
		Id:            src.ID,
		VisitId:       src.VisitId,
		DiagnosisType: src.DiagnosisType,
		IcdCode:       src.IcdCode,
		Severity:      src.Severity,
		DiagnosisTime: src.DiagnosisTime,
	}
}

// convertExamination 转换检查信息
func convertExamination(src *model.Examination) *kitex_gen_model.Examination {
	if src == nil {
		return nil
	}
	return &kitex_gen_model.Examination{
		Id:             src.ID,
		VisitId:        src.VisitId,
		ExamType:       src.ExamType,
		ExamTime:       src.ExamTime,
		ExamResult_:    src.ExamResult,
		ResultUnit:     src.ResultUnit,
		ReferenceRange: src.ReferenceRange,
	}
}

// CreatePatient .
// @router /api/v1/patient [POST]
func CreatePatient(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CreatePatientRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.CreatePatientRPC(ctx, &clinical.CreatePatientRequest{
		Patient: convertPatient(req.Patient),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, map[string]any{
		"patient_id": resp,
	})
}

// GetPatient .
// @router /api/v1/patient/:patientId [GET]
func GetPatient(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetPatientRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetPatientRPC(ctx, &clinical.GetPatientRequest{
		PatientId: req.PatientId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// ListPatients .
// @router /api/v1/patients [GET]
func ListPatients(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ListPatientsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	// 从查询参数中获取搜索条件
	patientNo := c.Query("patientNo")
	name := c.Query("name")
	idCard := c.Query("idCard")
	phone := c.Query("phone")

	listReq := &clinical.ListPatientsRequest{
		Offset: req.Offset,
		Limit:  req.Limit,
	}

	// 设置搜索参数
	if patientNo != "" {
		listReq.PatientNo = &patientNo
	}
	if name != "" {
		listReq.Name = &name
	}
	if idCard != "" {
		listReq.IdCard = &idCard
	}
	if phone != "" {
		listReq.Phone = &phone
	}

	resp, err := rpc.ListPatientsRPC(ctx, listReq)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// CreateVisit .
// @router /api/v1/visit [POST]
func CreateVisit(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CreateVisitRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.CreateVisitRPC(ctx, &clinical.CreateVisitRequest{
		Visit: convertVisit(req.Visit),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, map[string]any{
		"visit_id": resp,
	})
}

// GetVisit .
// @router /api/v1/visit/:visitId [GET]
func GetVisit(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetVisitRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetVisitRPC(ctx, &clinical.GetVisitRequest{
		VisitId: req.VisitId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// GetPatientVisits .
// @router /api/v1/patient/:patientId/visits [GET]
func GetPatientVisits(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetPatientVisitsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetPatientVisitsRPC(ctx, &clinical.GetPatientVisitsRequest{
		PatientId: req.PatientId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// ListVisits 获取就诊记录列表
// @router /api/v1/visits [GET]
func ListVisits(ctx context.Context, c *app.RequestContext) {
	// 获取查询参数
	patientIdStr := c.Query("patientId")
	visitNo := c.Query("visitNo")
	department := c.Query("department")
	limitStr := c.Query("limit")
	offsetStr := c.Query("offset")

	// 设置默认值
	var limit int64 = 10
	var offset int64 = 0

	if limitStr != "" {
		if l, err := strconv.ParseInt(limitStr, 10, 64); err == nil {
			limit = l
		}
	}
	if offsetStr != "" {
		if o, err := strconv.ParseInt(offsetStr, 10, 64); err == nil {
			offset = o
		}
	}

	// 如果指定了患者ID，使用GetPatientVisits
	if patientIdStr != "" {
		patientId, err := strconv.ParseInt(patientIdStr, 10, 64)
		if err != nil {
			pack.RespError(c, errno.ParamVerifyError.WithMessage("Invalid patient ID"))
			return
		}

		resp, err := rpc.GetPatientVisitsRPC(ctx, &clinical.GetPatientVisitsRequest{
			PatientId: patientId,
		})
		if err != nil {
			pack.RespError(c, err)
			return
		}

		// 返回格式化的响应
		pack.RespData(c, map[string]interface{}{
			"visits": resp.Visits,
			"total":  len(resp.Visits),
		})
		return
	}

	// 构建过滤器
	filters := make(map[string]string)
	if visitNo != "" {
		filters["visitNo"] = visitNo
	}
	if department != "" {
		filters["department"] = department
	}

	// 调用获取所有就诊记录的方法
	visits, total, err := rpc.ListAllVisitsRPC(ctx, int(limit), int(offset), filters)
	if err != nil {
		pack.RespError(c, err)
		return
	}

	// 返回格式化的响应
	pack.RespData(c, map[string]interface{}{
		"visits": visits,
		"total":  total,
	})
}

// AddDiagnosis .
// @router /api/v1/diagnosis [POST]
func AddDiagnosis(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.AddDiagnosisRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.AddDiagnosisRPC(ctx, &clinical.AddDiagnosisRequest{
		Diagnosis: convertDiagnosis(req.Diagnosis),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, map[string]any{
		"diagnosis_id": resp,
	})
}

// GetVisitDiagnoses .
// @router /api/v1/visit/:visitId/diagnoses [GET]
func GetVisitDiagnoses(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetVisitDiagnosesRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetVisitDiagnosesRPC(ctx, &clinical.GetVisitDiagnosesRequest{
		VisitId: req.VisitId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// AddExamination .
// @router /api/v1/examination [POST]
func AddExamination(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.AddExaminationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.AddExaminationRPC(ctx, &clinical.AddExaminationRequest{
		Examination: convertExamination(req.Examination),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, map[string]any{
		"examination_id": resp,
	})
}

// GetVisitExaminations .
// @router /api/v1/visit/:visitId/examinations [GET]
func GetVisitExaminations(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetVisitExaminationsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetVisitExaminationsRPC(ctx, &clinical.GetVisitExaminationsRequest{
		VisitId: req.VisitId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// ListAllDiagnoses .
// @router /api/v1/diagnoses [GET]
func ListAllDiagnoses(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ListAllDiagnosesRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	// 从查询参数中获取过滤条件
	filters := make(map[string]string)
	if visitNo := c.Query("visitNo"); visitNo != "" {
		filters["visitNo"] = visitNo
	}
	if patientId := c.Query("patientId"); patientId != "" {
		filters["patientId"] = patientId
	}
	if diagnosisCode := c.Query("diagnosisCode"); diagnosisCode != "" {
		filters["diagnosisCode"] = diagnosisCode
	}
	if diagnosisName := c.Query("diagnosisName"); diagnosisName != "" {
		filters["diagnosisName"] = diagnosisName
	}

	data, total, err := rpc.ListAllDiagnosesRPC(ctx, int(req.Limit), int(req.Offset), filters)
	if err != nil {
		pack.RespError(c, err)
		return
	}

	pack.RespData(c, map[string]interface{}{
		"diagnoses": data,
		"total":     total,
	})
}

// ListAllExaminations .
// @router /api/v1/examinations [GET]
func ListAllExaminations(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ListAllExaminationsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	// 从查询参数中获取过滤条件
	filters := make(map[string]string)
	if visitNo := c.Query("visitNo"); visitNo != "" {
		filters["visitNo"] = visitNo
	}
	if patientId := c.Query("patientId"); patientId != "" {
		filters["patientId"] = patientId
	}
	if examinationType := c.Query("examinationType"); examinationType != "" {
		filters["examinationType"] = examinationType
	}
	if examinationName := c.Query("examinationName"); examinationName != "" {
		filters["examinationName"] = examinationName
	}

	data, total, err := rpc.ListAllExaminationsRPC(ctx, int(req.Limit), int(req.Offset), filters)
	if err != nil {
		pack.RespError(c, err)
		return
	}

	pack.RespData(c, map[string]interface{}{
		"examinations": data,
		"total":        total,
	})
}

// ListAllVisits .
// @router /api/v1/visits [GET]
func ListAllVisits(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ListAllVisitsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	// 从查询参数中获取过滤条件
	filters := make(map[string]string)
	if visitNo := c.Query("visitNo"); visitNo != "" {
		filters["visitNo"] = visitNo
	}
	if patientId := c.Query("patientId"); patientId != "" {
		filters["patientId"] = patientId
	}
	if department := c.Query("department"); department != "" {
		filters["department"] = department
	}

	visits, total, err := rpc.ListAllVisitsRPC(ctx, int(req.Limit), int(req.Offset), filters)
	if err != nil {
		pack.RespError(c, err)
		return
	}

	pack.RespData(c, map[string]interface{}{
		"visits": visits,
		"total":  total,
	})
}
