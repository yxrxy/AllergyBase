// Code generated by hertz generator.

package api

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/yxrxy/AllergyBase/app/gateway/model/epidemiology"
	"github.com/yxrxy/AllergyBase/app/gateway/model/model"
	"github.com/yxrxy/AllergyBase/app/gateway/pack"
	"github.com/yxrxy/AllergyBase/app/gateway/rpc"
	kitex_gen_epidemiology "github.com/yxrxy/AllergyBase/kitex_gen/epidemiology"
	kitex_gen_model "github.com/yxrxy/AllergyBase/kitex_gen/model"
	"github.com/yxrxy/AllergyBase/pkg/errno"
)

// 转换函数：将 gateway model 转换为 kitex_gen model
func convertEnvironmentExposure(src *model.EnvironmentExposure) *kitex_gen_model.EnvironmentExposure {
	if src == nil {
		return nil
	}
	return &kitex_gen_model.EnvironmentExposure{
		Id:                   src.ID,
		PatientId:            src.PatientId,
		ResidenceType:        src.ResidenceType,
		BuildingMaterial:     src.BuildingMaterial,
		VentilationFrequency: src.VentilationFrequency,
		AirConditioningUsage: src.AirConditioningUsage,
		PetExposure:          src.PetExposure,
		SmokingExposure:      src.SmokingExposure,
	}
}

func convertEnvironmentMonitor(src *model.EnvironmentMonitor) *kitex_gen_model.EnvironmentMonitor {
	if src == nil {
		return nil
	}
	return &kitex_gen_model.EnvironmentMonitor{
		Id:                  src.ID,
		LocationCode:        src.LocationCode,
		MonitorTime:         src.MonitorTime,
		Pm25:                src.Pm25,
		Temperature:         src.Temperature,
		Humidity:            src.Humidity,
		PollenConcentration: src.PollenConcentration,
		AllergenLevel:       src.AllergenLevel,
	}
}

func convertLifestyleSurvey(src *model.LifestyleSurvey) *kitex_gen_model.LifestyleSurvey {
	if src == nil {
		return nil
	}
	return &kitex_gen_model.LifestyleSurvey{
		Id:                src.ID,
		PatientId:         src.PatientId,
		DietPattern:       src.DietPattern,
		ExerciseFrequency: src.ExerciseFrequency,
		SleepQuality:      src.SleepQuality,
		StressLevel:       src.StressLevel,
	}
}

// CreateEnvironmentExposure 创建环境暴露记录
// @router /api/v1/environment/exposure [POST]
func CreateEnvironmentExposure(ctx context.Context, c *app.RequestContext) {
	var req epidemiology.CreateEnvironmentExposureRequest
	if err := c.BindAndValidate(&req); err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	exposureId, err := rpc.CreateEnvironmentExposureRPC(ctx, &kitex_gen_epidemiology.CreateEnvironmentExposureRequest{
		Exposure: convertEnvironmentExposure(req.Exposure),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}

	pack.RespData(c, map[string]any{
		"exposure_id": exposureId,
	})
}

// GetEnvironmentExposure 获取环境暴露记录
// @router /api/v1/patient/:patientId/environment/exposure [GET]
func GetEnvironmentExposure(ctx context.Context, c *app.RequestContext) {
	var req epidemiology.GetEnvironmentExposureRequest
	if err := c.BindAndValidate(&req); err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.GetEnvironmentExposureRPC(ctx, &kitex_gen_epidemiology.GetEnvironmentExposureRequest{
		PatientId: req.PatientId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}

	pack.RespData(c, resp)
}

// AddEnvironmentMonitor 添加环境监测
// @router /api/v1/environment/monitor [POST]
func AddEnvironmentMonitor(ctx context.Context, c *app.RequestContext) {
	var req epidemiology.AddEnvironmentMonitorRequest
	if err := c.BindAndValidate(&req); err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	monitorId, err := rpc.AddEnvironmentMonitorRPC(ctx, &kitex_gen_epidemiology.AddEnvironmentMonitorRequest{
		Monitor: convertEnvironmentMonitor(req.Monitor),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}

	pack.RespData(c, map[string]any{
		"monitor_id": monitorId,
	})
}

// GetEnvironmentMonitors 获取环境监测列表
// @router /api/v1/environment/monitors [GET]
func GetEnvironmentMonitors(ctx context.Context, c *app.RequestContext) {
	var req epidemiology.GetEnvironmentMonitorsRequest
	if err := c.BindAndValidate(&req); err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.GetEnvironmentMonitorsRPC(ctx, &kitex_gen_epidemiology.GetEnvironmentMonitorsRequest{
		LocationCode: req.LocationCode,
		StartTime:    req.StartTime,
		EndTime:      req.EndTime,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}

	pack.RespData(c, resp)
}

// CreateLifestyleSurvey 创建生活方式调查
// @router /api/v1/lifestyle/survey [POST]
func CreateLifestyleSurvey(ctx context.Context, c *app.RequestContext) {
	var req epidemiology.CreateLifestyleSurveyRequest
	if err := c.BindAndValidate(&req); err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	surveyId, err := rpc.CreateLifestyleSurveyRPC(ctx, &kitex_gen_epidemiology.CreateLifestyleSurveyRequest{
		Survey: convertLifestyleSurvey(req.Survey),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}

	pack.RespData(c, map[string]any{
		"survey_id": surveyId,
	})
}

// GetLifestyleSurvey 获取生活方式调查
// @router /api/v1/patient/:patientId/lifestyle/survey [GET]
func GetLifestyleSurvey(ctx context.Context, c *app.RequestContext) {
	var req epidemiology.GetLifestyleSurveyRequest
	if err := c.BindAndValidate(&req); err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.GetLifestyleSurveyRPC(ctx, &kitex_gen_epidemiology.GetLifestyleSurveyRequest{
		PatientId: req.PatientId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}

	pack.RespData(c, resp)
}

// GetPatientEnvironmentExposures .
// @router /api/v1/environment/exposures [GET]
func GetPatientEnvironmentExposures(ctx context.Context, c *app.RequestContext) {
	var req epidemiology.GetPatientEnvironmentExposuresRequest
	if err := c.BindAndValidate(&req); err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp, err := rpc.GetPatientEnvironmentExposuresRPC(ctx, &kitex_gen_epidemiology.GetPatientEnvironmentExposuresRequest{
		PatientId: req.PatientId,
		Offset:    req.Offset,
		Limit:     req.Limit,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}

	pack.RespData(c, resp)
}
