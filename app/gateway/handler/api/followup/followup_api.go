// Code generated by hertz generator.

package followup

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	api "github.com/yxrxy/AllergyBase/app/gateway/model/followup"
	"github.com/yxrxy/AllergyBase/app/gateway/model/model"
	"github.com/yxrxy/AllergyBase/app/gateway/pack"
	"github.com/yxrxy/AllergyBase/app/gateway/rpc"
	"github.com/yxrxy/AllergyBase/kitex_gen/followup"
	kitex_gen_model "github.com/yxrxy/AllergyBase/kitex_gen/model"
	"github.com/yxrxy/AllergyBase/pkg/errno"
)

// 转换函数：将 gateway model 转换为 kitex_gen model
func convertFollowupPlan(src *model.FollowupPlan) *kitex_gen_model.FollowupPlan {
	if src == nil {
		return nil
	}
	return &kitex_gen_model.FollowupPlan{
		Id:                  src.ID,
		PatientId:           src.PatientId,
		PlanStartDate:       src.PlanStartDate,
		FollowupFrequency:   src.FollowupFrequency,
		FollowupMethod:      src.FollowupMethod,
		ResponsibleDoctorId: src.ResponsibleDoctorId,
	}
}

func convertFollowupRecord(src *model.FollowupRecord) *kitex_gen_model.FollowupRecord {
	if src == nil {
		return nil
	}
	return &kitex_gen_model.FollowupRecord{
		Id:                   src.ID,
		PlanId:               src.PlanId,
		FollowupDate:         src.FollowupDate,
		SymptomScore:         src.SymptomScore,
		MedicationCompliance: src.MedicationCompliance,
		SideEffects:          src.SideEffects,
		QualityOfLifeScore:   src.QualityOfLifeScore,
	}
}

func convertMedicationMonitor(src *model.MedicationMonitor) *kitex_gen_model.MedicationMonitor {
	if src == nil {
		return nil
	}
	return &kitex_gen_model.MedicationMonitor{
		Id:              src.ID,
		FollowupId:      src.FollowupId,
		DrugName:        src.DrugName,
		UsageFrequency:  src.UsageFrequency,
		ComplianceLevel: src.ComplianceLevel,
		Effectiveness:   src.Effectiveness,
	}
}

// CreateFollowupPlan .
// @router /api/v1/followup/plan [POST]
func CreateFollowupPlan(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CreateFollowupPlanRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.CreateFollowupPlanRPC(ctx, &followup.CreateFollowupPlanRequest{
		Plan: convertFollowupPlan(req.Plan),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, map[string]any{
		"plan_id": resp,
	})
}

// GetFollowupPlan .
// @router /api/v1/followup/plan/:planId [GET]
func GetFollowupPlan(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetFollowupPlanRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetFollowupPlanRPC(ctx, &followup.GetFollowupPlanRequest{
		PlanId: req.PlanId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// GetFollowupPlans .
// @router /api/v1/followup/plans [GET]
func GetFollowupPlans(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetFollowupPlansRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetFollowupPlansRPC(ctx, &followup.GetFollowupPlansRequest{
		Page:     req.Page,
		PageSize: req.PageSize,
		Status:   req.Status,
		PlanName: req.PlanName,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// GetPatientFollowupPlans .
// @router /api/v1/patient/:patientId/followup/plans [GET]
func GetPatientFollowupPlans(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetPatientFollowupPlansRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetPatientFollowupPlansRPC(ctx, &followup.GetPatientFollowupPlansRequest{
		PatientId: req.PatientId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// CreateFollowupRecord .
// @router /api/v1/followup/record [POST]
func CreateFollowupRecord(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CreateFollowupRecordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.CreateFollowupRecordRPC(ctx, &followup.CreateFollowupRecordRequest{
		Record: convertFollowupRecord(req.Record),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, map[string]any{
		"record_id": resp,
	})
}

// GetFollowupRecord .
// @router /api/v1/followup/record/:recordId [GET]
func GetFollowupRecord(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetFollowupRecordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetFollowupRecordRPC(ctx, &followup.GetFollowupRecordRequest{
		RecordId: req.RecordId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// GetPlanFollowupRecords .
// @router /api/v1/followup/plan/:planId/records [GET]
func GetPlanFollowupRecords(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetPlanFollowupRecordsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetPlanFollowupRecordsRPC(ctx, &followup.GetPlanFollowupRecordsRequest{
		PlanId: req.PlanId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// AddMedicationMonitor .
// @router /api/v1/followup/medication [POST]
func AddMedicationMonitor(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.AddMedicationMonitorRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.AddMedicationMonitorRPC(ctx, &followup.AddMedicationMonitorRequest{
		Monitor: convertMedicationMonitor(req.Monitor),
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, map[string]any{
		"monitor_id": resp,
	})
}

// GetFollowupMedications .
// @router /api/v1/followup/:followupId/medications [GET]
func GetFollowupMedications(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetFollowupMedicationsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}
	resp, err := rpc.GetFollowupMedicationsRPC(ctx, &followup.GetFollowupMedicationsRequest{
		FollowupId: req.FollowupId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}
