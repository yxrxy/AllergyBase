// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package biobank

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/yxrxy/AllergyBase/app/gateway/model/biobank"
)

// API 服务
type BiobankAPI interface {
	// 样本信息管理接口
	CreateSample(ctx context.Context, request *biobank.CreateSampleRequest) (r *biobank.CreateSampleResponse, err error)

	GetSample(ctx context.Context, request *biobank.GetSampleRequest) (r *biobank.GetSampleResponse, err error)

	ListSamples(ctx context.Context, request *biobank.ListSamplesRequest) (r *biobank.ListSamplesResponse, err error)

	GetPatientSamples(ctx context.Context, request *biobank.GetPatientSamplesRequest) (r *biobank.GetPatientSamplesResponse, err error)
	// 存储信息管理接口
	AddStorageInfo(ctx context.Context, request *biobank.AddStorageInfoRequest) (r *biobank.AddStorageInfoResponse, err error)

	GetStorageInfo(ctx context.Context, request *biobank.GetStorageInfoRequest) (r *biobank.GetStorageInfoResponse, err error)
	// 基因组数据管理接口
	AddGenomicData(ctx context.Context, request *biobank.AddGenomicDataRequest) (r *biobank.AddGenomicDataResponse, err error)

	GetSampleGenomicData(ctx context.Context, request *biobank.GetSampleGenomicDataRequest) (r *biobank.GetSampleGenomicDataResponse, err error)
	// 蛋白组学数据管理接口
	AddProteomicsData(ctx context.Context, request *biobank.AddProteomicsDataRequest) (r *biobank.AddProteomicsDataResponse, err error)

	GetSampleProteomicsData(ctx context.Context, request *biobank.GetSampleProteomicsDataRequest) (r *biobank.GetSampleProteomicsDataResponse, err error)
}

type BiobankAPIClient struct {
	c thrift.TClient
}

func NewBiobankAPIClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BiobankAPIClient {
	return &BiobankAPIClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewBiobankAPIClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BiobankAPIClient {
	return &BiobankAPIClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewBiobankAPIClient(c thrift.TClient) *BiobankAPIClient {
	return &BiobankAPIClient{
		c: c,
	}
}

func (p *BiobankAPIClient) Client_() thrift.TClient {
	return p.c
}

func (p *BiobankAPIClient) CreateSample(ctx context.Context, request *biobank.CreateSampleRequest) (r *biobank.CreateSampleResponse, err error) {
	var _args BiobankAPICreateSampleArgs
	_args.Request = request
	var _result BiobankAPICreateSampleResult
	if err = p.Client_().Call(ctx, "CreateSample", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BiobankAPIClient) GetSample(ctx context.Context, request *biobank.GetSampleRequest) (r *biobank.GetSampleResponse, err error) {
	var _args BiobankAPIGetSampleArgs
	_args.Request = request
	var _result BiobankAPIGetSampleResult
	if err = p.Client_().Call(ctx, "GetSample", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BiobankAPIClient) ListSamples(ctx context.Context, request *biobank.ListSamplesRequest) (r *biobank.ListSamplesResponse, err error) {
	var _args BiobankAPIListSamplesArgs
	_args.Request = request
	var _result BiobankAPIListSamplesResult
	if err = p.Client_().Call(ctx, "ListSamples", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BiobankAPIClient) GetPatientSamples(ctx context.Context, request *biobank.GetPatientSamplesRequest) (r *biobank.GetPatientSamplesResponse, err error) {
	var _args BiobankAPIGetPatientSamplesArgs
	_args.Request = request
	var _result BiobankAPIGetPatientSamplesResult
	if err = p.Client_().Call(ctx, "GetPatientSamples", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BiobankAPIClient) AddStorageInfo(ctx context.Context, request *biobank.AddStorageInfoRequest) (r *biobank.AddStorageInfoResponse, err error) {
	var _args BiobankAPIAddStorageInfoArgs
	_args.Request = request
	var _result BiobankAPIAddStorageInfoResult
	if err = p.Client_().Call(ctx, "AddStorageInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BiobankAPIClient) GetStorageInfo(ctx context.Context, request *biobank.GetStorageInfoRequest) (r *biobank.GetStorageInfoResponse, err error) {
	var _args BiobankAPIGetStorageInfoArgs
	_args.Request = request
	var _result BiobankAPIGetStorageInfoResult
	if err = p.Client_().Call(ctx, "GetStorageInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BiobankAPIClient) AddGenomicData(ctx context.Context, request *biobank.AddGenomicDataRequest) (r *biobank.AddGenomicDataResponse, err error) {
	var _args BiobankAPIAddGenomicDataArgs
	_args.Request = request
	var _result BiobankAPIAddGenomicDataResult
	if err = p.Client_().Call(ctx, "AddGenomicData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BiobankAPIClient) GetSampleGenomicData(ctx context.Context, request *biobank.GetSampleGenomicDataRequest) (r *biobank.GetSampleGenomicDataResponse, err error) {
	var _args BiobankAPIGetSampleGenomicDataArgs
	_args.Request = request
	var _result BiobankAPIGetSampleGenomicDataResult
	if err = p.Client_().Call(ctx, "GetSampleGenomicData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BiobankAPIClient) AddProteomicsData(ctx context.Context, request *biobank.AddProteomicsDataRequest) (r *biobank.AddProteomicsDataResponse, err error) {
	var _args BiobankAPIAddProteomicsDataArgs
	_args.Request = request
	var _result BiobankAPIAddProteomicsDataResult
	if err = p.Client_().Call(ctx, "AddProteomicsData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BiobankAPIClient) GetSampleProteomicsData(ctx context.Context, request *biobank.GetSampleProteomicsDataRequest) (r *biobank.GetSampleProteomicsDataResponse, err error) {
	var _args BiobankAPIGetSampleProteomicsDataArgs
	_args.Request = request
	var _result BiobankAPIGetSampleProteomicsDataResult
	if err = p.Client_().Call(ctx, "GetSampleProteomicsData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type BiobankAPIProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BiobankAPI
}

func (p *BiobankAPIProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BiobankAPIProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BiobankAPIProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBiobankAPIProcessor(handler BiobankAPI) *BiobankAPIProcessor {
	self := &BiobankAPIProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateSample", &biobankAPIProcessorCreateSample{handler: handler})
	self.AddToProcessorMap("GetSample", &biobankAPIProcessorGetSample{handler: handler})
	self.AddToProcessorMap("ListSamples", &biobankAPIProcessorListSamples{handler: handler})
	self.AddToProcessorMap("GetPatientSamples", &biobankAPIProcessorGetPatientSamples{handler: handler})
	self.AddToProcessorMap("AddStorageInfo", &biobankAPIProcessorAddStorageInfo{handler: handler})
	self.AddToProcessorMap("GetStorageInfo", &biobankAPIProcessorGetStorageInfo{handler: handler})
	self.AddToProcessorMap("AddGenomicData", &biobankAPIProcessorAddGenomicData{handler: handler})
	self.AddToProcessorMap("GetSampleGenomicData", &biobankAPIProcessorGetSampleGenomicData{handler: handler})
	self.AddToProcessorMap("AddProteomicsData", &biobankAPIProcessorAddProteomicsData{handler: handler})
	self.AddToProcessorMap("GetSampleProteomicsData", &biobankAPIProcessorGetSampleProteomicsData{handler: handler})
	return self
}
func (p *BiobankAPIProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type biobankAPIProcessorCreateSample struct {
	handler BiobankAPI
}

func (p *biobankAPIProcessorCreateSample) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BiobankAPICreateSampleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateSample", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BiobankAPICreateSampleResult{}
	var retval *biobank.CreateSampleResponse
	if retval, err2 = p.handler.CreateSample(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateSample: "+err2.Error())
		oprot.WriteMessageBegin("CreateSample", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateSample", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type biobankAPIProcessorGetSample struct {
	handler BiobankAPI
}

func (p *biobankAPIProcessorGetSample) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BiobankAPIGetSampleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSample", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BiobankAPIGetSampleResult{}
	var retval *biobank.GetSampleResponse
	if retval, err2 = p.handler.GetSample(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSample: "+err2.Error())
		oprot.WriteMessageBegin("GetSample", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSample", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type biobankAPIProcessorListSamples struct {
	handler BiobankAPI
}

func (p *biobankAPIProcessorListSamples) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BiobankAPIListSamplesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListSamples", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BiobankAPIListSamplesResult{}
	var retval *biobank.ListSamplesResponse
	if retval, err2 = p.handler.ListSamples(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListSamples: "+err2.Error())
		oprot.WriteMessageBegin("ListSamples", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListSamples", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type biobankAPIProcessorGetPatientSamples struct {
	handler BiobankAPI
}

func (p *biobankAPIProcessorGetPatientSamples) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BiobankAPIGetPatientSamplesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPatientSamples", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BiobankAPIGetPatientSamplesResult{}
	var retval *biobank.GetPatientSamplesResponse
	if retval, err2 = p.handler.GetPatientSamples(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPatientSamples: "+err2.Error())
		oprot.WriteMessageBegin("GetPatientSamples", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPatientSamples", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type biobankAPIProcessorAddStorageInfo struct {
	handler BiobankAPI
}

func (p *biobankAPIProcessorAddStorageInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BiobankAPIAddStorageInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddStorageInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BiobankAPIAddStorageInfoResult{}
	var retval *biobank.AddStorageInfoResponse
	if retval, err2 = p.handler.AddStorageInfo(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddStorageInfo: "+err2.Error())
		oprot.WriteMessageBegin("AddStorageInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddStorageInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type biobankAPIProcessorGetStorageInfo struct {
	handler BiobankAPI
}

func (p *biobankAPIProcessorGetStorageInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BiobankAPIGetStorageInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetStorageInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BiobankAPIGetStorageInfoResult{}
	var retval *biobank.GetStorageInfoResponse
	if retval, err2 = p.handler.GetStorageInfo(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetStorageInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetStorageInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetStorageInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type biobankAPIProcessorAddGenomicData struct {
	handler BiobankAPI
}

func (p *biobankAPIProcessorAddGenomicData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BiobankAPIAddGenomicDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddGenomicData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BiobankAPIAddGenomicDataResult{}
	var retval *biobank.AddGenomicDataResponse
	if retval, err2 = p.handler.AddGenomicData(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddGenomicData: "+err2.Error())
		oprot.WriteMessageBegin("AddGenomicData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddGenomicData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type biobankAPIProcessorGetSampleGenomicData struct {
	handler BiobankAPI
}

func (p *biobankAPIProcessorGetSampleGenomicData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BiobankAPIGetSampleGenomicDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSampleGenomicData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BiobankAPIGetSampleGenomicDataResult{}
	var retval *biobank.GetSampleGenomicDataResponse
	if retval, err2 = p.handler.GetSampleGenomicData(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSampleGenomicData: "+err2.Error())
		oprot.WriteMessageBegin("GetSampleGenomicData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSampleGenomicData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type biobankAPIProcessorAddProteomicsData struct {
	handler BiobankAPI
}

func (p *biobankAPIProcessorAddProteomicsData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BiobankAPIAddProteomicsDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddProteomicsData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BiobankAPIAddProteomicsDataResult{}
	var retval *biobank.AddProteomicsDataResponse
	if retval, err2 = p.handler.AddProteomicsData(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddProteomicsData: "+err2.Error())
		oprot.WriteMessageBegin("AddProteomicsData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddProteomicsData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type biobankAPIProcessorGetSampleProteomicsData struct {
	handler BiobankAPI
}

func (p *biobankAPIProcessorGetSampleProteomicsData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BiobankAPIGetSampleProteomicsDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSampleProteomicsData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BiobankAPIGetSampleProteomicsDataResult{}
	var retval *biobank.GetSampleProteomicsDataResponse
	if retval, err2 = p.handler.GetSampleProteomicsData(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSampleProteomicsData: "+err2.Error())
		oprot.WriteMessageBegin("GetSampleProteomicsData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSampleProteomicsData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type BiobankAPICreateSampleArgs struct {
	Request *biobank.CreateSampleRequest `thrift:"request,1"`
}

func NewBiobankAPICreateSampleArgs() *BiobankAPICreateSampleArgs {
	return &BiobankAPICreateSampleArgs{}
}

func (p *BiobankAPICreateSampleArgs) InitDefault() {
}

var BiobankAPICreateSampleArgs_Request_DEFAULT *biobank.CreateSampleRequest

func (p *BiobankAPICreateSampleArgs) GetRequest() (v *biobank.CreateSampleRequest) {
	if !p.IsSetRequest() {
		return BiobankAPICreateSampleArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BiobankAPICreateSampleArgs = map[int16]string{
	1: "request",
}

func (p *BiobankAPICreateSampleArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BiobankAPICreateSampleArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPICreateSampleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPICreateSampleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := biobank.NewCreateSampleRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *BiobankAPICreateSampleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSample_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPICreateSampleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BiobankAPICreateSampleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPICreateSampleArgs(%+v)", *p)

}

type BiobankAPICreateSampleResult struct {
	Success *biobank.CreateSampleResponse `thrift:"success,0,optional"`
}

func NewBiobankAPICreateSampleResult() *BiobankAPICreateSampleResult {
	return &BiobankAPICreateSampleResult{}
}

func (p *BiobankAPICreateSampleResult) InitDefault() {
}

var BiobankAPICreateSampleResult_Success_DEFAULT *biobank.CreateSampleResponse

func (p *BiobankAPICreateSampleResult) GetSuccess() (v *biobank.CreateSampleResponse) {
	if !p.IsSetSuccess() {
		return BiobankAPICreateSampleResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BiobankAPICreateSampleResult = map[int16]string{
	0: "success",
}

func (p *BiobankAPICreateSampleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankAPICreateSampleResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPICreateSampleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPICreateSampleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := biobank.NewCreateSampleResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *BiobankAPICreateSampleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSample_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPICreateSampleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BiobankAPICreateSampleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPICreateSampleResult(%+v)", *p)

}

type BiobankAPIGetSampleArgs struct {
	Request *biobank.GetSampleRequest `thrift:"request,1"`
}

func NewBiobankAPIGetSampleArgs() *BiobankAPIGetSampleArgs {
	return &BiobankAPIGetSampleArgs{}
}

func (p *BiobankAPIGetSampleArgs) InitDefault() {
}

var BiobankAPIGetSampleArgs_Request_DEFAULT *biobank.GetSampleRequest

func (p *BiobankAPIGetSampleArgs) GetRequest() (v *biobank.GetSampleRequest) {
	if !p.IsSetRequest() {
		return BiobankAPIGetSampleArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BiobankAPIGetSampleArgs = map[int16]string{
	1: "request",
}

func (p *BiobankAPIGetSampleArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BiobankAPIGetSampleArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIGetSampleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIGetSampleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := biobank.NewGetSampleRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *BiobankAPIGetSampleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSample_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIGetSampleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BiobankAPIGetSampleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIGetSampleArgs(%+v)", *p)

}

type BiobankAPIGetSampleResult struct {
	Success *biobank.GetSampleResponse `thrift:"success,0,optional"`
}

func NewBiobankAPIGetSampleResult() *BiobankAPIGetSampleResult {
	return &BiobankAPIGetSampleResult{}
}

func (p *BiobankAPIGetSampleResult) InitDefault() {
}

var BiobankAPIGetSampleResult_Success_DEFAULT *biobank.GetSampleResponse

func (p *BiobankAPIGetSampleResult) GetSuccess() (v *biobank.GetSampleResponse) {
	if !p.IsSetSuccess() {
		return BiobankAPIGetSampleResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BiobankAPIGetSampleResult = map[int16]string{
	0: "success",
}

func (p *BiobankAPIGetSampleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankAPIGetSampleResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIGetSampleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIGetSampleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := biobank.NewGetSampleResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *BiobankAPIGetSampleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSample_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIGetSampleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BiobankAPIGetSampleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIGetSampleResult(%+v)", *p)

}

type BiobankAPIListSamplesArgs struct {
	Request *biobank.ListSamplesRequest `thrift:"request,1"`
}

func NewBiobankAPIListSamplesArgs() *BiobankAPIListSamplesArgs {
	return &BiobankAPIListSamplesArgs{}
}

func (p *BiobankAPIListSamplesArgs) InitDefault() {
}

var BiobankAPIListSamplesArgs_Request_DEFAULT *biobank.ListSamplesRequest

func (p *BiobankAPIListSamplesArgs) GetRequest() (v *biobank.ListSamplesRequest) {
	if !p.IsSetRequest() {
		return BiobankAPIListSamplesArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BiobankAPIListSamplesArgs = map[int16]string{
	1: "request",
}

func (p *BiobankAPIListSamplesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BiobankAPIListSamplesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIListSamplesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIListSamplesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := biobank.NewListSamplesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *BiobankAPIListSamplesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSamples_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIListSamplesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BiobankAPIListSamplesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIListSamplesArgs(%+v)", *p)

}

type BiobankAPIListSamplesResult struct {
	Success *biobank.ListSamplesResponse `thrift:"success,0,optional"`
}

func NewBiobankAPIListSamplesResult() *BiobankAPIListSamplesResult {
	return &BiobankAPIListSamplesResult{}
}

func (p *BiobankAPIListSamplesResult) InitDefault() {
}

var BiobankAPIListSamplesResult_Success_DEFAULT *biobank.ListSamplesResponse

func (p *BiobankAPIListSamplesResult) GetSuccess() (v *biobank.ListSamplesResponse) {
	if !p.IsSetSuccess() {
		return BiobankAPIListSamplesResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BiobankAPIListSamplesResult = map[int16]string{
	0: "success",
}

func (p *BiobankAPIListSamplesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankAPIListSamplesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIListSamplesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIListSamplesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := biobank.NewListSamplesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *BiobankAPIListSamplesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSamples_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIListSamplesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BiobankAPIListSamplesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIListSamplesResult(%+v)", *p)

}

type BiobankAPIGetPatientSamplesArgs struct {
	Request *biobank.GetPatientSamplesRequest `thrift:"request,1"`
}

func NewBiobankAPIGetPatientSamplesArgs() *BiobankAPIGetPatientSamplesArgs {
	return &BiobankAPIGetPatientSamplesArgs{}
}

func (p *BiobankAPIGetPatientSamplesArgs) InitDefault() {
}

var BiobankAPIGetPatientSamplesArgs_Request_DEFAULT *biobank.GetPatientSamplesRequest

func (p *BiobankAPIGetPatientSamplesArgs) GetRequest() (v *biobank.GetPatientSamplesRequest) {
	if !p.IsSetRequest() {
		return BiobankAPIGetPatientSamplesArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BiobankAPIGetPatientSamplesArgs = map[int16]string{
	1: "request",
}

func (p *BiobankAPIGetPatientSamplesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BiobankAPIGetPatientSamplesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIGetPatientSamplesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIGetPatientSamplesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := biobank.NewGetPatientSamplesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *BiobankAPIGetPatientSamplesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPatientSamples_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIGetPatientSamplesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BiobankAPIGetPatientSamplesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIGetPatientSamplesArgs(%+v)", *p)

}

type BiobankAPIGetPatientSamplesResult struct {
	Success *biobank.GetPatientSamplesResponse `thrift:"success,0,optional"`
}

func NewBiobankAPIGetPatientSamplesResult() *BiobankAPIGetPatientSamplesResult {
	return &BiobankAPIGetPatientSamplesResult{}
}

func (p *BiobankAPIGetPatientSamplesResult) InitDefault() {
}

var BiobankAPIGetPatientSamplesResult_Success_DEFAULT *biobank.GetPatientSamplesResponse

func (p *BiobankAPIGetPatientSamplesResult) GetSuccess() (v *biobank.GetPatientSamplesResponse) {
	if !p.IsSetSuccess() {
		return BiobankAPIGetPatientSamplesResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BiobankAPIGetPatientSamplesResult = map[int16]string{
	0: "success",
}

func (p *BiobankAPIGetPatientSamplesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankAPIGetPatientSamplesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIGetPatientSamplesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIGetPatientSamplesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := biobank.NewGetPatientSamplesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *BiobankAPIGetPatientSamplesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPatientSamples_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIGetPatientSamplesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BiobankAPIGetPatientSamplesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIGetPatientSamplesResult(%+v)", *p)

}

type BiobankAPIAddStorageInfoArgs struct {
	Request *biobank.AddStorageInfoRequest `thrift:"request,1"`
}

func NewBiobankAPIAddStorageInfoArgs() *BiobankAPIAddStorageInfoArgs {
	return &BiobankAPIAddStorageInfoArgs{}
}

func (p *BiobankAPIAddStorageInfoArgs) InitDefault() {
}

var BiobankAPIAddStorageInfoArgs_Request_DEFAULT *biobank.AddStorageInfoRequest

func (p *BiobankAPIAddStorageInfoArgs) GetRequest() (v *biobank.AddStorageInfoRequest) {
	if !p.IsSetRequest() {
		return BiobankAPIAddStorageInfoArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BiobankAPIAddStorageInfoArgs = map[int16]string{
	1: "request",
}

func (p *BiobankAPIAddStorageInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BiobankAPIAddStorageInfoArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIAddStorageInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIAddStorageInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := biobank.NewAddStorageInfoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *BiobankAPIAddStorageInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddStorageInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIAddStorageInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BiobankAPIAddStorageInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIAddStorageInfoArgs(%+v)", *p)

}

type BiobankAPIAddStorageInfoResult struct {
	Success *biobank.AddStorageInfoResponse `thrift:"success,0,optional"`
}

func NewBiobankAPIAddStorageInfoResult() *BiobankAPIAddStorageInfoResult {
	return &BiobankAPIAddStorageInfoResult{}
}

func (p *BiobankAPIAddStorageInfoResult) InitDefault() {
}

var BiobankAPIAddStorageInfoResult_Success_DEFAULT *biobank.AddStorageInfoResponse

func (p *BiobankAPIAddStorageInfoResult) GetSuccess() (v *biobank.AddStorageInfoResponse) {
	if !p.IsSetSuccess() {
		return BiobankAPIAddStorageInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BiobankAPIAddStorageInfoResult = map[int16]string{
	0: "success",
}

func (p *BiobankAPIAddStorageInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankAPIAddStorageInfoResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIAddStorageInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIAddStorageInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := biobank.NewAddStorageInfoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *BiobankAPIAddStorageInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddStorageInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIAddStorageInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BiobankAPIAddStorageInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIAddStorageInfoResult(%+v)", *p)

}

type BiobankAPIGetStorageInfoArgs struct {
	Request *biobank.GetStorageInfoRequest `thrift:"request,1"`
}

func NewBiobankAPIGetStorageInfoArgs() *BiobankAPIGetStorageInfoArgs {
	return &BiobankAPIGetStorageInfoArgs{}
}

func (p *BiobankAPIGetStorageInfoArgs) InitDefault() {
}

var BiobankAPIGetStorageInfoArgs_Request_DEFAULT *biobank.GetStorageInfoRequest

func (p *BiobankAPIGetStorageInfoArgs) GetRequest() (v *biobank.GetStorageInfoRequest) {
	if !p.IsSetRequest() {
		return BiobankAPIGetStorageInfoArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BiobankAPIGetStorageInfoArgs = map[int16]string{
	1: "request",
}

func (p *BiobankAPIGetStorageInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BiobankAPIGetStorageInfoArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIGetStorageInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIGetStorageInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := biobank.NewGetStorageInfoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *BiobankAPIGetStorageInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetStorageInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIGetStorageInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BiobankAPIGetStorageInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIGetStorageInfoArgs(%+v)", *p)

}

type BiobankAPIGetStorageInfoResult struct {
	Success *biobank.GetStorageInfoResponse `thrift:"success,0,optional"`
}

func NewBiobankAPIGetStorageInfoResult() *BiobankAPIGetStorageInfoResult {
	return &BiobankAPIGetStorageInfoResult{}
}

func (p *BiobankAPIGetStorageInfoResult) InitDefault() {
}

var BiobankAPIGetStorageInfoResult_Success_DEFAULT *biobank.GetStorageInfoResponse

func (p *BiobankAPIGetStorageInfoResult) GetSuccess() (v *biobank.GetStorageInfoResponse) {
	if !p.IsSetSuccess() {
		return BiobankAPIGetStorageInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BiobankAPIGetStorageInfoResult = map[int16]string{
	0: "success",
}

func (p *BiobankAPIGetStorageInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankAPIGetStorageInfoResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIGetStorageInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIGetStorageInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := biobank.NewGetStorageInfoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *BiobankAPIGetStorageInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetStorageInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIGetStorageInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BiobankAPIGetStorageInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIGetStorageInfoResult(%+v)", *p)

}

type BiobankAPIAddGenomicDataArgs struct {
	Request *biobank.AddGenomicDataRequest `thrift:"request,1"`
}

func NewBiobankAPIAddGenomicDataArgs() *BiobankAPIAddGenomicDataArgs {
	return &BiobankAPIAddGenomicDataArgs{}
}

func (p *BiobankAPIAddGenomicDataArgs) InitDefault() {
}

var BiobankAPIAddGenomicDataArgs_Request_DEFAULT *biobank.AddGenomicDataRequest

func (p *BiobankAPIAddGenomicDataArgs) GetRequest() (v *biobank.AddGenomicDataRequest) {
	if !p.IsSetRequest() {
		return BiobankAPIAddGenomicDataArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BiobankAPIAddGenomicDataArgs = map[int16]string{
	1: "request",
}

func (p *BiobankAPIAddGenomicDataArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BiobankAPIAddGenomicDataArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIAddGenomicDataArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIAddGenomicDataArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := biobank.NewAddGenomicDataRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *BiobankAPIAddGenomicDataArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddGenomicData_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIAddGenomicDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BiobankAPIAddGenomicDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIAddGenomicDataArgs(%+v)", *p)

}

type BiobankAPIAddGenomicDataResult struct {
	Success *biobank.AddGenomicDataResponse `thrift:"success,0,optional"`
}

func NewBiobankAPIAddGenomicDataResult() *BiobankAPIAddGenomicDataResult {
	return &BiobankAPIAddGenomicDataResult{}
}

func (p *BiobankAPIAddGenomicDataResult) InitDefault() {
}

var BiobankAPIAddGenomicDataResult_Success_DEFAULT *biobank.AddGenomicDataResponse

func (p *BiobankAPIAddGenomicDataResult) GetSuccess() (v *biobank.AddGenomicDataResponse) {
	if !p.IsSetSuccess() {
		return BiobankAPIAddGenomicDataResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BiobankAPIAddGenomicDataResult = map[int16]string{
	0: "success",
}

func (p *BiobankAPIAddGenomicDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankAPIAddGenomicDataResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIAddGenomicDataResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIAddGenomicDataResult) ReadField0(iprot thrift.TProtocol) error {
	_field := biobank.NewAddGenomicDataResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *BiobankAPIAddGenomicDataResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddGenomicData_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIAddGenomicDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BiobankAPIAddGenomicDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIAddGenomicDataResult(%+v)", *p)

}

type BiobankAPIGetSampleGenomicDataArgs struct {
	Request *biobank.GetSampleGenomicDataRequest `thrift:"request,1"`
}

func NewBiobankAPIGetSampleGenomicDataArgs() *BiobankAPIGetSampleGenomicDataArgs {
	return &BiobankAPIGetSampleGenomicDataArgs{}
}

func (p *BiobankAPIGetSampleGenomicDataArgs) InitDefault() {
}

var BiobankAPIGetSampleGenomicDataArgs_Request_DEFAULT *biobank.GetSampleGenomicDataRequest

func (p *BiobankAPIGetSampleGenomicDataArgs) GetRequest() (v *biobank.GetSampleGenomicDataRequest) {
	if !p.IsSetRequest() {
		return BiobankAPIGetSampleGenomicDataArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BiobankAPIGetSampleGenomicDataArgs = map[int16]string{
	1: "request",
}

func (p *BiobankAPIGetSampleGenomicDataArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BiobankAPIGetSampleGenomicDataArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIGetSampleGenomicDataArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIGetSampleGenomicDataArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := biobank.NewGetSampleGenomicDataRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *BiobankAPIGetSampleGenomicDataArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSampleGenomicData_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIGetSampleGenomicDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BiobankAPIGetSampleGenomicDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIGetSampleGenomicDataArgs(%+v)", *p)

}

type BiobankAPIGetSampleGenomicDataResult struct {
	Success *biobank.GetSampleGenomicDataResponse `thrift:"success,0,optional"`
}

func NewBiobankAPIGetSampleGenomicDataResult() *BiobankAPIGetSampleGenomicDataResult {
	return &BiobankAPIGetSampleGenomicDataResult{}
}

func (p *BiobankAPIGetSampleGenomicDataResult) InitDefault() {
}

var BiobankAPIGetSampleGenomicDataResult_Success_DEFAULT *biobank.GetSampleGenomicDataResponse

func (p *BiobankAPIGetSampleGenomicDataResult) GetSuccess() (v *biobank.GetSampleGenomicDataResponse) {
	if !p.IsSetSuccess() {
		return BiobankAPIGetSampleGenomicDataResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BiobankAPIGetSampleGenomicDataResult = map[int16]string{
	0: "success",
}

func (p *BiobankAPIGetSampleGenomicDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankAPIGetSampleGenomicDataResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIGetSampleGenomicDataResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIGetSampleGenomicDataResult) ReadField0(iprot thrift.TProtocol) error {
	_field := biobank.NewGetSampleGenomicDataResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *BiobankAPIGetSampleGenomicDataResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSampleGenomicData_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIGetSampleGenomicDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BiobankAPIGetSampleGenomicDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIGetSampleGenomicDataResult(%+v)", *p)

}

type BiobankAPIAddProteomicsDataArgs struct {
	Request *biobank.AddProteomicsDataRequest `thrift:"request,1"`
}

func NewBiobankAPIAddProteomicsDataArgs() *BiobankAPIAddProteomicsDataArgs {
	return &BiobankAPIAddProteomicsDataArgs{}
}

func (p *BiobankAPIAddProteomicsDataArgs) InitDefault() {
}

var BiobankAPIAddProteomicsDataArgs_Request_DEFAULT *biobank.AddProteomicsDataRequest

func (p *BiobankAPIAddProteomicsDataArgs) GetRequest() (v *biobank.AddProteomicsDataRequest) {
	if !p.IsSetRequest() {
		return BiobankAPIAddProteomicsDataArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BiobankAPIAddProteomicsDataArgs = map[int16]string{
	1: "request",
}

func (p *BiobankAPIAddProteomicsDataArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BiobankAPIAddProteomicsDataArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIAddProteomicsDataArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIAddProteomicsDataArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := biobank.NewAddProteomicsDataRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *BiobankAPIAddProteomicsDataArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddProteomicsData_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIAddProteomicsDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BiobankAPIAddProteomicsDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIAddProteomicsDataArgs(%+v)", *p)

}

type BiobankAPIAddProteomicsDataResult struct {
	Success *biobank.AddProteomicsDataResponse `thrift:"success,0,optional"`
}

func NewBiobankAPIAddProteomicsDataResult() *BiobankAPIAddProteomicsDataResult {
	return &BiobankAPIAddProteomicsDataResult{}
}

func (p *BiobankAPIAddProteomicsDataResult) InitDefault() {
}

var BiobankAPIAddProteomicsDataResult_Success_DEFAULT *biobank.AddProteomicsDataResponse

func (p *BiobankAPIAddProteomicsDataResult) GetSuccess() (v *biobank.AddProteomicsDataResponse) {
	if !p.IsSetSuccess() {
		return BiobankAPIAddProteomicsDataResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BiobankAPIAddProteomicsDataResult = map[int16]string{
	0: "success",
}

func (p *BiobankAPIAddProteomicsDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankAPIAddProteomicsDataResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIAddProteomicsDataResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIAddProteomicsDataResult) ReadField0(iprot thrift.TProtocol) error {
	_field := biobank.NewAddProteomicsDataResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *BiobankAPIAddProteomicsDataResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddProteomicsData_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIAddProteomicsDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BiobankAPIAddProteomicsDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIAddProteomicsDataResult(%+v)", *p)

}

type BiobankAPIGetSampleProteomicsDataArgs struct {
	Request *biobank.GetSampleProteomicsDataRequest `thrift:"request,1"`
}

func NewBiobankAPIGetSampleProteomicsDataArgs() *BiobankAPIGetSampleProteomicsDataArgs {
	return &BiobankAPIGetSampleProteomicsDataArgs{}
}

func (p *BiobankAPIGetSampleProteomicsDataArgs) InitDefault() {
}

var BiobankAPIGetSampleProteomicsDataArgs_Request_DEFAULT *biobank.GetSampleProteomicsDataRequest

func (p *BiobankAPIGetSampleProteomicsDataArgs) GetRequest() (v *biobank.GetSampleProteomicsDataRequest) {
	if !p.IsSetRequest() {
		return BiobankAPIGetSampleProteomicsDataArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BiobankAPIGetSampleProteomicsDataArgs = map[int16]string{
	1: "request",
}

func (p *BiobankAPIGetSampleProteomicsDataArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BiobankAPIGetSampleProteomicsDataArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIGetSampleProteomicsDataArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIGetSampleProteomicsDataArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := biobank.NewGetSampleProteomicsDataRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *BiobankAPIGetSampleProteomicsDataArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSampleProteomicsData_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIGetSampleProteomicsDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BiobankAPIGetSampleProteomicsDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIGetSampleProteomicsDataArgs(%+v)", *p)

}

type BiobankAPIGetSampleProteomicsDataResult struct {
	Success *biobank.GetSampleProteomicsDataResponse `thrift:"success,0,optional"`
}

func NewBiobankAPIGetSampleProteomicsDataResult() *BiobankAPIGetSampleProteomicsDataResult {
	return &BiobankAPIGetSampleProteomicsDataResult{}
}

func (p *BiobankAPIGetSampleProteomicsDataResult) InitDefault() {
}

var BiobankAPIGetSampleProteomicsDataResult_Success_DEFAULT *biobank.GetSampleProteomicsDataResponse

func (p *BiobankAPIGetSampleProteomicsDataResult) GetSuccess() (v *biobank.GetSampleProteomicsDataResponse) {
	if !p.IsSetSuccess() {
		return BiobankAPIGetSampleProteomicsDataResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BiobankAPIGetSampleProteomicsDataResult = map[int16]string{
	0: "success",
}

func (p *BiobankAPIGetSampleProteomicsDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankAPIGetSampleProteomicsDataResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BiobankAPIGetSampleProteomicsDataResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BiobankAPIGetSampleProteomicsDataResult) ReadField0(iprot thrift.TProtocol) error {
	_field := biobank.NewGetSampleProteomicsDataResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *BiobankAPIGetSampleProteomicsDataResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSampleProteomicsData_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BiobankAPIGetSampleProteomicsDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BiobankAPIGetSampleProteomicsDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankAPIGetSampleProteomicsDataResult(%+v)", *p)

}
