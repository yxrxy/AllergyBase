// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package clinical

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/yxrxy/AllergyBase/app/gateway/model/clinical"
)

// API 服务
type ClinicalAPI interface {
	// 患者信息管理接口
	CreatePatient(ctx context.Context, request *clinical.CreatePatientRequest) (r *clinical.CreatePatientResponse, err error)

	GetPatient(ctx context.Context, request *clinical.GetPatientRequest) (r *clinical.GetPatientResponse, err error)

	ListPatients(ctx context.Context, request *clinical.ListPatientsRequest) (r *clinical.ListPatientsResponse, err error)
	// 就诊记录管理接口
	CreateVisit(ctx context.Context, request *clinical.CreateVisitRequest) (r *clinical.CreateVisitResponse, err error)

	GetVisit(ctx context.Context, request *clinical.GetVisitRequest) (r *clinical.GetVisitResponse, err error)

	GetPatientVisits(ctx context.Context, request *clinical.GetPatientVisitsRequest) (r *clinical.GetPatientVisitsResponse, err error)

	ListAllVisits(ctx context.Context, request *clinical.ListAllVisitsRequest) (r *clinical.ListAllVisitsResponse, err error)
	// 诊断管理接口
	AddDiagnosis(ctx context.Context, request *clinical.AddDiagnosisRequest) (r *clinical.AddDiagnosisResponse, err error)

	GetVisitDiagnoses(ctx context.Context, request *clinical.GetVisitDiagnosesRequest) (r *clinical.GetVisitDiagnosesResponse, err error)

	ListAllDiagnoses(ctx context.Context, request *clinical.ListAllDiagnosesRequest) (r *clinical.ListAllDiagnosesResponse, err error)
	// 检查管理接口
	AddExamination(ctx context.Context, request *clinical.AddExaminationRequest) (r *clinical.AddExaminationResponse, err error)

	GetVisitExaminations(ctx context.Context, request *clinical.GetVisitExaminationsRequest) (r *clinical.GetVisitExaminationsResponse, err error)

	ListAllExaminations(ctx context.Context, request *clinical.ListAllExaminationsRequest) (r *clinical.ListAllExaminationsResponse, err error)
}

type ClinicalAPIClient struct {
	c thrift.TClient
}

func NewClinicalAPIClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ClinicalAPIClient {
	return &ClinicalAPIClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewClinicalAPIClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ClinicalAPIClient {
	return &ClinicalAPIClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewClinicalAPIClient(c thrift.TClient) *ClinicalAPIClient {
	return &ClinicalAPIClient{
		c: c,
	}
}

func (p *ClinicalAPIClient) Client_() thrift.TClient {
	return p.c
}

func (p *ClinicalAPIClient) CreatePatient(ctx context.Context, request *clinical.CreatePatientRequest) (r *clinical.CreatePatientResponse, err error) {
	var _args ClinicalAPICreatePatientArgs
	_args.Request = request
	var _result ClinicalAPICreatePatientResult
	if err = p.Client_().Call(ctx, "CreatePatient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ClinicalAPIClient) GetPatient(ctx context.Context, request *clinical.GetPatientRequest) (r *clinical.GetPatientResponse, err error) {
	var _args ClinicalAPIGetPatientArgs
	_args.Request = request
	var _result ClinicalAPIGetPatientResult
	if err = p.Client_().Call(ctx, "GetPatient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ClinicalAPIClient) ListPatients(ctx context.Context, request *clinical.ListPatientsRequest) (r *clinical.ListPatientsResponse, err error) {
	var _args ClinicalAPIListPatientsArgs
	_args.Request = request
	var _result ClinicalAPIListPatientsResult
	if err = p.Client_().Call(ctx, "ListPatients", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ClinicalAPIClient) CreateVisit(ctx context.Context, request *clinical.CreateVisitRequest) (r *clinical.CreateVisitResponse, err error) {
	var _args ClinicalAPICreateVisitArgs
	_args.Request = request
	var _result ClinicalAPICreateVisitResult
	if err = p.Client_().Call(ctx, "CreateVisit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ClinicalAPIClient) GetVisit(ctx context.Context, request *clinical.GetVisitRequest) (r *clinical.GetVisitResponse, err error) {
	var _args ClinicalAPIGetVisitArgs
	_args.Request = request
	var _result ClinicalAPIGetVisitResult
	if err = p.Client_().Call(ctx, "GetVisit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ClinicalAPIClient) GetPatientVisits(ctx context.Context, request *clinical.GetPatientVisitsRequest) (r *clinical.GetPatientVisitsResponse, err error) {
	var _args ClinicalAPIGetPatientVisitsArgs
	_args.Request = request
	var _result ClinicalAPIGetPatientVisitsResult
	if err = p.Client_().Call(ctx, "GetPatientVisits", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ClinicalAPIClient) ListAllVisits(ctx context.Context, request *clinical.ListAllVisitsRequest) (r *clinical.ListAllVisitsResponse, err error) {
	var _args ClinicalAPIListAllVisitsArgs
	_args.Request = request
	var _result ClinicalAPIListAllVisitsResult
	if err = p.Client_().Call(ctx, "ListAllVisits", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ClinicalAPIClient) AddDiagnosis(ctx context.Context, request *clinical.AddDiagnosisRequest) (r *clinical.AddDiagnosisResponse, err error) {
	var _args ClinicalAPIAddDiagnosisArgs
	_args.Request = request
	var _result ClinicalAPIAddDiagnosisResult
	if err = p.Client_().Call(ctx, "AddDiagnosis", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ClinicalAPIClient) GetVisitDiagnoses(ctx context.Context, request *clinical.GetVisitDiagnosesRequest) (r *clinical.GetVisitDiagnosesResponse, err error) {
	var _args ClinicalAPIGetVisitDiagnosesArgs
	_args.Request = request
	var _result ClinicalAPIGetVisitDiagnosesResult
	if err = p.Client_().Call(ctx, "GetVisitDiagnoses", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ClinicalAPIClient) ListAllDiagnoses(ctx context.Context, request *clinical.ListAllDiagnosesRequest) (r *clinical.ListAllDiagnosesResponse, err error) {
	var _args ClinicalAPIListAllDiagnosesArgs
	_args.Request = request
	var _result ClinicalAPIListAllDiagnosesResult
	if err = p.Client_().Call(ctx, "ListAllDiagnoses", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ClinicalAPIClient) AddExamination(ctx context.Context, request *clinical.AddExaminationRequest) (r *clinical.AddExaminationResponse, err error) {
	var _args ClinicalAPIAddExaminationArgs
	_args.Request = request
	var _result ClinicalAPIAddExaminationResult
	if err = p.Client_().Call(ctx, "AddExamination", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ClinicalAPIClient) GetVisitExaminations(ctx context.Context, request *clinical.GetVisitExaminationsRequest) (r *clinical.GetVisitExaminationsResponse, err error) {
	var _args ClinicalAPIGetVisitExaminationsArgs
	_args.Request = request
	var _result ClinicalAPIGetVisitExaminationsResult
	if err = p.Client_().Call(ctx, "GetVisitExaminations", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ClinicalAPIClient) ListAllExaminations(ctx context.Context, request *clinical.ListAllExaminationsRequest) (r *clinical.ListAllExaminationsResponse, err error) {
	var _args ClinicalAPIListAllExaminationsArgs
	_args.Request = request
	var _result ClinicalAPIListAllExaminationsResult
	if err = p.Client_().Call(ctx, "ListAllExaminations", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ClinicalAPIProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ClinicalAPI
}

func (p *ClinicalAPIProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ClinicalAPIProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ClinicalAPIProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewClinicalAPIProcessor(handler ClinicalAPI) *ClinicalAPIProcessor {
	self := &ClinicalAPIProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreatePatient", &clinicalAPIProcessorCreatePatient{handler: handler})
	self.AddToProcessorMap("GetPatient", &clinicalAPIProcessorGetPatient{handler: handler})
	self.AddToProcessorMap("ListPatients", &clinicalAPIProcessorListPatients{handler: handler})
	self.AddToProcessorMap("CreateVisit", &clinicalAPIProcessorCreateVisit{handler: handler})
	self.AddToProcessorMap("GetVisit", &clinicalAPIProcessorGetVisit{handler: handler})
	self.AddToProcessorMap("GetPatientVisits", &clinicalAPIProcessorGetPatientVisits{handler: handler})
	self.AddToProcessorMap("ListAllVisits", &clinicalAPIProcessorListAllVisits{handler: handler})
	self.AddToProcessorMap("AddDiagnosis", &clinicalAPIProcessorAddDiagnosis{handler: handler})
	self.AddToProcessorMap("GetVisitDiagnoses", &clinicalAPIProcessorGetVisitDiagnoses{handler: handler})
	self.AddToProcessorMap("ListAllDiagnoses", &clinicalAPIProcessorListAllDiagnoses{handler: handler})
	self.AddToProcessorMap("AddExamination", &clinicalAPIProcessorAddExamination{handler: handler})
	self.AddToProcessorMap("GetVisitExaminations", &clinicalAPIProcessorGetVisitExaminations{handler: handler})
	self.AddToProcessorMap("ListAllExaminations", &clinicalAPIProcessorListAllExaminations{handler: handler})
	return self
}
func (p *ClinicalAPIProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type clinicalAPIProcessorCreatePatient struct {
	handler ClinicalAPI
}

func (p *clinicalAPIProcessorCreatePatient) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClinicalAPICreatePatientArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreatePatient", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ClinicalAPICreatePatientResult{}
	var retval *clinical.CreatePatientResponse
	if retval, err2 = p.handler.CreatePatient(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreatePatient: "+err2.Error())
		oprot.WriteMessageBegin("CreatePatient", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreatePatient", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type clinicalAPIProcessorGetPatient struct {
	handler ClinicalAPI
}

func (p *clinicalAPIProcessorGetPatient) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClinicalAPIGetPatientArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPatient", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ClinicalAPIGetPatientResult{}
	var retval *clinical.GetPatientResponse
	if retval, err2 = p.handler.GetPatient(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPatient: "+err2.Error())
		oprot.WriteMessageBegin("GetPatient", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPatient", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type clinicalAPIProcessorListPatients struct {
	handler ClinicalAPI
}

func (p *clinicalAPIProcessorListPatients) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClinicalAPIListPatientsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListPatients", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ClinicalAPIListPatientsResult{}
	var retval *clinical.ListPatientsResponse
	if retval, err2 = p.handler.ListPatients(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListPatients: "+err2.Error())
		oprot.WriteMessageBegin("ListPatients", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListPatients", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type clinicalAPIProcessorCreateVisit struct {
	handler ClinicalAPI
}

func (p *clinicalAPIProcessorCreateVisit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClinicalAPICreateVisitArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateVisit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ClinicalAPICreateVisitResult{}
	var retval *clinical.CreateVisitResponse
	if retval, err2 = p.handler.CreateVisit(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateVisit: "+err2.Error())
		oprot.WriteMessageBegin("CreateVisit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateVisit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type clinicalAPIProcessorGetVisit struct {
	handler ClinicalAPI
}

func (p *clinicalAPIProcessorGetVisit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClinicalAPIGetVisitArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetVisit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ClinicalAPIGetVisitResult{}
	var retval *clinical.GetVisitResponse
	if retval, err2 = p.handler.GetVisit(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetVisit: "+err2.Error())
		oprot.WriteMessageBegin("GetVisit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetVisit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type clinicalAPIProcessorGetPatientVisits struct {
	handler ClinicalAPI
}

func (p *clinicalAPIProcessorGetPatientVisits) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClinicalAPIGetPatientVisitsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPatientVisits", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ClinicalAPIGetPatientVisitsResult{}
	var retval *clinical.GetPatientVisitsResponse
	if retval, err2 = p.handler.GetPatientVisits(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPatientVisits: "+err2.Error())
		oprot.WriteMessageBegin("GetPatientVisits", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPatientVisits", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type clinicalAPIProcessorListAllVisits struct {
	handler ClinicalAPI
}

func (p *clinicalAPIProcessorListAllVisits) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClinicalAPIListAllVisitsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListAllVisits", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ClinicalAPIListAllVisitsResult{}
	var retval *clinical.ListAllVisitsResponse
	if retval, err2 = p.handler.ListAllVisits(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListAllVisits: "+err2.Error())
		oprot.WriteMessageBegin("ListAllVisits", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListAllVisits", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type clinicalAPIProcessorAddDiagnosis struct {
	handler ClinicalAPI
}

func (p *clinicalAPIProcessorAddDiagnosis) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClinicalAPIAddDiagnosisArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddDiagnosis", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ClinicalAPIAddDiagnosisResult{}
	var retval *clinical.AddDiagnosisResponse
	if retval, err2 = p.handler.AddDiagnosis(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddDiagnosis: "+err2.Error())
		oprot.WriteMessageBegin("AddDiagnosis", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddDiagnosis", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type clinicalAPIProcessorGetVisitDiagnoses struct {
	handler ClinicalAPI
}

func (p *clinicalAPIProcessorGetVisitDiagnoses) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClinicalAPIGetVisitDiagnosesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetVisitDiagnoses", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ClinicalAPIGetVisitDiagnosesResult{}
	var retval *clinical.GetVisitDiagnosesResponse
	if retval, err2 = p.handler.GetVisitDiagnoses(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetVisitDiagnoses: "+err2.Error())
		oprot.WriteMessageBegin("GetVisitDiagnoses", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetVisitDiagnoses", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type clinicalAPIProcessorListAllDiagnoses struct {
	handler ClinicalAPI
}

func (p *clinicalAPIProcessorListAllDiagnoses) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClinicalAPIListAllDiagnosesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListAllDiagnoses", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ClinicalAPIListAllDiagnosesResult{}
	var retval *clinical.ListAllDiagnosesResponse
	if retval, err2 = p.handler.ListAllDiagnoses(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListAllDiagnoses: "+err2.Error())
		oprot.WriteMessageBegin("ListAllDiagnoses", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListAllDiagnoses", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type clinicalAPIProcessorAddExamination struct {
	handler ClinicalAPI
}

func (p *clinicalAPIProcessorAddExamination) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClinicalAPIAddExaminationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddExamination", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ClinicalAPIAddExaminationResult{}
	var retval *clinical.AddExaminationResponse
	if retval, err2 = p.handler.AddExamination(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddExamination: "+err2.Error())
		oprot.WriteMessageBegin("AddExamination", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddExamination", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type clinicalAPIProcessorGetVisitExaminations struct {
	handler ClinicalAPI
}

func (p *clinicalAPIProcessorGetVisitExaminations) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClinicalAPIGetVisitExaminationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetVisitExaminations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ClinicalAPIGetVisitExaminationsResult{}
	var retval *clinical.GetVisitExaminationsResponse
	if retval, err2 = p.handler.GetVisitExaminations(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetVisitExaminations: "+err2.Error())
		oprot.WriteMessageBegin("GetVisitExaminations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetVisitExaminations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type clinicalAPIProcessorListAllExaminations struct {
	handler ClinicalAPI
}

func (p *clinicalAPIProcessorListAllExaminations) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClinicalAPIListAllExaminationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListAllExaminations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ClinicalAPIListAllExaminationsResult{}
	var retval *clinical.ListAllExaminationsResponse
	if retval, err2 = p.handler.ListAllExaminations(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListAllExaminations: "+err2.Error())
		oprot.WriteMessageBegin("ListAllExaminations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListAllExaminations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ClinicalAPICreatePatientArgs struct {
	Request *clinical.CreatePatientRequest `thrift:"request,1"`
}

func NewClinicalAPICreatePatientArgs() *ClinicalAPICreatePatientArgs {
	return &ClinicalAPICreatePatientArgs{}
}

func (p *ClinicalAPICreatePatientArgs) InitDefault() {
}

var ClinicalAPICreatePatientArgs_Request_DEFAULT *clinical.CreatePatientRequest

func (p *ClinicalAPICreatePatientArgs) GetRequest() (v *clinical.CreatePatientRequest) {
	if !p.IsSetRequest() {
		return ClinicalAPICreatePatientArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ClinicalAPICreatePatientArgs = map[int16]string{
	1: "request",
}

func (p *ClinicalAPICreatePatientArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClinicalAPICreatePatientArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPICreatePatientArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPICreatePatientArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := clinical.NewCreatePatientRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ClinicalAPICreatePatientArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePatient_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPICreatePatientArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClinicalAPICreatePatientArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPICreatePatientArgs(%+v)", *p)

}

type ClinicalAPICreatePatientResult struct {
	Success *clinical.CreatePatientResponse `thrift:"success,0,optional"`
}

func NewClinicalAPICreatePatientResult() *ClinicalAPICreatePatientResult {
	return &ClinicalAPICreatePatientResult{}
}

func (p *ClinicalAPICreatePatientResult) InitDefault() {
}

var ClinicalAPICreatePatientResult_Success_DEFAULT *clinical.CreatePatientResponse

func (p *ClinicalAPICreatePatientResult) GetSuccess() (v *clinical.CreatePatientResponse) {
	if !p.IsSetSuccess() {
		return ClinicalAPICreatePatientResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ClinicalAPICreatePatientResult = map[int16]string{
	0: "success",
}

func (p *ClinicalAPICreatePatientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalAPICreatePatientResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPICreatePatientResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPICreatePatientResult) ReadField0(iprot thrift.TProtocol) error {
	_field := clinical.NewCreatePatientResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ClinicalAPICreatePatientResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePatient_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPICreatePatientResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ClinicalAPICreatePatientResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPICreatePatientResult(%+v)", *p)

}

type ClinicalAPIGetPatientArgs struct {
	Request *clinical.GetPatientRequest `thrift:"request,1"`
}

func NewClinicalAPIGetPatientArgs() *ClinicalAPIGetPatientArgs {
	return &ClinicalAPIGetPatientArgs{}
}

func (p *ClinicalAPIGetPatientArgs) InitDefault() {
}

var ClinicalAPIGetPatientArgs_Request_DEFAULT *clinical.GetPatientRequest

func (p *ClinicalAPIGetPatientArgs) GetRequest() (v *clinical.GetPatientRequest) {
	if !p.IsSetRequest() {
		return ClinicalAPIGetPatientArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ClinicalAPIGetPatientArgs = map[int16]string{
	1: "request",
}

func (p *ClinicalAPIGetPatientArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClinicalAPIGetPatientArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIGetPatientArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIGetPatientArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := clinical.NewGetPatientRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ClinicalAPIGetPatientArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPatient_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIGetPatientArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClinicalAPIGetPatientArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIGetPatientArgs(%+v)", *p)

}

type ClinicalAPIGetPatientResult struct {
	Success *clinical.GetPatientResponse `thrift:"success,0,optional"`
}

func NewClinicalAPIGetPatientResult() *ClinicalAPIGetPatientResult {
	return &ClinicalAPIGetPatientResult{}
}

func (p *ClinicalAPIGetPatientResult) InitDefault() {
}

var ClinicalAPIGetPatientResult_Success_DEFAULT *clinical.GetPatientResponse

func (p *ClinicalAPIGetPatientResult) GetSuccess() (v *clinical.GetPatientResponse) {
	if !p.IsSetSuccess() {
		return ClinicalAPIGetPatientResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ClinicalAPIGetPatientResult = map[int16]string{
	0: "success",
}

func (p *ClinicalAPIGetPatientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalAPIGetPatientResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIGetPatientResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIGetPatientResult) ReadField0(iprot thrift.TProtocol) error {
	_field := clinical.NewGetPatientResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ClinicalAPIGetPatientResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPatient_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIGetPatientResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ClinicalAPIGetPatientResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIGetPatientResult(%+v)", *p)

}

type ClinicalAPIListPatientsArgs struct {
	Request *clinical.ListPatientsRequest `thrift:"request,1"`
}

func NewClinicalAPIListPatientsArgs() *ClinicalAPIListPatientsArgs {
	return &ClinicalAPIListPatientsArgs{}
}

func (p *ClinicalAPIListPatientsArgs) InitDefault() {
}

var ClinicalAPIListPatientsArgs_Request_DEFAULT *clinical.ListPatientsRequest

func (p *ClinicalAPIListPatientsArgs) GetRequest() (v *clinical.ListPatientsRequest) {
	if !p.IsSetRequest() {
		return ClinicalAPIListPatientsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ClinicalAPIListPatientsArgs = map[int16]string{
	1: "request",
}

func (p *ClinicalAPIListPatientsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClinicalAPIListPatientsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIListPatientsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIListPatientsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := clinical.NewListPatientsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ClinicalAPIListPatientsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPatients_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIListPatientsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClinicalAPIListPatientsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIListPatientsArgs(%+v)", *p)

}

type ClinicalAPIListPatientsResult struct {
	Success *clinical.ListPatientsResponse `thrift:"success,0,optional"`
}

func NewClinicalAPIListPatientsResult() *ClinicalAPIListPatientsResult {
	return &ClinicalAPIListPatientsResult{}
}

func (p *ClinicalAPIListPatientsResult) InitDefault() {
}

var ClinicalAPIListPatientsResult_Success_DEFAULT *clinical.ListPatientsResponse

func (p *ClinicalAPIListPatientsResult) GetSuccess() (v *clinical.ListPatientsResponse) {
	if !p.IsSetSuccess() {
		return ClinicalAPIListPatientsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ClinicalAPIListPatientsResult = map[int16]string{
	0: "success",
}

func (p *ClinicalAPIListPatientsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalAPIListPatientsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIListPatientsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIListPatientsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := clinical.NewListPatientsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ClinicalAPIListPatientsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPatients_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIListPatientsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ClinicalAPIListPatientsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIListPatientsResult(%+v)", *p)

}

type ClinicalAPICreateVisitArgs struct {
	Request *clinical.CreateVisitRequest `thrift:"request,1"`
}

func NewClinicalAPICreateVisitArgs() *ClinicalAPICreateVisitArgs {
	return &ClinicalAPICreateVisitArgs{}
}

func (p *ClinicalAPICreateVisitArgs) InitDefault() {
}

var ClinicalAPICreateVisitArgs_Request_DEFAULT *clinical.CreateVisitRequest

func (p *ClinicalAPICreateVisitArgs) GetRequest() (v *clinical.CreateVisitRequest) {
	if !p.IsSetRequest() {
		return ClinicalAPICreateVisitArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ClinicalAPICreateVisitArgs = map[int16]string{
	1: "request",
}

func (p *ClinicalAPICreateVisitArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClinicalAPICreateVisitArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPICreateVisitArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPICreateVisitArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := clinical.NewCreateVisitRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ClinicalAPICreateVisitArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateVisit_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPICreateVisitArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClinicalAPICreateVisitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPICreateVisitArgs(%+v)", *p)

}

type ClinicalAPICreateVisitResult struct {
	Success *clinical.CreateVisitResponse `thrift:"success,0,optional"`
}

func NewClinicalAPICreateVisitResult() *ClinicalAPICreateVisitResult {
	return &ClinicalAPICreateVisitResult{}
}

func (p *ClinicalAPICreateVisitResult) InitDefault() {
}

var ClinicalAPICreateVisitResult_Success_DEFAULT *clinical.CreateVisitResponse

func (p *ClinicalAPICreateVisitResult) GetSuccess() (v *clinical.CreateVisitResponse) {
	if !p.IsSetSuccess() {
		return ClinicalAPICreateVisitResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ClinicalAPICreateVisitResult = map[int16]string{
	0: "success",
}

func (p *ClinicalAPICreateVisitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalAPICreateVisitResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPICreateVisitResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPICreateVisitResult) ReadField0(iprot thrift.TProtocol) error {
	_field := clinical.NewCreateVisitResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ClinicalAPICreateVisitResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateVisit_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPICreateVisitResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ClinicalAPICreateVisitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPICreateVisitResult(%+v)", *p)

}

type ClinicalAPIGetVisitArgs struct {
	Request *clinical.GetVisitRequest `thrift:"request,1"`
}

func NewClinicalAPIGetVisitArgs() *ClinicalAPIGetVisitArgs {
	return &ClinicalAPIGetVisitArgs{}
}

func (p *ClinicalAPIGetVisitArgs) InitDefault() {
}

var ClinicalAPIGetVisitArgs_Request_DEFAULT *clinical.GetVisitRequest

func (p *ClinicalAPIGetVisitArgs) GetRequest() (v *clinical.GetVisitRequest) {
	if !p.IsSetRequest() {
		return ClinicalAPIGetVisitArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ClinicalAPIGetVisitArgs = map[int16]string{
	1: "request",
}

func (p *ClinicalAPIGetVisitArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClinicalAPIGetVisitArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIGetVisitArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIGetVisitArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := clinical.NewGetVisitRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ClinicalAPIGetVisitArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVisit_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIGetVisitArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClinicalAPIGetVisitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIGetVisitArgs(%+v)", *p)

}

type ClinicalAPIGetVisitResult struct {
	Success *clinical.GetVisitResponse `thrift:"success,0,optional"`
}

func NewClinicalAPIGetVisitResult() *ClinicalAPIGetVisitResult {
	return &ClinicalAPIGetVisitResult{}
}

func (p *ClinicalAPIGetVisitResult) InitDefault() {
}

var ClinicalAPIGetVisitResult_Success_DEFAULT *clinical.GetVisitResponse

func (p *ClinicalAPIGetVisitResult) GetSuccess() (v *clinical.GetVisitResponse) {
	if !p.IsSetSuccess() {
		return ClinicalAPIGetVisitResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ClinicalAPIGetVisitResult = map[int16]string{
	0: "success",
}

func (p *ClinicalAPIGetVisitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalAPIGetVisitResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIGetVisitResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIGetVisitResult) ReadField0(iprot thrift.TProtocol) error {
	_field := clinical.NewGetVisitResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ClinicalAPIGetVisitResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVisit_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIGetVisitResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ClinicalAPIGetVisitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIGetVisitResult(%+v)", *p)

}

type ClinicalAPIGetPatientVisitsArgs struct {
	Request *clinical.GetPatientVisitsRequest `thrift:"request,1"`
}

func NewClinicalAPIGetPatientVisitsArgs() *ClinicalAPIGetPatientVisitsArgs {
	return &ClinicalAPIGetPatientVisitsArgs{}
}

func (p *ClinicalAPIGetPatientVisitsArgs) InitDefault() {
}

var ClinicalAPIGetPatientVisitsArgs_Request_DEFAULT *clinical.GetPatientVisitsRequest

func (p *ClinicalAPIGetPatientVisitsArgs) GetRequest() (v *clinical.GetPatientVisitsRequest) {
	if !p.IsSetRequest() {
		return ClinicalAPIGetPatientVisitsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ClinicalAPIGetPatientVisitsArgs = map[int16]string{
	1: "request",
}

func (p *ClinicalAPIGetPatientVisitsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClinicalAPIGetPatientVisitsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIGetPatientVisitsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIGetPatientVisitsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := clinical.NewGetPatientVisitsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ClinicalAPIGetPatientVisitsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPatientVisits_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIGetPatientVisitsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClinicalAPIGetPatientVisitsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIGetPatientVisitsArgs(%+v)", *p)

}

type ClinicalAPIGetPatientVisitsResult struct {
	Success *clinical.GetPatientVisitsResponse `thrift:"success,0,optional"`
}

func NewClinicalAPIGetPatientVisitsResult() *ClinicalAPIGetPatientVisitsResult {
	return &ClinicalAPIGetPatientVisitsResult{}
}

func (p *ClinicalAPIGetPatientVisitsResult) InitDefault() {
}

var ClinicalAPIGetPatientVisitsResult_Success_DEFAULT *clinical.GetPatientVisitsResponse

func (p *ClinicalAPIGetPatientVisitsResult) GetSuccess() (v *clinical.GetPatientVisitsResponse) {
	if !p.IsSetSuccess() {
		return ClinicalAPIGetPatientVisitsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ClinicalAPIGetPatientVisitsResult = map[int16]string{
	0: "success",
}

func (p *ClinicalAPIGetPatientVisitsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalAPIGetPatientVisitsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIGetPatientVisitsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIGetPatientVisitsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := clinical.NewGetPatientVisitsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ClinicalAPIGetPatientVisitsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPatientVisits_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIGetPatientVisitsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ClinicalAPIGetPatientVisitsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIGetPatientVisitsResult(%+v)", *p)

}

type ClinicalAPIListAllVisitsArgs struct {
	Request *clinical.ListAllVisitsRequest `thrift:"request,1"`
}

func NewClinicalAPIListAllVisitsArgs() *ClinicalAPIListAllVisitsArgs {
	return &ClinicalAPIListAllVisitsArgs{}
}

func (p *ClinicalAPIListAllVisitsArgs) InitDefault() {
}

var ClinicalAPIListAllVisitsArgs_Request_DEFAULT *clinical.ListAllVisitsRequest

func (p *ClinicalAPIListAllVisitsArgs) GetRequest() (v *clinical.ListAllVisitsRequest) {
	if !p.IsSetRequest() {
		return ClinicalAPIListAllVisitsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ClinicalAPIListAllVisitsArgs = map[int16]string{
	1: "request",
}

func (p *ClinicalAPIListAllVisitsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClinicalAPIListAllVisitsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIListAllVisitsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIListAllVisitsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := clinical.NewListAllVisitsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ClinicalAPIListAllVisitsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAllVisits_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIListAllVisitsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClinicalAPIListAllVisitsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIListAllVisitsArgs(%+v)", *p)

}

type ClinicalAPIListAllVisitsResult struct {
	Success *clinical.ListAllVisitsResponse `thrift:"success,0,optional"`
}

func NewClinicalAPIListAllVisitsResult() *ClinicalAPIListAllVisitsResult {
	return &ClinicalAPIListAllVisitsResult{}
}

func (p *ClinicalAPIListAllVisitsResult) InitDefault() {
}

var ClinicalAPIListAllVisitsResult_Success_DEFAULT *clinical.ListAllVisitsResponse

func (p *ClinicalAPIListAllVisitsResult) GetSuccess() (v *clinical.ListAllVisitsResponse) {
	if !p.IsSetSuccess() {
		return ClinicalAPIListAllVisitsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ClinicalAPIListAllVisitsResult = map[int16]string{
	0: "success",
}

func (p *ClinicalAPIListAllVisitsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalAPIListAllVisitsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIListAllVisitsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIListAllVisitsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := clinical.NewListAllVisitsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ClinicalAPIListAllVisitsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAllVisits_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIListAllVisitsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ClinicalAPIListAllVisitsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIListAllVisitsResult(%+v)", *p)

}

type ClinicalAPIAddDiagnosisArgs struct {
	Request *clinical.AddDiagnosisRequest `thrift:"request,1"`
}

func NewClinicalAPIAddDiagnosisArgs() *ClinicalAPIAddDiagnosisArgs {
	return &ClinicalAPIAddDiagnosisArgs{}
}

func (p *ClinicalAPIAddDiagnosisArgs) InitDefault() {
}

var ClinicalAPIAddDiagnosisArgs_Request_DEFAULT *clinical.AddDiagnosisRequest

func (p *ClinicalAPIAddDiagnosisArgs) GetRequest() (v *clinical.AddDiagnosisRequest) {
	if !p.IsSetRequest() {
		return ClinicalAPIAddDiagnosisArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ClinicalAPIAddDiagnosisArgs = map[int16]string{
	1: "request",
}

func (p *ClinicalAPIAddDiagnosisArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClinicalAPIAddDiagnosisArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIAddDiagnosisArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIAddDiagnosisArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := clinical.NewAddDiagnosisRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ClinicalAPIAddDiagnosisArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddDiagnosis_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIAddDiagnosisArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClinicalAPIAddDiagnosisArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIAddDiagnosisArgs(%+v)", *p)

}

type ClinicalAPIAddDiagnosisResult struct {
	Success *clinical.AddDiagnosisResponse `thrift:"success,0,optional"`
}

func NewClinicalAPIAddDiagnosisResult() *ClinicalAPIAddDiagnosisResult {
	return &ClinicalAPIAddDiagnosisResult{}
}

func (p *ClinicalAPIAddDiagnosisResult) InitDefault() {
}

var ClinicalAPIAddDiagnosisResult_Success_DEFAULT *clinical.AddDiagnosisResponse

func (p *ClinicalAPIAddDiagnosisResult) GetSuccess() (v *clinical.AddDiagnosisResponse) {
	if !p.IsSetSuccess() {
		return ClinicalAPIAddDiagnosisResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ClinicalAPIAddDiagnosisResult = map[int16]string{
	0: "success",
}

func (p *ClinicalAPIAddDiagnosisResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalAPIAddDiagnosisResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIAddDiagnosisResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIAddDiagnosisResult) ReadField0(iprot thrift.TProtocol) error {
	_field := clinical.NewAddDiagnosisResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ClinicalAPIAddDiagnosisResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddDiagnosis_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIAddDiagnosisResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ClinicalAPIAddDiagnosisResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIAddDiagnosisResult(%+v)", *p)

}

type ClinicalAPIGetVisitDiagnosesArgs struct {
	Request *clinical.GetVisitDiagnosesRequest `thrift:"request,1"`
}

func NewClinicalAPIGetVisitDiagnosesArgs() *ClinicalAPIGetVisitDiagnosesArgs {
	return &ClinicalAPIGetVisitDiagnosesArgs{}
}

func (p *ClinicalAPIGetVisitDiagnosesArgs) InitDefault() {
}

var ClinicalAPIGetVisitDiagnosesArgs_Request_DEFAULT *clinical.GetVisitDiagnosesRequest

func (p *ClinicalAPIGetVisitDiagnosesArgs) GetRequest() (v *clinical.GetVisitDiagnosesRequest) {
	if !p.IsSetRequest() {
		return ClinicalAPIGetVisitDiagnosesArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ClinicalAPIGetVisitDiagnosesArgs = map[int16]string{
	1: "request",
}

func (p *ClinicalAPIGetVisitDiagnosesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClinicalAPIGetVisitDiagnosesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIGetVisitDiagnosesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIGetVisitDiagnosesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := clinical.NewGetVisitDiagnosesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ClinicalAPIGetVisitDiagnosesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVisitDiagnoses_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIGetVisitDiagnosesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClinicalAPIGetVisitDiagnosesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIGetVisitDiagnosesArgs(%+v)", *p)

}

type ClinicalAPIGetVisitDiagnosesResult struct {
	Success *clinical.GetVisitDiagnosesResponse `thrift:"success,0,optional"`
}

func NewClinicalAPIGetVisitDiagnosesResult() *ClinicalAPIGetVisitDiagnosesResult {
	return &ClinicalAPIGetVisitDiagnosesResult{}
}

func (p *ClinicalAPIGetVisitDiagnosesResult) InitDefault() {
}

var ClinicalAPIGetVisitDiagnosesResult_Success_DEFAULT *clinical.GetVisitDiagnosesResponse

func (p *ClinicalAPIGetVisitDiagnosesResult) GetSuccess() (v *clinical.GetVisitDiagnosesResponse) {
	if !p.IsSetSuccess() {
		return ClinicalAPIGetVisitDiagnosesResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ClinicalAPIGetVisitDiagnosesResult = map[int16]string{
	0: "success",
}

func (p *ClinicalAPIGetVisitDiagnosesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalAPIGetVisitDiagnosesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIGetVisitDiagnosesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIGetVisitDiagnosesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := clinical.NewGetVisitDiagnosesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ClinicalAPIGetVisitDiagnosesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVisitDiagnoses_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIGetVisitDiagnosesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ClinicalAPIGetVisitDiagnosesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIGetVisitDiagnosesResult(%+v)", *p)

}

type ClinicalAPIListAllDiagnosesArgs struct {
	Request *clinical.ListAllDiagnosesRequest `thrift:"request,1"`
}

func NewClinicalAPIListAllDiagnosesArgs() *ClinicalAPIListAllDiagnosesArgs {
	return &ClinicalAPIListAllDiagnosesArgs{}
}

func (p *ClinicalAPIListAllDiagnosesArgs) InitDefault() {
}

var ClinicalAPIListAllDiagnosesArgs_Request_DEFAULT *clinical.ListAllDiagnosesRequest

func (p *ClinicalAPIListAllDiagnosesArgs) GetRequest() (v *clinical.ListAllDiagnosesRequest) {
	if !p.IsSetRequest() {
		return ClinicalAPIListAllDiagnosesArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ClinicalAPIListAllDiagnosesArgs = map[int16]string{
	1: "request",
}

func (p *ClinicalAPIListAllDiagnosesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClinicalAPIListAllDiagnosesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIListAllDiagnosesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIListAllDiagnosesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := clinical.NewListAllDiagnosesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ClinicalAPIListAllDiagnosesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAllDiagnoses_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIListAllDiagnosesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClinicalAPIListAllDiagnosesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIListAllDiagnosesArgs(%+v)", *p)

}

type ClinicalAPIListAllDiagnosesResult struct {
	Success *clinical.ListAllDiagnosesResponse `thrift:"success,0,optional"`
}

func NewClinicalAPIListAllDiagnosesResult() *ClinicalAPIListAllDiagnosesResult {
	return &ClinicalAPIListAllDiagnosesResult{}
}

func (p *ClinicalAPIListAllDiagnosesResult) InitDefault() {
}

var ClinicalAPIListAllDiagnosesResult_Success_DEFAULT *clinical.ListAllDiagnosesResponse

func (p *ClinicalAPIListAllDiagnosesResult) GetSuccess() (v *clinical.ListAllDiagnosesResponse) {
	if !p.IsSetSuccess() {
		return ClinicalAPIListAllDiagnosesResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ClinicalAPIListAllDiagnosesResult = map[int16]string{
	0: "success",
}

func (p *ClinicalAPIListAllDiagnosesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalAPIListAllDiagnosesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIListAllDiagnosesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIListAllDiagnosesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := clinical.NewListAllDiagnosesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ClinicalAPIListAllDiagnosesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAllDiagnoses_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIListAllDiagnosesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ClinicalAPIListAllDiagnosesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIListAllDiagnosesResult(%+v)", *p)

}

type ClinicalAPIAddExaminationArgs struct {
	Request *clinical.AddExaminationRequest `thrift:"request,1"`
}

func NewClinicalAPIAddExaminationArgs() *ClinicalAPIAddExaminationArgs {
	return &ClinicalAPIAddExaminationArgs{}
}

func (p *ClinicalAPIAddExaminationArgs) InitDefault() {
}

var ClinicalAPIAddExaminationArgs_Request_DEFAULT *clinical.AddExaminationRequest

func (p *ClinicalAPIAddExaminationArgs) GetRequest() (v *clinical.AddExaminationRequest) {
	if !p.IsSetRequest() {
		return ClinicalAPIAddExaminationArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ClinicalAPIAddExaminationArgs = map[int16]string{
	1: "request",
}

func (p *ClinicalAPIAddExaminationArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClinicalAPIAddExaminationArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIAddExaminationArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIAddExaminationArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := clinical.NewAddExaminationRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ClinicalAPIAddExaminationArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddExamination_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIAddExaminationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClinicalAPIAddExaminationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIAddExaminationArgs(%+v)", *p)

}

type ClinicalAPIAddExaminationResult struct {
	Success *clinical.AddExaminationResponse `thrift:"success,0,optional"`
}

func NewClinicalAPIAddExaminationResult() *ClinicalAPIAddExaminationResult {
	return &ClinicalAPIAddExaminationResult{}
}

func (p *ClinicalAPIAddExaminationResult) InitDefault() {
}

var ClinicalAPIAddExaminationResult_Success_DEFAULT *clinical.AddExaminationResponse

func (p *ClinicalAPIAddExaminationResult) GetSuccess() (v *clinical.AddExaminationResponse) {
	if !p.IsSetSuccess() {
		return ClinicalAPIAddExaminationResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ClinicalAPIAddExaminationResult = map[int16]string{
	0: "success",
}

func (p *ClinicalAPIAddExaminationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalAPIAddExaminationResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIAddExaminationResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIAddExaminationResult) ReadField0(iprot thrift.TProtocol) error {
	_field := clinical.NewAddExaminationResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ClinicalAPIAddExaminationResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddExamination_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIAddExaminationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ClinicalAPIAddExaminationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIAddExaminationResult(%+v)", *p)

}

type ClinicalAPIGetVisitExaminationsArgs struct {
	Request *clinical.GetVisitExaminationsRequest `thrift:"request,1"`
}

func NewClinicalAPIGetVisitExaminationsArgs() *ClinicalAPIGetVisitExaminationsArgs {
	return &ClinicalAPIGetVisitExaminationsArgs{}
}

func (p *ClinicalAPIGetVisitExaminationsArgs) InitDefault() {
}

var ClinicalAPIGetVisitExaminationsArgs_Request_DEFAULT *clinical.GetVisitExaminationsRequest

func (p *ClinicalAPIGetVisitExaminationsArgs) GetRequest() (v *clinical.GetVisitExaminationsRequest) {
	if !p.IsSetRequest() {
		return ClinicalAPIGetVisitExaminationsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ClinicalAPIGetVisitExaminationsArgs = map[int16]string{
	1: "request",
}

func (p *ClinicalAPIGetVisitExaminationsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClinicalAPIGetVisitExaminationsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIGetVisitExaminationsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIGetVisitExaminationsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := clinical.NewGetVisitExaminationsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ClinicalAPIGetVisitExaminationsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVisitExaminations_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIGetVisitExaminationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClinicalAPIGetVisitExaminationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIGetVisitExaminationsArgs(%+v)", *p)

}

type ClinicalAPIGetVisitExaminationsResult struct {
	Success *clinical.GetVisitExaminationsResponse `thrift:"success,0,optional"`
}

func NewClinicalAPIGetVisitExaminationsResult() *ClinicalAPIGetVisitExaminationsResult {
	return &ClinicalAPIGetVisitExaminationsResult{}
}

func (p *ClinicalAPIGetVisitExaminationsResult) InitDefault() {
}

var ClinicalAPIGetVisitExaminationsResult_Success_DEFAULT *clinical.GetVisitExaminationsResponse

func (p *ClinicalAPIGetVisitExaminationsResult) GetSuccess() (v *clinical.GetVisitExaminationsResponse) {
	if !p.IsSetSuccess() {
		return ClinicalAPIGetVisitExaminationsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ClinicalAPIGetVisitExaminationsResult = map[int16]string{
	0: "success",
}

func (p *ClinicalAPIGetVisitExaminationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalAPIGetVisitExaminationsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIGetVisitExaminationsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIGetVisitExaminationsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := clinical.NewGetVisitExaminationsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ClinicalAPIGetVisitExaminationsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVisitExaminations_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIGetVisitExaminationsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ClinicalAPIGetVisitExaminationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIGetVisitExaminationsResult(%+v)", *p)

}

type ClinicalAPIListAllExaminationsArgs struct {
	Request *clinical.ListAllExaminationsRequest `thrift:"request,1"`
}

func NewClinicalAPIListAllExaminationsArgs() *ClinicalAPIListAllExaminationsArgs {
	return &ClinicalAPIListAllExaminationsArgs{}
}

func (p *ClinicalAPIListAllExaminationsArgs) InitDefault() {
}

var ClinicalAPIListAllExaminationsArgs_Request_DEFAULT *clinical.ListAllExaminationsRequest

func (p *ClinicalAPIListAllExaminationsArgs) GetRequest() (v *clinical.ListAllExaminationsRequest) {
	if !p.IsSetRequest() {
		return ClinicalAPIListAllExaminationsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ClinicalAPIListAllExaminationsArgs = map[int16]string{
	1: "request",
}

func (p *ClinicalAPIListAllExaminationsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ClinicalAPIListAllExaminationsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIListAllExaminationsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIListAllExaminationsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := clinical.NewListAllExaminationsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ClinicalAPIListAllExaminationsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAllExaminations_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIListAllExaminationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClinicalAPIListAllExaminationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIListAllExaminationsArgs(%+v)", *p)

}

type ClinicalAPIListAllExaminationsResult struct {
	Success *clinical.ListAllExaminationsResponse `thrift:"success,0,optional"`
}

func NewClinicalAPIListAllExaminationsResult() *ClinicalAPIListAllExaminationsResult {
	return &ClinicalAPIListAllExaminationsResult{}
}

func (p *ClinicalAPIListAllExaminationsResult) InitDefault() {
}

var ClinicalAPIListAllExaminationsResult_Success_DEFAULT *clinical.ListAllExaminationsResponse

func (p *ClinicalAPIListAllExaminationsResult) GetSuccess() (v *clinical.ListAllExaminationsResponse) {
	if !p.IsSetSuccess() {
		return ClinicalAPIListAllExaminationsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ClinicalAPIListAllExaminationsResult = map[int16]string{
	0: "success",
}

func (p *ClinicalAPIListAllExaminationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalAPIListAllExaminationsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClinicalAPIListAllExaminationsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClinicalAPIListAllExaminationsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := clinical.NewListAllExaminationsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ClinicalAPIListAllExaminationsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAllExaminations_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClinicalAPIListAllExaminationsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ClinicalAPIListAllExaminationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalAPIListAllExaminationsResult(%+v)", *p)

}
