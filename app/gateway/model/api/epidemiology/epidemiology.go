// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package epidemiology

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/yxrxy/AllergyBase/app/gateway/model/epidemiology"
)

// API 服务
type EpidemiologyAPI interface {
	// 环境暴露管理接口
	CreateEnvironmentExposure(ctx context.Context, request *epidemiology.CreateEnvironmentExposureRequest) (r *epidemiology.CreateEnvironmentExposureResponse, err error)

	GetEnvironmentExposure(ctx context.Context, request *epidemiology.GetEnvironmentExposureRequest) (r *epidemiology.GetEnvironmentExposureResponse, err error)

	GetPatientEnvironmentExposures(ctx context.Context, request *epidemiology.GetPatientEnvironmentExposuresRequest) (r *epidemiology.GetPatientEnvironmentExposuresResponse, err error)
	// 环境监测数据管理接口
	AddEnvironmentMonitor(ctx context.Context, request *epidemiology.AddEnvironmentMonitorRequest) (r *epidemiology.AddEnvironmentMonitorResponse, err error)

	GetEnvironmentMonitors(ctx context.Context, request *epidemiology.GetEnvironmentMonitorsRequest) (r *epidemiology.GetEnvironmentMonitorsResponse, err error)
	// 生活方式调查管理接口
	CreateLifestyleSurvey(ctx context.Context, request *epidemiology.CreateLifestyleSurveyRequest) (r *epidemiology.CreateLifestyleSurveyResponse, err error)

	GetLifestyleSurvey(ctx context.Context, request *epidemiology.GetLifestyleSurveyRequest) (r *epidemiology.GetLifestyleSurveyResponse, err error)
}

type EpidemiologyAPIClient struct {
	c thrift.TClient
}

func NewEpidemiologyAPIClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EpidemiologyAPIClient {
	return &EpidemiologyAPIClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewEpidemiologyAPIClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EpidemiologyAPIClient {
	return &EpidemiologyAPIClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewEpidemiologyAPIClient(c thrift.TClient) *EpidemiologyAPIClient {
	return &EpidemiologyAPIClient{
		c: c,
	}
}

func (p *EpidemiologyAPIClient) Client_() thrift.TClient {
	return p.c
}

func (p *EpidemiologyAPIClient) CreateEnvironmentExposure(ctx context.Context, request *epidemiology.CreateEnvironmentExposureRequest) (r *epidemiology.CreateEnvironmentExposureResponse, err error) {
	var _args EpidemiologyAPICreateEnvironmentExposureArgs
	_args.Request = request
	var _result EpidemiologyAPICreateEnvironmentExposureResult
	if err = p.Client_().Call(ctx, "CreateEnvironmentExposure", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EpidemiologyAPIClient) GetEnvironmentExposure(ctx context.Context, request *epidemiology.GetEnvironmentExposureRequest) (r *epidemiology.GetEnvironmentExposureResponse, err error) {
	var _args EpidemiologyAPIGetEnvironmentExposureArgs
	_args.Request = request
	var _result EpidemiologyAPIGetEnvironmentExposureResult
	if err = p.Client_().Call(ctx, "GetEnvironmentExposure", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EpidemiologyAPIClient) GetPatientEnvironmentExposures(ctx context.Context, request *epidemiology.GetPatientEnvironmentExposuresRequest) (r *epidemiology.GetPatientEnvironmentExposuresResponse, err error) {
	var _args EpidemiologyAPIGetPatientEnvironmentExposuresArgs
	_args.Request = request
	var _result EpidemiologyAPIGetPatientEnvironmentExposuresResult
	if err = p.Client_().Call(ctx, "GetPatientEnvironmentExposures", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EpidemiologyAPIClient) AddEnvironmentMonitor(ctx context.Context, request *epidemiology.AddEnvironmentMonitorRequest) (r *epidemiology.AddEnvironmentMonitorResponse, err error) {
	var _args EpidemiologyAPIAddEnvironmentMonitorArgs
	_args.Request = request
	var _result EpidemiologyAPIAddEnvironmentMonitorResult
	if err = p.Client_().Call(ctx, "AddEnvironmentMonitor", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EpidemiologyAPIClient) GetEnvironmentMonitors(ctx context.Context, request *epidemiology.GetEnvironmentMonitorsRequest) (r *epidemiology.GetEnvironmentMonitorsResponse, err error) {
	var _args EpidemiologyAPIGetEnvironmentMonitorsArgs
	_args.Request = request
	var _result EpidemiologyAPIGetEnvironmentMonitorsResult
	if err = p.Client_().Call(ctx, "GetEnvironmentMonitors", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EpidemiologyAPIClient) CreateLifestyleSurvey(ctx context.Context, request *epidemiology.CreateLifestyleSurveyRequest) (r *epidemiology.CreateLifestyleSurveyResponse, err error) {
	var _args EpidemiologyAPICreateLifestyleSurveyArgs
	_args.Request = request
	var _result EpidemiologyAPICreateLifestyleSurveyResult
	if err = p.Client_().Call(ctx, "CreateLifestyleSurvey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EpidemiologyAPIClient) GetLifestyleSurvey(ctx context.Context, request *epidemiology.GetLifestyleSurveyRequest) (r *epidemiology.GetLifestyleSurveyResponse, err error) {
	var _args EpidemiologyAPIGetLifestyleSurveyArgs
	_args.Request = request
	var _result EpidemiologyAPIGetLifestyleSurveyResult
	if err = p.Client_().Call(ctx, "GetLifestyleSurvey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type EpidemiologyAPIProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EpidemiologyAPI
}

func (p *EpidemiologyAPIProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EpidemiologyAPIProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EpidemiologyAPIProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEpidemiologyAPIProcessor(handler EpidemiologyAPI) *EpidemiologyAPIProcessor {
	self := &EpidemiologyAPIProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateEnvironmentExposure", &epidemiologyAPIProcessorCreateEnvironmentExposure{handler: handler})
	self.AddToProcessorMap("GetEnvironmentExposure", &epidemiologyAPIProcessorGetEnvironmentExposure{handler: handler})
	self.AddToProcessorMap("GetPatientEnvironmentExposures", &epidemiologyAPIProcessorGetPatientEnvironmentExposures{handler: handler})
	self.AddToProcessorMap("AddEnvironmentMonitor", &epidemiologyAPIProcessorAddEnvironmentMonitor{handler: handler})
	self.AddToProcessorMap("GetEnvironmentMonitors", &epidemiologyAPIProcessorGetEnvironmentMonitors{handler: handler})
	self.AddToProcessorMap("CreateLifestyleSurvey", &epidemiologyAPIProcessorCreateLifestyleSurvey{handler: handler})
	self.AddToProcessorMap("GetLifestyleSurvey", &epidemiologyAPIProcessorGetLifestyleSurvey{handler: handler})
	return self
}
func (p *EpidemiologyAPIProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type epidemiologyAPIProcessorCreateEnvironmentExposure struct {
	handler EpidemiologyAPI
}

func (p *epidemiologyAPIProcessorCreateEnvironmentExposure) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemiologyAPICreateEnvironmentExposureArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEnvironmentExposure", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemiologyAPICreateEnvironmentExposureResult{}
	var retval *epidemiology.CreateEnvironmentExposureResponse
	if retval, err2 = p.handler.CreateEnvironmentExposure(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEnvironmentExposure: "+err2.Error())
		oprot.WriteMessageBegin("CreateEnvironmentExposure", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEnvironmentExposure", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type epidemiologyAPIProcessorGetEnvironmentExposure struct {
	handler EpidemiologyAPI
}

func (p *epidemiologyAPIProcessorGetEnvironmentExposure) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemiologyAPIGetEnvironmentExposureArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEnvironmentExposure", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemiologyAPIGetEnvironmentExposureResult{}
	var retval *epidemiology.GetEnvironmentExposureResponse
	if retval, err2 = p.handler.GetEnvironmentExposure(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEnvironmentExposure: "+err2.Error())
		oprot.WriteMessageBegin("GetEnvironmentExposure", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEnvironmentExposure", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type epidemiologyAPIProcessorGetPatientEnvironmentExposures struct {
	handler EpidemiologyAPI
}

func (p *epidemiologyAPIProcessorGetPatientEnvironmentExposures) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemiologyAPIGetPatientEnvironmentExposuresArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPatientEnvironmentExposures", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemiologyAPIGetPatientEnvironmentExposuresResult{}
	var retval *epidemiology.GetPatientEnvironmentExposuresResponse
	if retval, err2 = p.handler.GetPatientEnvironmentExposures(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPatientEnvironmentExposures: "+err2.Error())
		oprot.WriteMessageBegin("GetPatientEnvironmentExposures", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPatientEnvironmentExposures", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type epidemiologyAPIProcessorAddEnvironmentMonitor struct {
	handler EpidemiologyAPI
}

func (p *epidemiologyAPIProcessorAddEnvironmentMonitor) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemiologyAPIAddEnvironmentMonitorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddEnvironmentMonitor", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemiologyAPIAddEnvironmentMonitorResult{}
	var retval *epidemiology.AddEnvironmentMonitorResponse
	if retval, err2 = p.handler.AddEnvironmentMonitor(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddEnvironmentMonitor: "+err2.Error())
		oprot.WriteMessageBegin("AddEnvironmentMonitor", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddEnvironmentMonitor", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type epidemiologyAPIProcessorGetEnvironmentMonitors struct {
	handler EpidemiologyAPI
}

func (p *epidemiologyAPIProcessorGetEnvironmentMonitors) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemiologyAPIGetEnvironmentMonitorsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEnvironmentMonitors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemiologyAPIGetEnvironmentMonitorsResult{}
	var retval *epidemiology.GetEnvironmentMonitorsResponse
	if retval, err2 = p.handler.GetEnvironmentMonitors(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEnvironmentMonitors: "+err2.Error())
		oprot.WriteMessageBegin("GetEnvironmentMonitors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEnvironmentMonitors", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type epidemiologyAPIProcessorCreateLifestyleSurvey struct {
	handler EpidemiologyAPI
}

func (p *epidemiologyAPIProcessorCreateLifestyleSurvey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemiologyAPICreateLifestyleSurveyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateLifestyleSurvey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemiologyAPICreateLifestyleSurveyResult{}
	var retval *epidemiology.CreateLifestyleSurveyResponse
	if retval, err2 = p.handler.CreateLifestyleSurvey(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateLifestyleSurvey: "+err2.Error())
		oprot.WriteMessageBegin("CreateLifestyleSurvey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateLifestyleSurvey", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type epidemiologyAPIProcessorGetLifestyleSurvey struct {
	handler EpidemiologyAPI
}

func (p *epidemiologyAPIProcessorGetLifestyleSurvey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemiologyAPIGetLifestyleSurveyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLifestyleSurvey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemiologyAPIGetLifestyleSurveyResult{}
	var retval *epidemiology.GetLifestyleSurveyResponse
	if retval, err2 = p.handler.GetLifestyleSurvey(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLifestyleSurvey: "+err2.Error())
		oprot.WriteMessageBegin("GetLifestyleSurvey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLifestyleSurvey", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type EpidemiologyAPICreateEnvironmentExposureArgs struct {
	Request *epidemiology.CreateEnvironmentExposureRequest `thrift:"request,1"`
}

func NewEpidemiologyAPICreateEnvironmentExposureArgs() *EpidemiologyAPICreateEnvironmentExposureArgs {
	return &EpidemiologyAPICreateEnvironmentExposureArgs{}
}

func (p *EpidemiologyAPICreateEnvironmentExposureArgs) InitDefault() {
}

var EpidemiologyAPICreateEnvironmentExposureArgs_Request_DEFAULT *epidemiology.CreateEnvironmentExposureRequest

func (p *EpidemiologyAPICreateEnvironmentExposureArgs) GetRequest() (v *epidemiology.CreateEnvironmentExposureRequest) {
	if !p.IsSetRequest() {
		return EpidemiologyAPICreateEnvironmentExposureArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EpidemiologyAPICreateEnvironmentExposureArgs = map[int16]string{
	1: "request",
}

func (p *EpidemiologyAPICreateEnvironmentExposureArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EpidemiologyAPICreateEnvironmentExposureArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyAPICreateEnvironmentExposureArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyAPICreateEnvironmentExposureArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := epidemiology.NewCreateEnvironmentExposureRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EpidemiologyAPICreateEnvironmentExposureArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEnvironmentExposure_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyAPICreateEnvironmentExposureArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemiologyAPICreateEnvironmentExposureArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyAPICreateEnvironmentExposureArgs(%+v)", *p)

}

type EpidemiologyAPICreateEnvironmentExposureResult struct {
	Success *epidemiology.CreateEnvironmentExposureResponse `thrift:"success,0,optional"`
}

func NewEpidemiologyAPICreateEnvironmentExposureResult() *EpidemiologyAPICreateEnvironmentExposureResult {
	return &EpidemiologyAPICreateEnvironmentExposureResult{}
}

func (p *EpidemiologyAPICreateEnvironmentExposureResult) InitDefault() {
}

var EpidemiologyAPICreateEnvironmentExposureResult_Success_DEFAULT *epidemiology.CreateEnvironmentExposureResponse

func (p *EpidemiologyAPICreateEnvironmentExposureResult) GetSuccess() (v *epidemiology.CreateEnvironmentExposureResponse) {
	if !p.IsSetSuccess() {
		return EpidemiologyAPICreateEnvironmentExposureResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemiologyAPICreateEnvironmentExposureResult = map[int16]string{
	0: "success",
}

func (p *EpidemiologyAPICreateEnvironmentExposureResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemiologyAPICreateEnvironmentExposureResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyAPICreateEnvironmentExposureResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyAPICreateEnvironmentExposureResult) ReadField0(iprot thrift.TProtocol) error {
	_field := epidemiology.NewCreateEnvironmentExposureResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemiologyAPICreateEnvironmentExposureResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEnvironmentExposure_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyAPICreateEnvironmentExposureResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemiologyAPICreateEnvironmentExposureResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyAPICreateEnvironmentExposureResult(%+v)", *p)

}

type EpidemiologyAPIGetEnvironmentExposureArgs struct {
	Request *epidemiology.GetEnvironmentExposureRequest `thrift:"request,1"`
}

func NewEpidemiologyAPIGetEnvironmentExposureArgs() *EpidemiologyAPIGetEnvironmentExposureArgs {
	return &EpidemiologyAPIGetEnvironmentExposureArgs{}
}

func (p *EpidemiologyAPIGetEnvironmentExposureArgs) InitDefault() {
}

var EpidemiologyAPIGetEnvironmentExposureArgs_Request_DEFAULT *epidemiology.GetEnvironmentExposureRequest

func (p *EpidemiologyAPIGetEnvironmentExposureArgs) GetRequest() (v *epidemiology.GetEnvironmentExposureRequest) {
	if !p.IsSetRequest() {
		return EpidemiologyAPIGetEnvironmentExposureArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EpidemiologyAPIGetEnvironmentExposureArgs = map[int16]string{
	1: "request",
}

func (p *EpidemiologyAPIGetEnvironmentExposureArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EpidemiologyAPIGetEnvironmentExposureArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyAPIGetEnvironmentExposureArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetEnvironmentExposureArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := epidemiology.NewGetEnvironmentExposureRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EpidemiologyAPIGetEnvironmentExposureArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEnvironmentExposure_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetEnvironmentExposureArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemiologyAPIGetEnvironmentExposureArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyAPIGetEnvironmentExposureArgs(%+v)", *p)

}

type EpidemiologyAPIGetEnvironmentExposureResult struct {
	Success *epidemiology.GetEnvironmentExposureResponse `thrift:"success,0,optional"`
}

func NewEpidemiologyAPIGetEnvironmentExposureResult() *EpidemiologyAPIGetEnvironmentExposureResult {
	return &EpidemiologyAPIGetEnvironmentExposureResult{}
}

func (p *EpidemiologyAPIGetEnvironmentExposureResult) InitDefault() {
}

var EpidemiologyAPIGetEnvironmentExposureResult_Success_DEFAULT *epidemiology.GetEnvironmentExposureResponse

func (p *EpidemiologyAPIGetEnvironmentExposureResult) GetSuccess() (v *epidemiology.GetEnvironmentExposureResponse) {
	if !p.IsSetSuccess() {
		return EpidemiologyAPIGetEnvironmentExposureResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemiologyAPIGetEnvironmentExposureResult = map[int16]string{
	0: "success",
}

func (p *EpidemiologyAPIGetEnvironmentExposureResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemiologyAPIGetEnvironmentExposureResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyAPIGetEnvironmentExposureResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetEnvironmentExposureResult) ReadField0(iprot thrift.TProtocol) error {
	_field := epidemiology.NewGetEnvironmentExposureResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemiologyAPIGetEnvironmentExposureResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEnvironmentExposure_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetEnvironmentExposureResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemiologyAPIGetEnvironmentExposureResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyAPIGetEnvironmentExposureResult(%+v)", *p)

}

type EpidemiologyAPIGetPatientEnvironmentExposuresArgs struct {
	Request *epidemiology.GetPatientEnvironmentExposuresRequest `thrift:"request,1"`
}

func NewEpidemiologyAPIGetPatientEnvironmentExposuresArgs() *EpidemiologyAPIGetPatientEnvironmentExposuresArgs {
	return &EpidemiologyAPIGetPatientEnvironmentExposuresArgs{}
}

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresArgs) InitDefault() {
}

var EpidemiologyAPIGetPatientEnvironmentExposuresArgs_Request_DEFAULT *epidemiology.GetPatientEnvironmentExposuresRequest

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresArgs) GetRequest() (v *epidemiology.GetPatientEnvironmentExposuresRequest) {
	if !p.IsSetRequest() {
		return EpidemiologyAPIGetPatientEnvironmentExposuresArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EpidemiologyAPIGetPatientEnvironmentExposuresArgs = map[int16]string{
	1: "request",
}

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyAPIGetPatientEnvironmentExposuresArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := epidemiology.NewGetPatientEnvironmentExposuresRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPatientEnvironmentExposures_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyAPIGetPatientEnvironmentExposuresArgs(%+v)", *p)

}

type EpidemiologyAPIGetPatientEnvironmentExposuresResult struct {
	Success *epidemiology.GetPatientEnvironmentExposuresResponse `thrift:"success,0,optional"`
}

func NewEpidemiologyAPIGetPatientEnvironmentExposuresResult() *EpidemiologyAPIGetPatientEnvironmentExposuresResult {
	return &EpidemiologyAPIGetPatientEnvironmentExposuresResult{}
}

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresResult) InitDefault() {
}

var EpidemiologyAPIGetPatientEnvironmentExposuresResult_Success_DEFAULT *epidemiology.GetPatientEnvironmentExposuresResponse

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresResult) GetSuccess() (v *epidemiology.GetPatientEnvironmentExposuresResponse) {
	if !p.IsSetSuccess() {
		return EpidemiologyAPIGetPatientEnvironmentExposuresResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemiologyAPIGetPatientEnvironmentExposuresResult = map[int16]string{
	0: "success",
}

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyAPIGetPatientEnvironmentExposuresResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresResult) ReadField0(iprot thrift.TProtocol) error {
	_field := epidemiology.NewGetPatientEnvironmentExposuresResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPatientEnvironmentExposures_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemiologyAPIGetPatientEnvironmentExposuresResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyAPIGetPatientEnvironmentExposuresResult(%+v)", *p)

}

type EpidemiologyAPIAddEnvironmentMonitorArgs struct {
	Request *epidemiology.AddEnvironmentMonitorRequest `thrift:"request,1"`
}

func NewEpidemiologyAPIAddEnvironmentMonitorArgs() *EpidemiologyAPIAddEnvironmentMonitorArgs {
	return &EpidemiologyAPIAddEnvironmentMonitorArgs{}
}

func (p *EpidemiologyAPIAddEnvironmentMonitorArgs) InitDefault() {
}

var EpidemiologyAPIAddEnvironmentMonitorArgs_Request_DEFAULT *epidemiology.AddEnvironmentMonitorRequest

func (p *EpidemiologyAPIAddEnvironmentMonitorArgs) GetRequest() (v *epidemiology.AddEnvironmentMonitorRequest) {
	if !p.IsSetRequest() {
		return EpidemiologyAPIAddEnvironmentMonitorArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EpidemiologyAPIAddEnvironmentMonitorArgs = map[int16]string{
	1: "request",
}

func (p *EpidemiologyAPIAddEnvironmentMonitorArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EpidemiologyAPIAddEnvironmentMonitorArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyAPIAddEnvironmentMonitorArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyAPIAddEnvironmentMonitorArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := epidemiology.NewAddEnvironmentMonitorRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EpidemiologyAPIAddEnvironmentMonitorArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddEnvironmentMonitor_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyAPIAddEnvironmentMonitorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemiologyAPIAddEnvironmentMonitorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyAPIAddEnvironmentMonitorArgs(%+v)", *p)

}

type EpidemiologyAPIAddEnvironmentMonitorResult struct {
	Success *epidemiology.AddEnvironmentMonitorResponse `thrift:"success,0,optional"`
}

func NewEpidemiologyAPIAddEnvironmentMonitorResult() *EpidemiologyAPIAddEnvironmentMonitorResult {
	return &EpidemiologyAPIAddEnvironmentMonitorResult{}
}

func (p *EpidemiologyAPIAddEnvironmentMonitorResult) InitDefault() {
}

var EpidemiologyAPIAddEnvironmentMonitorResult_Success_DEFAULT *epidemiology.AddEnvironmentMonitorResponse

func (p *EpidemiologyAPIAddEnvironmentMonitorResult) GetSuccess() (v *epidemiology.AddEnvironmentMonitorResponse) {
	if !p.IsSetSuccess() {
		return EpidemiologyAPIAddEnvironmentMonitorResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemiologyAPIAddEnvironmentMonitorResult = map[int16]string{
	0: "success",
}

func (p *EpidemiologyAPIAddEnvironmentMonitorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemiologyAPIAddEnvironmentMonitorResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyAPIAddEnvironmentMonitorResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyAPIAddEnvironmentMonitorResult) ReadField0(iprot thrift.TProtocol) error {
	_field := epidemiology.NewAddEnvironmentMonitorResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemiologyAPIAddEnvironmentMonitorResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddEnvironmentMonitor_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyAPIAddEnvironmentMonitorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemiologyAPIAddEnvironmentMonitorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyAPIAddEnvironmentMonitorResult(%+v)", *p)

}

type EpidemiologyAPIGetEnvironmentMonitorsArgs struct {
	Request *epidemiology.GetEnvironmentMonitorsRequest `thrift:"request,1"`
}

func NewEpidemiologyAPIGetEnvironmentMonitorsArgs() *EpidemiologyAPIGetEnvironmentMonitorsArgs {
	return &EpidemiologyAPIGetEnvironmentMonitorsArgs{}
}

func (p *EpidemiologyAPIGetEnvironmentMonitorsArgs) InitDefault() {
}

var EpidemiologyAPIGetEnvironmentMonitorsArgs_Request_DEFAULT *epidemiology.GetEnvironmentMonitorsRequest

func (p *EpidemiologyAPIGetEnvironmentMonitorsArgs) GetRequest() (v *epidemiology.GetEnvironmentMonitorsRequest) {
	if !p.IsSetRequest() {
		return EpidemiologyAPIGetEnvironmentMonitorsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EpidemiologyAPIGetEnvironmentMonitorsArgs = map[int16]string{
	1: "request",
}

func (p *EpidemiologyAPIGetEnvironmentMonitorsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EpidemiologyAPIGetEnvironmentMonitorsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyAPIGetEnvironmentMonitorsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetEnvironmentMonitorsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := epidemiology.NewGetEnvironmentMonitorsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EpidemiologyAPIGetEnvironmentMonitorsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEnvironmentMonitors_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetEnvironmentMonitorsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemiologyAPIGetEnvironmentMonitorsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyAPIGetEnvironmentMonitorsArgs(%+v)", *p)

}

type EpidemiologyAPIGetEnvironmentMonitorsResult struct {
	Success *epidemiology.GetEnvironmentMonitorsResponse `thrift:"success,0,optional"`
}

func NewEpidemiologyAPIGetEnvironmentMonitorsResult() *EpidemiologyAPIGetEnvironmentMonitorsResult {
	return &EpidemiologyAPIGetEnvironmentMonitorsResult{}
}

func (p *EpidemiologyAPIGetEnvironmentMonitorsResult) InitDefault() {
}

var EpidemiologyAPIGetEnvironmentMonitorsResult_Success_DEFAULT *epidemiology.GetEnvironmentMonitorsResponse

func (p *EpidemiologyAPIGetEnvironmentMonitorsResult) GetSuccess() (v *epidemiology.GetEnvironmentMonitorsResponse) {
	if !p.IsSetSuccess() {
		return EpidemiologyAPIGetEnvironmentMonitorsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemiologyAPIGetEnvironmentMonitorsResult = map[int16]string{
	0: "success",
}

func (p *EpidemiologyAPIGetEnvironmentMonitorsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemiologyAPIGetEnvironmentMonitorsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyAPIGetEnvironmentMonitorsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetEnvironmentMonitorsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := epidemiology.NewGetEnvironmentMonitorsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemiologyAPIGetEnvironmentMonitorsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEnvironmentMonitors_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetEnvironmentMonitorsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemiologyAPIGetEnvironmentMonitorsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyAPIGetEnvironmentMonitorsResult(%+v)", *p)

}

type EpidemiologyAPICreateLifestyleSurveyArgs struct {
	Request *epidemiology.CreateLifestyleSurveyRequest `thrift:"request,1"`
}

func NewEpidemiologyAPICreateLifestyleSurveyArgs() *EpidemiologyAPICreateLifestyleSurveyArgs {
	return &EpidemiologyAPICreateLifestyleSurveyArgs{}
}

func (p *EpidemiologyAPICreateLifestyleSurveyArgs) InitDefault() {
}

var EpidemiologyAPICreateLifestyleSurveyArgs_Request_DEFAULT *epidemiology.CreateLifestyleSurveyRequest

func (p *EpidemiologyAPICreateLifestyleSurveyArgs) GetRequest() (v *epidemiology.CreateLifestyleSurveyRequest) {
	if !p.IsSetRequest() {
		return EpidemiologyAPICreateLifestyleSurveyArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EpidemiologyAPICreateLifestyleSurveyArgs = map[int16]string{
	1: "request",
}

func (p *EpidemiologyAPICreateLifestyleSurveyArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EpidemiologyAPICreateLifestyleSurveyArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyAPICreateLifestyleSurveyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyAPICreateLifestyleSurveyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := epidemiology.NewCreateLifestyleSurveyRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EpidemiologyAPICreateLifestyleSurveyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateLifestyleSurvey_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyAPICreateLifestyleSurveyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemiologyAPICreateLifestyleSurveyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyAPICreateLifestyleSurveyArgs(%+v)", *p)

}

type EpidemiologyAPICreateLifestyleSurveyResult struct {
	Success *epidemiology.CreateLifestyleSurveyResponse `thrift:"success,0,optional"`
}

func NewEpidemiologyAPICreateLifestyleSurveyResult() *EpidemiologyAPICreateLifestyleSurveyResult {
	return &EpidemiologyAPICreateLifestyleSurveyResult{}
}

func (p *EpidemiologyAPICreateLifestyleSurveyResult) InitDefault() {
}

var EpidemiologyAPICreateLifestyleSurveyResult_Success_DEFAULT *epidemiology.CreateLifestyleSurveyResponse

func (p *EpidemiologyAPICreateLifestyleSurveyResult) GetSuccess() (v *epidemiology.CreateLifestyleSurveyResponse) {
	if !p.IsSetSuccess() {
		return EpidemiologyAPICreateLifestyleSurveyResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemiologyAPICreateLifestyleSurveyResult = map[int16]string{
	0: "success",
}

func (p *EpidemiologyAPICreateLifestyleSurveyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemiologyAPICreateLifestyleSurveyResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyAPICreateLifestyleSurveyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyAPICreateLifestyleSurveyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := epidemiology.NewCreateLifestyleSurveyResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemiologyAPICreateLifestyleSurveyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateLifestyleSurvey_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyAPICreateLifestyleSurveyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemiologyAPICreateLifestyleSurveyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyAPICreateLifestyleSurveyResult(%+v)", *p)

}

type EpidemiologyAPIGetLifestyleSurveyArgs struct {
	Request *epidemiology.GetLifestyleSurveyRequest `thrift:"request,1"`
}

func NewEpidemiologyAPIGetLifestyleSurveyArgs() *EpidemiologyAPIGetLifestyleSurveyArgs {
	return &EpidemiologyAPIGetLifestyleSurveyArgs{}
}

func (p *EpidemiologyAPIGetLifestyleSurveyArgs) InitDefault() {
}

var EpidemiologyAPIGetLifestyleSurveyArgs_Request_DEFAULT *epidemiology.GetLifestyleSurveyRequest

func (p *EpidemiologyAPIGetLifestyleSurveyArgs) GetRequest() (v *epidemiology.GetLifestyleSurveyRequest) {
	if !p.IsSetRequest() {
		return EpidemiologyAPIGetLifestyleSurveyArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EpidemiologyAPIGetLifestyleSurveyArgs = map[int16]string{
	1: "request",
}

func (p *EpidemiologyAPIGetLifestyleSurveyArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EpidemiologyAPIGetLifestyleSurveyArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyAPIGetLifestyleSurveyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetLifestyleSurveyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := epidemiology.NewGetLifestyleSurveyRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EpidemiologyAPIGetLifestyleSurveyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLifestyleSurvey_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetLifestyleSurveyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemiologyAPIGetLifestyleSurveyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyAPIGetLifestyleSurveyArgs(%+v)", *p)

}

type EpidemiologyAPIGetLifestyleSurveyResult struct {
	Success *epidemiology.GetLifestyleSurveyResponse `thrift:"success,0,optional"`
}

func NewEpidemiologyAPIGetLifestyleSurveyResult() *EpidemiologyAPIGetLifestyleSurveyResult {
	return &EpidemiologyAPIGetLifestyleSurveyResult{}
}

func (p *EpidemiologyAPIGetLifestyleSurveyResult) InitDefault() {
}

var EpidemiologyAPIGetLifestyleSurveyResult_Success_DEFAULT *epidemiology.GetLifestyleSurveyResponse

func (p *EpidemiologyAPIGetLifestyleSurveyResult) GetSuccess() (v *epidemiology.GetLifestyleSurveyResponse) {
	if !p.IsSetSuccess() {
		return EpidemiologyAPIGetLifestyleSurveyResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemiologyAPIGetLifestyleSurveyResult = map[int16]string{
	0: "success",
}

func (p *EpidemiologyAPIGetLifestyleSurveyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemiologyAPIGetLifestyleSurveyResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyAPIGetLifestyleSurveyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetLifestyleSurveyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := epidemiology.NewGetLifestyleSurveyResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemiologyAPIGetLifestyleSurveyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLifestyleSurvey_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyAPIGetLifestyleSurveyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemiologyAPIGetLifestyleSurveyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyAPIGetLifestyleSurveyResult(%+v)", *p)

}
