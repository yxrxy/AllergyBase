// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package followup

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/yxrxy/AllergyBase/app/gateway/model/followup"
)

// API 服务
type FollowupAPI interface {
	// 随访计划管理接口
	CreateFollowupPlan(ctx context.Context, request *followup.CreateFollowupPlanRequest) (r *followup.CreateFollowupPlanResponse, err error)

	GetFollowupPlan(ctx context.Context, request *followup.GetFollowupPlanRequest) (r *followup.GetFollowupPlanResponse, err error)

	GetFollowupPlans(ctx context.Context, request *followup.GetFollowupPlansRequest) (r *followup.GetFollowupPlansResponse, err error)

	GetPatientFollowupPlans(ctx context.Context, request *followup.GetPatientFollowupPlansRequest) (r *followup.GetPatientFollowupPlansResponse, err error)
	// 随访记录管理接口
	CreateFollowupRecord(ctx context.Context, request *followup.CreateFollowupRecordRequest) (r *followup.CreateFollowupRecordResponse, err error)

	GetFollowupRecord(ctx context.Context, request *followup.GetFollowupRecordRequest) (r *followup.GetFollowupRecordResponse, err error)

	GetPlanFollowupRecords(ctx context.Context, request *followup.GetPlanFollowupRecordsRequest) (r *followup.GetPlanFollowupRecordsResponse, err error)
	// 用药监测管理接口
	AddMedicationMonitor(ctx context.Context, request *followup.AddMedicationMonitorRequest) (r *followup.AddMedicationMonitorResponse, err error)

	GetFollowupMedications(ctx context.Context, request *followup.GetFollowupMedicationsRequest) (r *followup.GetFollowupMedicationsResponse, err error)
}

type FollowupAPIClient struct {
	c thrift.TClient
}

func NewFollowupAPIClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FollowupAPIClient {
	return &FollowupAPIClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewFollowupAPIClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FollowupAPIClient {
	return &FollowupAPIClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewFollowupAPIClient(c thrift.TClient) *FollowupAPIClient {
	return &FollowupAPIClient{
		c: c,
	}
}

func (p *FollowupAPIClient) Client_() thrift.TClient {
	return p.c
}

func (p *FollowupAPIClient) CreateFollowupPlan(ctx context.Context, request *followup.CreateFollowupPlanRequest) (r *followup.CreateFollowupPlanResponse, err error) {
	var _args FollowupAPICreateFollowupPlanArgs
	_args.Request = request
	var _result FollowupAPICreateFollowupPlanResult
	if err = p.Client_().Call(ctx, "CreateFollowupPlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FollowupAPIClient) GetFollowupPlan(ctx context.Context, request *followup.GetFollowupPlanRequest) (r *followup.GetFollowupPlanResponse, err error) {
	var _args FollowupAPIGetFollowupPlanArgs
	_args.Request = request
	var _result FollowupAPIGetFollowupPlanResult
	if err = p.Client_().Call(ctx, "GetFollowupPlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FollowupAPIClient) GetFollowupPlans(ctx context.Context, request *followup.GetFollowupPlansRequest) (r *followup.GetFollowupPlansResponse, err error) {
	var _args FollowupAPIGetFollowupPlansArgs
	_args.Request = request
	var _result FollowupAPIGetFollowupPlansResult
	if err = p.Client_().Call(ctx, "GetFollowupPlans", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FollowupAPIClient) GetPatientFollowupPlans(ctx context.Context, request *followup.GetPatientFollowupPlansRequest) (r *followup.GetPatientFollowupPlansResponse, err error) {
	var _args FollowupAPIGetPatientFollowupPlansArgs
	_args.Request = request
	var _result FollowupAPIGetPatientFollowupPlansResult
	if err = p.Client_().Call(ctx, "GetPatientFollowupPlans", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FollowupAPIClient) CreateFollowupRecord(ctx context.Context, request *followup.CreateFollowupRecordRequest) (r *followup.CreateFollowupRecordResponse, err error) {
	var _args FollowupAPICreateFollowupRecordArgs
	_args.Request = request
	var _result FollowupAPICreateFollowupRecordResult
	if err = p.Client_().Call(ctx, "CreateFollowupRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FollowupAPIClient) GetFollowupRecord(ctx context.Context, request *followup.GetFollowupRecordRequest) (r *followup.GetFollowupRecordResponse, err error) {
	var _args FollowupAPIGetFollowupRecordArgs
	_args.Request = request
	var _result FollowupAPIGetFollowupRecordResult
	if err = p.Client_().Call(ctx, "GetFollowupRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FollowupAPIClient) GetPlanFollowupRecords(ctx context.Context, request *followup.GetPlanFollowupRecordsRequest) (r *followup.GetPlanFollowupRecordsResponse, err error) {
	var _args FollowupAPIGetPlanFollowupRecordsArgs
	_args.Request = request
	var _result FollowupAPIGetPlanFollowupRecordsResult
	if err = p.Client_().Call(ctx, "GetPlanFollowupRecords", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FollowupAPIClient) AddMedicationMonitor(ctx context.Context, request *followup.AddMedicationMonitorRequest) (r *followup.AddMedicationMonitorResponse, err error) {
	var _args FollowupAPIAddMedicationMonitorArgs
	_args.Request = request
	var _result FollowupAPIAddMedicationMonitorResult
	if err = p.Client_().Call(ctx, "AddMedicationMonitor", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FollowupAPIClient) GetFollowupMedications(ctx context.Context, request *followup.GetFollowupMedicationsRequest) (r *followup.GetFollowupMedicationsResponse, err error) {
	var _args FollowupAPIGetFollowupMedicationsArgs
	_args.Request = request
	var _result FollowupAPIGetFollowupMedicationsResult
	if err = p.Client_().Call(ctx, "GetFollowupMedications", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type FollowupAPIProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      FollowupAPI
}

func (p *FollowupAPIProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *FollowupAPIProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *FollowupAPIProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewFollowupAPIProcessor(handler FollowupAPI) *FollowupAPIProcessor {
	self := &FollowupAPIProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateFollowupPlan", &followupAPIProcessorCreateFollowupPlan{handler: handler})
	self.AddToProcessorMap("GetFollowupPlan", &followupAPIProcessorGetFollowupPlan{handler: handler})
	self.AddToProcessorMap("GetFollowupPlans", &followupAPIProcessorGetFollowupPlans{handler: handler})
	self.AddToProcessorMap("GetPatientFollowupPlans", &followupAPIProcessorGetPatientFollowupPlans{handler: handler})
	self.AddToProcessorMap("CreateFollowupRecord", &followupAPIProcessorCreateFollowupRecord{handler: handler})
	self.AddToProcessorMap("GetFollowupRecord", &followupAPIProcessorGetFollowupRecord{handler: handler})
	self.AddToProcessorMap("GetPlanFollowupRecords", &followupAPIProcessorGetPlanFollowupRecords{handler: handler})
	self.AddToProcessorMap("AddMedicationMonitor", &followupAPIProcessorAddMedicationMonitor{handler: handler})
	self.AddToProcessorMap("GetFollowupMedications", &followupAPIProcessorGetFollowupMedications{handler: handler})
	return self
}
func (p *FollowupAPIProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type followupAPIProcessorCreateFollowupPlan struct {
	handler FollowupAPI
}

func (p *followupAPIProcessorCreateFollowupPlan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FollowupAPICreateFollowupPlanArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateFollowupPlan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FollowupAPICreateFollowupPlanResult{}
	var retval *followup.CreateFollowupPlanResponse
	if retval, err2 = p.handler.CreateFollowupPlan(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateFollowupPlan: "+err2.Error())
		oprot.WriteMessageBegin("CreateFollowupPlan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateFollowupPlan", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type followupAPIProcessorGetFollowupPlan struct {
	handler FollowupAPI
}

func (p *followupAPIProcessorGetFollowupPlan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FollowupAPIGetFollowupPlanArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetFollowupPlan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FollowupAPIGetFollowupPlanResult{}
	var retval *followup.GetFollowupPlanResponse
	if retval, err2 = p.handler.GetFollowupPlan(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFollowupPlan: "+err2.Error())
		oprot.WriteMessageBegin("GetFollowupPlan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetFollowupPlan", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type followupAPIProcessorGetFollowupPlans struct {
	handler FollowupAPI
}

func (p *followupAPIProcessorGetFollowupPlans) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FollowupAPIGetFollowupPlansArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetFollowupPlans", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FollowupAPIGetFollowupPlansResult{}
	var retval *followup.GetFollowupPlansResponse
	if retval, err2 = p.handler.GetFollowupPlans(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFollowupPlans: "+err2.Error())
		oprot.WriteMessageBegin("GetFollowupPlans", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetFollowupPlans", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type followupAPIProcessorGetPatientFollowupPlans struct {
	handler FollowupAPI
}

func (p *followupAPIProcessorGetPatientFollowupPlans) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FollowupAPIGetPatientFollowupPlansArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPatientFollowupPlans", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FollowupAPIGetPatientFollowupPlansResult{}
	var retval *followup.GetPatientFollowupPlansResponse
	if retval, err2 = p.handler.GetPatientFollowupPlans(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPatientFollowupPlans: "+err2.Error())
		oprot.WriteMessageBegin("GetPatientFollowupPlans", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPatientFollowupPlans", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type followupAPIProcessorCreateFollowupRecord struct {
	handler FollowupAPI
}

func (p *followupAPIProcessorCreateFollowupRecord) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FollowupAPICreateFollowupRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateFollowupRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FollowupAPICreateFollowupRecordResult{}
	var retval *followup.CreateFollowupRecordResponse
	if retval, err2 = p.handler.CreateFollowupRecord(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateFollowupRecord: "+err2.Error())
		oprot.WriteMessageBegin("CreateFollowupRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateFollowupRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type followupAPIProcessorGetFollowupRecord struct {
	handler FollowupAPI
}

func (p *followupAPIProcessorGetFollowupRecord) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FollowupAPIGetFollowupRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetFollowupRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FollowupAPIGetFollowupRecordResult{}
	var retval *followup.GetFollowupRecordResponse
	if retval, err2 = p.handler.GetFollowupRecord(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFollowupRecord: "+err2.Error())
		oprot.WriteMessageBegin("GetFollowupRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetFollowupRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type followupAPIProcessorGetPlanFollowupRecords struct {
	handler FollowupAPI
}

func (p *followupAPIProcessorGetPlanFollowupRecords) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FollowupAPIGetPlanFollowupRecordsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPlanFollowupRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FollowupAPIGetPlanFollowupRecordsResult{}
	var retval *followup.GetPlanFollowupRecordsResponse
	if retval, err2 = p.handler.GetPlanFollowupRecords(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPlanFollowupRecords: "+err2.Error())
		oprot.WriteMessageBegin("GetPlanFollowupRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPlanFollowupRecords", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type followupAPIProcessorAddMedicationMonitor struct {
	handler FollowupAPI
}

func (p *followupAPIProcessorAddMedicationMonitor) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FollowupAPIAddMedicationMonitorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddMedicationMonitor", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FollowupAPIAddMedicationMonitorResult{}
	var retval *followup.AddMedicationMonitorResponse
	if retval, err2 = p.handler.AddMedicationMonitor(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddMedicationMonitor: "+err2.Error())
		oprot.WriteMessageBegin("AddMedicationMonitor", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddMedicationMonitor", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type followupAPIProcessorGetFollowupMedications struct {
	handler FollowupAPI
}

func (p *followupAPIProcessorGetFollowupMedications) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FollowupAPIGetFollowupMedicationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetFollowupMedications", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FollowupAPIGetFollowupMedicationsResult{}
	var retval *followup.GetFollowupMedicationsResponse
	if retval, err2 = p.handler.GetFollowupMedications(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFollowupMedications: "+err2.Error())
		oprot.WriteMessageBegin("GetFollowupMedications", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetFollowupMedications", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type FollowupAPICreateFollowupPlanArgs struct {
	Request *followup.CreateFollowupPlanRequest `thrift:"request,1"`
}

func NewFollowupAPICreateFollowupPlanArgs() *FollowupAPICreateFollowupPlanArgs {
	return &FollowupAPICreateFollowupPlanArgs{}
}

func (p *FollowupAPICreateFollowupPlanArgs) InitDefault() {
}

var FollowupAPICreateFollowupPlanArgs_Request_DEFAULT *followup.CreateFollowupPlanRequest

func (p *FollowupAPICreateFollowupPlanArgs) GetRequest() (v *followup.CreateFollowupPlanRequest) {
	if !p.IsSetRequest() {
		return FollowupAPICreateFollowupPlanArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_FollowupAPICreateFollowupPlanArgs = map[int16]string{
	1: "request",
}

func (p *FollowupAPICreateFollowupPlanArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FollowupAPICreateFollowupPlanArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPICreateFollowupPlanArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPICreateFollowupPlanArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := followup.NewCreateFollowupPlanRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FollowupAPICreateFollowupPlanArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateFollowupPlan_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPICreateFollowupPlanArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FollowupAPICreateFollowupPlanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPICreateFollowupPlanArgs(%+v)", *p)

}

type FollowupAPICreateFollowupPlanResult struct {
	Success *followup.CreateFollowupPlanResponse `thrift:"success,0,optional"`
}

func NewFollowupAPICreateFollowupPlanResult() *FollowupAPICreateFollowupPlanResult {
	return &FollowupAPICreateFollowupPlanResult{}
}

func (p *FollowupAPICreateFollowupPlanResult) InitDefault() {
}

var FollowupAPICreateFollowupPlanResult_Success_DEFAULT *followup.CreateFollowupPlanResponse

func (p *FollowupAPICreateFollowupPlanResult) GetSuccess() (v *followup.CreateFollowupPlanResponse) {
	if !p.IsSetSuccess() {
		return FollowupAPICreateFollowupPlanResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_FollowupAPICreateFollowupPlanResult = map[int16]string{
	0: "success",
}

func (p *FollowupAPICreateFollowupPlanResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupAPICreateFollowupPlanResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPICreateFollowupPlanResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPICreateFollowupPlanResult) ReadField0(iprot thrift.TProtocol) error {
	_field := followup.NewCreateFollowupPlanResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FollowupAPICreateFollowupPlanResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateFollowupPlan_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPICreateFollowupPlanResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FollowupAPICreateFollowupPlanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPICreateFollowupPlanResult(%+v)", *p)

}

type FollowupAPIGetFollowupPlanArgs struct {
	Request *followup.GetFollowupPlanRequest `thrift:"request,1"`
}

func NewFollowupAPIGetFollowupPlanArgs() *FollowupAPIGetFollowupPlanArgs {
	return &FollowupAPIGetFollowupPlanArgs{}
}

func (p *FollowupAPIGetFollowupPlanArgs) InitDefault() {
}

var FollowupAPIGetFollowupPlanArgs_Request_DEFAULT *followup.GetFollowupPlanRequest

func (p *FollowupAPIGetFollowupPlanArgs) GetRequest() (v *followup.GetFollowupPlanRequest) {
	if !p.IsSetRequest() {
		return FollowupAPIGetFollowupPlanArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_FollowupAPIGetFollowupPlanArgs = map[int16]string{
	1: "request",
}

func (p *FollowupAPIGetFollowupPlanArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FollowupAPIGetFollowupPlanArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPIGetFollowupPlanArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupPlanArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := followup.NewGetFollowupPlanRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FollowupAPIGetFollowupPlanArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFollowupPlan_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupPlanArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FollowupAPIGetFollowupPlanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPIGetFollowupPlanArgs(%+v)", *p)

}

type FollowupAPIGetFollowupPlanResult struct {
	Success *followup.GetFollowupPlanResponse `thrift:"success,0,optional"`
}

func NewFollowupAPIGetFollowupPlanResult() *FollowupAPIGetFollowupPlanResult {
	return &FollowupAPIGetFollowupPlanResult{}
}

func (p *FollowupAPIGetFollowupPlanResult) InitDefault() {
}

var FollowupAPIGetFollowupPlanResult_Success_DEFAULT *followup.GetFollowupPlanResponse

func (p *FollowupAPIGetFollowupPlanResult) GetSuccess() (v *followup.GetFollowupPlanResponse) {
	if !p.IsSetSuccess() {
		return FollowupAPIGetFollowupPlanResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_FollowupAPIGetFollowupPlanResult = map[int16]string{
	0: "success",
}

func (p *FollowupAPIGetFollowupPlanResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupAPIGetFollowupPlanResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPIGetFollowupPlanResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupPlanResult) ReadField0(iprot thrift.TProtocol) error {
	_field := followup.NewGetFollowupPlanResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FollowupAPIGetFollowupPlanResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFollowupPlan_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupPlanResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FollowupAPIGetFollowupPlanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPIGetFollowupPlanResult(%+v)", *p)

}

type FollowupAPIGetFollowupPlansArgs struct {
	Request *followup.GetFollowupPlansRequest `thrift:"request,1"`
}

func NewFollowupAPIGetFollowupPlansArgs() *FollowupAPIGetFollowupPlansArgs {
	return &FollowupAPIGetFollowupPlansArgs{}
}

func (p *FollowupAPIGetFollowupPlansArgs) InitDefault() {
}

var FollowupAPIGetFollowupPlansArgs_Request_DEFAULT *followup.GetFollowupPlansRequest

func (p *FollowupAPIGetFollowupPlansArgs) GetRequest() (v *followup.GetFollowupPlansRequest) {
	if !p.IsSetRequest() {
		return FollowupAPIGetFollowupPlansArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_FollowupAPIGetFollowupPlansArgs = map[int16]string{
	1: "request",
}

func (p *FollowupAPIGetFollowupPlansArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FollowupAPIGetFollowupPlansArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPIGetFollowupPlansArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupPlansArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := followup.NewGetFollowupPlansRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FollowupAPIGetFollowupPlansArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFollowupPlans_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupPlansArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FollowupAPIGetFollowupPlansArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPIGetFollowupPlansArgs(%+v)", *p)

}

type FollowupAPIGetFollowupPlansResult struct {
	Success *followup.GetFollowupPlansResponse `thrift:"success,0,optional"`
}

func NewFollowupAPIGetFollowupPlansResult() *FollowupAPIGetFollowupPlansResult {
	return &FollowupAPIGetFollowupPlansResult{}
}

func (p *FollowupAPIGetFollowupPlansResult) InitDefault() {
}

var FollowupAPIGetFollowupPlansResult_Success_DEFAULT *followup.GetFollowupPlansResponse

func (p *FollowupAPIGetFollowupPlansResult) GetSuccess() (v *followup.GetFollowupPlansResponse) {
	if !p.IsSetSuccess() {
		return FollowupAPIGetFollowupPlansResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_FollowupAPIGetFollowupPlansResult = map[int16]string{
	0: "success",
}

func (p *FollowupAPIGetFollowupPlansResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupAPIGetFollowupPlansResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPIGetFollowupPlansResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupPlansResult) ReadField0(iprot thrift.TProtocol) error {
	_field := followup.NewGetFollowupPlansResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FollowupAPIGetFollowupPlansResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFollowupPlans_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupPlansResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FollowupAPIGetFollowupPlansResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPIGetFollowupPlansResult(%+v)", *p)

}

type FollowupAPIGetPatientFollowupPlansArgs struct {
	Request *followup.GetPatientFollowupPlansRequest `thrift:"request,1"`
}

func NewFollowupAPIGetPatientFollowupPlansArgs() *FollowupAPIGetPatientFollowupPlansArgs {
	return &FollowupAPIGetPatientFollowupPlansArgs{}
}

func (p *FollowupAPIGetPatientFollowupPlansArgs) InitDefault() {
}

var FollowupAPIGetPatientFollowupPlansArgs_Request_DEFAULT *followup.GetPatientFollowupPlansRequest

func (p *FollowupAPIGetPatientFollowupPlansArgs) GetRequest() (v *followup.GetPatientFollowupPlansRequest) {
	if !p.IsSetRequest() {
		return FollowupAPIGetPatientFollowupPlansArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_FollowupAPIGetPatientFollowupPlansArgs = map[int16]string{
	1: "request",
}

func (p *FollowupAPIGetPatientFollowupPlansArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FollowupAPIGetPatientFollowupPlansArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPIGetPatientFollowupPlansArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPIGetPatientFollowupPlansArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := followup.NewGetPatientFollowupPlansRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FollowupAPIGetPatientFollowupPlansArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPatientFollowupPlans_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPIGetPatientFollowupPlansArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FollowupAPIGetPatientFollowupPlansArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPIGetPatientFollowupPlansArgs(%+v)", *p)

}

type FollowupAPIGetPatientFollowupPlansResult struct {
	Success *followup.GetPatientFollowupPlansResponse `thrift:"success,0,optional"`
}

func NewFollowupAPIGetPatientFollowupPlansResult() *FollowupAPIGetPatientFollowupPlansResult {
	return &FollowupAPIGetPatientFollowupPlansResult{}
}

func (p *FollowupAPIGetPatientFollowupPlansResult) InitDefault() {
}

var FollowupAPIGetPatientFollowupPlansResult_Success_DEFAULT *followup.GetPatientFollowupPlansResponse

func (p *FollowupAPIGetPatientFollowupPlansResult) GetSuccess() (v *followup.GetPatientFollowupPlansResponse) {
	if !p.IsSetSuccess() {
		return FollowupAPIGetPatientFollowupPlansResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_FollowupAPIGetPatientFollowupPlansResult = map[int16]string{
	0: "success",
}

func (p *FollowupAPIGetPatientFollowupPlansResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupAPIGetPatientFollowupPlansResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPIGetPatientFollowupPlansResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPIGetPatientFollowupPlansResult) ReadField0(iprot thrift.TProtocol) error {
	_field := followup.NewGetPatientFollowupPlansResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FollowupAPIGetPatientFollowupPlansResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPatientFollowupPlans_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPIGetPatientFollowupPlansResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FollowupAPIGetPatientFollowupPlansResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPIGetPatientFollowupPlansResult(%+v)", *p)

}

type FollowupAPICreateFollowupRecordArgs struct {
	Request *followup.CreateFollowupRecordRequest `thrift:"request,1"`
}

func NewFollowupAPICreateFollowupRecordArgs() *FollowupAPICreateFollowupRecordArgs {
	return &FollowupAPICreateFollowupRecordArgs{}
}

func (p *FollowupAPICreateFollowupRecordArgs) InitDefault() {
}

var FollowupAPICreateFollowupRecordArgs_Request_DEFAULT *followup.CreateFollowupRecordRequest

func (p *FollowupAPICreateFollowupRecordArgs) GetRequest() (v *followup.CreateFollowupRecordRequest) {
	if !p.IsSetRequest() {
		return FollowupAPICreateFollowupRecordArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_FollowupAPICreateFollowupRecordArgs = map[int16]string{
	1: "request",
}

func (p *FollowupAPICreateFollowupRecordArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FollowupAPICreateFollowupRecordArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPICreateFollowupRecordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPICreateFollowupRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := followup.NewCreateFollowupRecordRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FollowupAPICreateFollowupRecordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateFollowupRecord_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPICreateFollowupRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FollowupAPICreateFollowupRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPICreateFollowupRecordArgs(%+v)", *p)

}

type FollowupAPICreateFollowupRecordResult struct {
	Success *followup.CreateFollowupRecordResponse `thrift:"success,0,optional"`
}

func NewFollowupAPICreateFollowupRecordResult() *FollowupAPICreateFollowupRecordResult {
	return &FollowupAPICreateFollowupRecordResult{}
}

func (p *FollowupAPICreateFollowupRecordResult) InitDefault() {
}

var FollowupAPICreateFollowupRecordResult_Success_DEFAULT *followup.CreateFollowupRecordResponse

func (p *FollowupAPICreateFollowupRecordResult) GetSuccess() (v *followup.CreateFollowupRecordResponse) {
	if !p.IsSetSuccess() {
		return FollowupAPICreateFollowupRecordResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_FollowupAPICreateFollowupRecordResult = map[int16]string{
	0: "success",
}

func (p *FollowupAPICreateFollowupRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupAPICreateFollowupRecordResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPICreateFollowupRecordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPICreateFollowupRecordResult) ReadField0(iprot thrift.TProtocol) error {
	_field := followup.NewCreateFollowupRecordResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FollowupAPICreateFollowupRecordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateFollowupRecord_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPICreateFollowupRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FollowupAPICreateFollowupRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPICreateFollowupRecordResult(%+v)", *p)

}

type FollowupAPIGetFollowupRecordArgs struct {
	Request *followup.GetFollowupRecordRequest `thrift:"request,1"`
}

func NewFollowupAPIGetFollowupRecordArgs() *FollowupAPIGetFollowupRecordArgs {
	return &FollowupAPIGetFollowupRecordArgs{}
}

func (p *FollowupAPIGetFollowupRecordArgs) InitDefault() {
}

var FollowupAPIGetFollowupRecordArgs_Request_DEFAULT *followup.GetFollowupRecordRequest

func (p *FollowupAPIGetFollowupRecordArgs) GetRequest() (v *followup.GetFollowupRecordRequest) {
	if !p.IsSetRequest() {
		return FollowupAPIGetFollowupRecordArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_FollowupAPIGetFollowupRecordArgs = map[int16]string{
	1: "request",
}

func (p *FollowupAPIGetFollowupRecordArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FollowupAPIGetFollowupRecordArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPIGetFollowupRecordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := followup.NewGetFollowupRecordRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FollowupAPIGetFollowupRecordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFollowupRecord_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FollowupAPIGetFollowupRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPIGetFollowupRecordArgs(%+v)", *p)

}

type FollowupAPIGetFollowupRecordResult struct {
	Success *followup.GetFollowupRecordResponse `thrift:"success,0,optional"`
}

func NewFollowupAPIGetFollowupRecordResult() *FollowupAPIGetFollowupRecordResult {
	return &FollowupAPIGetFollowupRecordResult{}
}

func (p *FollowupAPIGetFollowupRecordResult) InitDefault() {
}

var FollowupAPIGetFollowupRecordResult_Success_DEFAULT *followup.GetFollowupRecordResponse

func (p *FollowupAPIGetFollowupRecordResult) GetSuccess() (v *followup.GetFollowupRecordResponse) {
	if !p.IsSetSuccess() {
		return FollowupAPIGetFollowupRecordResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_FollowupAPIGetFollowupRecordResult = map[int16]string{
	0: "success",
}

func (p *FollowupAPIGetFollowupRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupAPIGetFollowupRecordResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPIGetFollowupRecordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupRecordResult) ReadField0(iprot thrift.TProtocol) error {
	_field := followup.NewGetFollowupRecordResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FollowupAPIGetFollowupRecordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFollowupRecord_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FollowupAPIGetFollowupRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPIGetFollowupRecordResult(%+v)", *p)

}

type FollowupAPIGetPlanFollowupRecordsArgs struct {
	Request *followup.GetPlanFollowupRecordsRequest `thrift:"request,1"`
}

func NewFollowupAPIGetPlanFollowupRecordsArgs() *FollowupAPIGetPlanFollowupRecordsArgs {
	return &FollowupAPIGetPlanFollowupRecordsArgs{}
}

func (p *FollowupAPIGetPlanFollowupRecordsArgs) InitDefault() {
}

var FollowupAPIGetPlanFollowupRecordsArgs_Request_DEFAULT *followup.GetPlanFollowupRecordsRequest

func (p *FollowupAPIGetPlanFollowupRecordsArgs) GetRequest() (v *followup.GetPlanFollowupRecordsRequest) {
	if !p.IsSetRequest() {
		return FollowupAPIGetPlanFollowupRecordsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_FollowupAPIGetPlanFollowupRecordsArgs = map[int16]string{
	1: "request",
}

func (p *FollowupAPIGetPlanFollowupRecordsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FollowupAPIGetPlanFollowupRecordsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPIGetPlanFollowupRecordsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPIGetPlanFollowupRecordsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := followup.NewGetPlanFollowupRecordsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FollowupAPIGetPlanFollowupRecordsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPlanFollowupRecords_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPIGetPlanFollowupRecordsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FollowupAPIGetPlanFollowupRecordsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPIGetPlanFollowupRecordsArgs(%+v)", *p)

}

type FollowupAPIGetPlanFollowupRecordsResult struct {
	Success *followup.GetPlanFollowupRecordsResponse `thrift:"success,0,optional"`
}

func NewFollowupAPIGetPlanFollowupRecordsResult() *FollowupAPIGetPlanFollowupRecordsResult {
	return &FollowupAPIGetPlanFollowupRecordsResult{}
}

func (p *FollowupAPIGetPlanFollowupRecordsResult) InitDefault() {
}

var FollowupAPIGetPlanFollowupRecordsResult_Success_DEFAULT *followup.GetPlanFollowupRecordsResponse

func (p *FollowupAPIGetPlanFollowupRecordsResult) GetSuccess() (v *followup.GetPlanFollowupRecordsResponse) {
	if !p.IsSetSuccess() {
		return FollowupAPIGetPlanFollowupRecordsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_FollowupAPIGetPlanFollowupRecordsResult = map[int16]string{
	0: "success",
}

func (p *FollowupAPIGetPlanFollowupRecordsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupAPIGetPlanFollowupRecordsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPIGetPlanFollowupRecordsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPIGetPlanFollowupRecordsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := followup.NewGetPlanFollowupRecordsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FollowupAPIGetPlanFollowupRecordsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPlanFollowupRecords_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPIGetPlanFollowupRecordsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FollowupAPIGetPlanFollowupRecordsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPIGetPlanFollowupRecordsResult(%+v)", *p)

}

type FollowupAPIAddMedicationMonitorArgs struct {
	Request *followup.AddMedicationMonitorRequest `thrift:"request,1"`
}

func NewFollowupAPIAddMedicationMonitorArgs() *FollowupAPIAddMedicationMonitorArgs {
	return &FollowupAPIAddMedicationMonitorArgs{}
}

func (p *FollowupAPIAddMedicationMonitorArgs) InitDefault() {
}

var FollowupAPIAddMedicationMonitorArgs_Request_DEFAULT *followup.AddMedicationMonitorRequest

func (p *FollowupAPIAddMedicationMonitorArgs) GetRequest() (v *followup.AddMedicationMonitorRequest) {
	if !p.IsSetRequest() {
		return FollowupAPIAddMedicationMonitorArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_FollowupAPIAddMedicationMonitorArgs = map[int16]string{
	1: "request",
}

func (p *FollowupAPIAddMedicationMonitorArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FollowupAPIAddMedicationMonitorArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPIAddMedicationMonitorArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPIAddMedicationMonitorArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := followup.NewAddMedicationMonitorRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FollowupAPIAddMedicationMonitorArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddMedicationMonitor_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPIAddMedicationMonitorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FollowupAPIAddMedicationMonitorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPIAddMedicationMonitorArgs(%+v)", *p)

}

type FollowupAPIAddMedicationMonitorResult struct {
	Success *followup.AddMedicationMonitorResponse `thrift:"success,0,optional"`
}

func NewFollowupAPIAddMedicationMonitorResult() *FollowupAPIAddMedicationMonitorResult {
	return &FollowupAPIAddMedicationMonitorResult{}
}

func (p *FollowupAPIAddMedicationMonitorResult) InitDefault() {
}

var FollowupAPIAddMedicationMonitorResult_Success_DEFAULT *followup.AddMedicationMonitorResponse

func (p *FollowupAPIAddMedicationMonitorResult) GetSuccess() (v *followup.AddMedicationMonitorResponse) {
	if !p.IsSetSuccess() {
		return FollowupAPIAddMedicationMonitorResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_FollowupAPIAddMedicationMonitorResult = map[int16]string{
	0: "success",
}

func (p *FollowupAPIAddMedicationMonitorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupAPIAddMedicationMonitorResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPIAddMedicationMonitorResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPIAddMedicationMonitorResult) ReadField0(iprot thrift.TProtocol) error {
	_field := followup.NewAddMedicationMonitorResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FollowupAPIAddMedicationMonitorResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddMedicationMonitor_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPIAddMedicationMonitorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FollowupAPIAddMedicationMonitorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPIAddMedicationMonitorResult(%+v)", *p)

}

type FollowupAPIGetFollowupMedicationsArgs struct {
	Request *followup.GetFollowupMedicationsRequest `thrift:"request,1"`
}

func NewFollowupAPIGetFollowupMedicationsArgs() *FollowupAPIGetFollowupMedicationsArgs {
	return &FollowupAPIGetFollowupMedicationsArgs{}
}

func (p *FollowupAPIGetFollowupMedicationsArgs) InitDefault() {
}

var FollowupAPIGetFollowupMedicationsArgs_Request_DEFAULT *followup.GetFollowupMedicationsRequest

func (p *FollowupAPIGetFollowupMedicationsArgs) GetRequest() (v *followup.GetFollowupMedicationsRequest) {
	if !p.IsSetRequest() {
		return FollowupAPIGetFollowupMedicationsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_FollowupAPIGetFollowupMedicationsArgs = map[int16]string{
	1: "request",
}

func (p *FollowupAPIGetFollowupMedicationsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FollowupAPIGetFollowupMedicationsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPIGetFollowupMedicationsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupMedicationsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := followup.NewGetFollowupMedicationsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FollowupAPIGetFollowupMedicationsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFollowupMedications_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupMedicationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FollowupAPIGetFollowupMedicationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPIGetFollowupMedicationsArgs(%+v)", *p)

}

type FollowupAPIGetFollowupMedicationsResult struct {
	Success *followup.GetFollowupMedicationsResponse `thrift:"success,0,optional"`
}

func NewFollowupAPIGetFollowupMedicationsResult() *FollowupAPIGetFollowupMedicationsResult {
	return &FollowupAPIGetFollowupMedicationsResult{}
}

func (p *FollowupAPIGetFollowupMedicationsResult) InitDefault() {
}

var FollowupAPIGetFollowupMedicationsResult_Success_DEFAULT *followup.GetFollowupMedicationsResponse

func (p *FollowupAPIGetFollowupMedicationsResult) GetSuccess() (v *followup.GetFollowupMedicationsResponse) {
	if !p.IsSetSuccess() {
		return FollowupAPIGetFollowupMedicationsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_FollowupAPIGetFollowupMedicationsResult = map[int16]string{
	0: "success",
}

func (p *FollowupAPIGetFollowupMedicationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupAPIGetFollowupMedicationsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowupAPIGetFollowupMedicationsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupMedicationsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := followup.NewGetFollowupMedicationsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FollowupAPIGetFollowupMedicationsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFollowupMedications_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowupAPIGetFollowupMedicationsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FollowupAPIGetFollowupMedicationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupAPIGetFollowupMedicationsResult(%+v)", *p)

}
