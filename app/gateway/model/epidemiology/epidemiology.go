// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package epidemiology

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/yxrxy/AllergyBase/app/gateway/model/model"
)

// 创建环境暴露记录请求
type CreateEnvironmentExposureRequest struct {
	Exposure *model.EnvironmentExposure `thrift:"exposure,1,required" form:"exposure,required" json:"exposure,required" query:"exposure,required"`
}

func NewCreateEnvironmentExposureRequest() *CreateEnvironmentExposureRequest {
	return &CreateEnvironmentExposureRequest{}
}

func (p *CreateEnvironmentExposureRequest) InitDefault() {
}

var CreateEnvironmentExposureRequest_Exposure_DEFAULT *model.EnvironmentExposure

func (p *CreateEnvironmentExposureRequest) GetExposure() (v *model.EnvironmentExposure) {
	if !p.IsSetExposure() {
		return CreateEnvironmentExposureRequest_Exposure_DEFAULT
	}
	return p.Exposure
}

var fieldIDToName_CreateEnvironmentExposureRequest = map[int16]string{
	1: "exposure",
}

func (p *CreateEnvironmentExposureRequest) IsSetExposure() bool {
	return p.Exposure != nil
}

func (p *CreateEnvironmentExposureRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetExposure bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetExposure = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetExposure {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEnvironmentExposureRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEnvironmentExposureRequest[fieldId]))
}

func (p *CreateEnvironmentExposureRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewEnvironmentExposure()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Exposure = _field
	return nil
}

func (p *CreateEnvironmentExposureRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEnvironmentExposureRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEnvironmentExposureRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("exposure", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Exposure.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEnvironmentExposureRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEnvironmentExposureRequest(%+v)", *p)

}

// 创建环境暴露记录响应
type CreateEnvironmentExposureResponse struct {
	Base       *model.BaseResp `thrift:"Base,1,required" form:"Base,required" json:"Base,required" query:"Base,required"`
	ExposureId int64           `thrift:"exposureId,2,required" form:"exposureId,required" json:"exposureId,required" query:"exposureId,required"`
}

func NewCreateEnvironmentExposureResponse() *CreateEnvironmentExposureResponse {
	return &CreateEnvironmentExposureResponse{}
}

func (p *CreateEnvironmentExposureResponse) InitDefault() {
}

var CreateEnvironmentExposureResponse_Base_DEFAULT *model.BaseResp

func (p *CreateEnvironmentExposureResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateEnvironmentExposureResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *CreateEnvironmentExposureResponse) GetExposureId() (v int64) {
	return p.ExposureId
}

var fieldIDToName_CreateEnvironmentExposureResponse = map[int16]string{
	1: "Base",
	2: "exposureId",
}

func (p *CreateEnvironmentExposureResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEnvironmentExposureResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false
	var issetExposureId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetExposureId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetExposureId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEnvironmentExposureResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEnvironmentExposureResponse[fieldId]))
}

func (p *CreateEnvironmentExposureResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *CreateEnvironmentExposureResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExposureId = _field
	return nil
}

func (p *CreateEnvironmentExposureResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEnvironmentExposureResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEnvironmentExposureResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEnvironmentExposureResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("exposureId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ExposureId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateEnvironmentExposureResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEnvironmentExposureResponse(%+v)", *p)

}

// 获取环境暴露记录请求
type GetEnvironmentExposureRequest struct {
	PatientId int64 `thrift:"patientId,1,required" form:"patientId,required" json:"patientId,required" query:"patientId,required"`
}

func NewGetEnvironmentExposureRequest() *GetEnvironmentExposureRequest {
	return &GetEnvironmentExposureRequest{}
}

func (p *GetEnvironmentExposureRequest) InitDefault() {
}

func (p *GetEnvironmentExposureRequest) GetPatientId() (v int64) {
	return p.PatientId
}

var fieldIDToName_GetEnvironmentExposureRequest = map[int16]string{
	1: "patientId",
}

func (p *GetEnvironmentExposureRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPatientId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPatientId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPatientId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEnvironmentExposureRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEnvironmentExposureRequest[fieldId]))
}

func (p *GetEnvironmentExposureRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PatientId = _field
	return nil
}

func (p *GetEnvironmentExposureRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEnvironmentExposureRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEnvironmentExposureRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("patientId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PatientId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetEnvironmentExposureRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEnvironmentExposureRequest(%+v)", *p)

}

// 获取环境暴露记录响应
type GetEnvironmentExposureResponse struct {
	Base     *model.BaseResp            `thrift:"Base,1,required" form:"Base,required" json:"Base,required" query:"Base,required"`
	Exposure *model.EnvironmentExposure `thrift:"exposure,2,required" form:"exposure,required" json:"exposure,required" query:"exposure,required"`
}

func NewGetEnvironmentExposureResponse() *GetEnvironmentExposureResponse {
	return &GetEnvironmentExposureResponse{}
}

func (p *GetEnvironmentExposureResponse) InitDefault() {
}

var GetEnvironmentExposureResponse_Base_DEFAULT *model.BaseResp

func (p *GetEnvironmentExposureResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetEnvironmentExposureResponse_Base_DEFAULT
	}
	return p.Base
}

var GetEnvironmentExposureResponse_Exposure_DEFAULT *model.EnvironmentExposure

func (p *GetEnvironmentExposureResponse) GetExposure() (v *model.EnvironmentExposure) {
	if !p.IsSetExposure() {
		return GetEnvironmentExposureResponse_Exposure_DEFAULT
	}
	return p.Exposure
}

var fieldIDToName_GetEnvironmentExposureResponse = map[int16]string{
	1: "Base",
	2: "exposure",
}

func (p *GetEnvironmentExposureResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEnvironmentExposureResponse) IsSetExposure() bool {
	return p.Exposure != nil
}

func (p *GetEnvironmentExposureResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false
	var issetExposure bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetExposure = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetExposure {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEnvironmentExposureResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEnvironmentExposureResponse[fieldId]))
}

func (p *GetEnvironmentExposureResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *GetEnvironmentExposureResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := model.NewEnvironmentExposure()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Exposure = _field
	return nil
}

func (p *GetEnvironmentExposureResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEnvironmentExposureResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEnvironmentExposureResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEnvironmentExposureResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("exposure", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Exposure.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetEnvironmentExposureResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEnvironmentExposureResponse(%+v)", *p)

}

// 获取患者环境暴露记录列表请求
type GetPatientEnvironmentExposuresRequest struct {
	PatientId int64 `thrift:"patientId,1,required" form:"patientId,required" json:"patientId,required" query:"patientId,required"`
	Offset    int32 `thrift:"offset,2,required" form:"offset,required" json:"offset,required" query:"offset,required"`
	Limit     int32 `thrift:"limit,3,required" form:"limit,required" json:"limit,required" query:"limit,required"`
}

func NewGetPatientEnvironmentExposuresRequest() *GetPatientEnvironmentExposuresRequest {
	return &GetPatientEnvironmentExposuresRequest{}
}

func (p *GetPatientEnvironmentExposuresRequest) InitDefault() {
}

func (p *GetPatientEnvironmentExposuresRequest) GetPatientId() (v int64) {
	return p.PatientId
}

func (p *GetPatientEnvironmentExposuresRequest) GetOffset() (v int32) {
	return p.Offset
}

func (p *GetPatientEnvironmentExposuresRequest) GetLimit() (v int32) {
	return p.Limit
}

var fieldIDToName_GetPatientEnvironmentExposuresRequest = map[int16]string{
	1: "patientId",
	2: "offset",
	3: "limit",
}

func (p *GetPatientEnvironmentExposuresRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPatientId bool = false
	var issetOffset bool = false
	var issetLimit bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPatientId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOffset = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetLimit = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPatientId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOffset {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetLimit {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPatientEnvironmentExposuresRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetPatientEnvironmentExposuresRequest[fieldId]))
}

func (p *GetPatientEnvironmentExposuresRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PatientId = _field
	return nil
}
func (p *GetPatientEnvironmentExposuresRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Offset = _field
	return nil
}
func (p *GetPatientEnvironmentExposuresRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Limit = _field
	return nil
}

func (p *GetPatientEnvironmentExposuresRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPatientEnvironmentExposuresRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPatientEnvironmentExposuresRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("patientId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PatientId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetPatientEnvironmentExposuresRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("offset", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Offset); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetPatientEnvironmentExposuresRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("limit", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetPatientEnvironmentExposuresRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPatientEnvironmentExposuresRequest(%+v)", *p)

}

// 获取患者环境暴露记录列表响应
type GetPatientEnvironmentExposuresResponse struct {
	Base      *model.BaseResp              `thrift:"Base,1,required" form:"Base,required" json:"Base,required" query:"Base,required"`
	Exposures []*model.EnvironmentExposure `thrift:"exposures,2,required" form:"exposures,required" json:"exposures,required" query:"exposures,required"`
	Total     int32                        `thrift:"total,3,required" form:"total,required" json:"total,required" query:"total,required"`
}

func NewGetPatientEnvironmentExposuresResponse() *GetPatientEnvironmentExposuresResponse {
	return &GetPatientEnvironmentExposuresResponse{}
}

func (p *GetPatientEnvironmentExposuresResponse) InitDefault() {
}

var GetPatientEnvironmentExposuresResponse_Base_DEFAULT *model.BaseResp

func (p *GetPatientEnvironmentExposuresResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetPatientEnvironmentExposuresResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetPatientEnvironmentExposuresResponse) GetExposures() (v []*model.EnvironmentExposure) {
	return p.Exposures
}

func (p *GetPatientEnvironmentExposuresResponse) GetTotal() (v int32) {
	return p.Total
}

var fieldIDToName_GetPatientEnvironmentExposuresResponse = map[int16]string{
	1: "Base",
	2: "exposures",
	3: "total",
}

func (p *GetPatientEnvironmentExposuresResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetPatientEnvironmentExposuresResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false
	var issetExposures bool = false
	var issetTotal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetExposures = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetExposures {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPatientEnvironmentExposuresResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetPatientEnvironmentExposuresResponse[fieldId]))
}

func (p *GetPatientEnvironmentExposuresResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *GetPatientEnvironmentExposuresResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*model.EnvironmentExposure, 0, size)
	values := make([]model.EnvironmentExposure, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Exposures = _field
	return nil
}
func (p *GetPatientEnvironmentExposuresResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Total = _field
	return nil
}

func (p *GetPatientEnvironmentExposuresResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPatientEnvironmentExposuresResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPatientEnvironmentExposuresResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetPatientEnvironmentExposuresResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("exposures", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Exposures)); err != nil {
		return err
	}
	for _, v := range p.Exposures {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetPatientEnvironmentExposuresResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetPatientEnvironmentExposuresResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPatientEnvironmentExposuresResponse(%+v)", *p)

}

// 添加环境监测数据请求
type AddEnvironmentMonitorRequest struct {
	Monitor *model.EnvironmentMonitor `thrift:"monitor,1,required" form:"monitor,required" json:"monitor,required" query:"monitor,required"`
}

func NewAddEnvironmentMonitorRequest() *AddEnvironmentMonitorRequest {
	return &AddEnvironmentMonitorRequest{}
}

func (p *AddEnvironmentMonitorRequest) InitDefault() {
}

var AddEnvironmentMonitorRequest_Monitor_DEFAULT *model.EnvironmentMonitor

func (p *AddEnvironmentMonitorRequest) GetMonitor() (v *model.EnvironmentMonitor) {
	if !p.IsSetMonitor() {
		return AddEnvironmentMonitorRequest_Monitor_DEFAULT
	}
	return p.Monitor
}

var fieldIDToName_AddEnvironmentMonitorRequest = map[int16]string{
	1: "monitor",
}

func (p *AddEnvironmentMonitorRequest) IsSetMonitor() bool {
	return p.Monitor != nil
}

func (p *AddEnvironmentMonitorRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMonitor bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetMonitor = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetMonitor {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddEnvironmentMonitorRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AddEnvironmentMonitorRequest[fieldId]))
}

func (p *AddEnvironmentMonitorRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewEnvironmentMonitor()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Monitor = _field
	return nil
}

func (p *AddEnvironmentMonitorRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddEnvironmentMonitorRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddEnvironmentMonitorRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("monitor", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Monitor.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddEnvironmentMonitorRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddEnvironmentMonitorRequest(%+v)", *p)

}

// 添加环境监测数据响应
type AddEnvironmentMonitorResponse struct {
	Base      *model.BaseResp `thrift:"Base,1,required" form:"Base,required" json:"Base,required" query:"Base,required"`
	MonitorId int64           `thrift:"monitorId,2,required" form:"monitorId,required" json:"monitorId,required" query:"monitorId,required"`
}

func NewAddEnvironmentMonitorResponse() *AddEnvironmentMonitorResponse {
	return &AddEnvironmentMonitorResponse{}
}

func (p *AddEnvironmentMonitorResponse) InitDefault() {
}

var AddEnvironmentMonitorResponse_Base_DEFAULT *model.BaseResp

func (p *AddEnvironmentMonitorResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AddEnvironmentMonitorResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *AddEnvironmentMonitorResponse) GetMonitorId() (v int64) {
	return p.MonitorId
}

var fieldIDToName_AddEnvironmentMonitorResponse = map[int16]string{
	1: "Base",
	2: "monitorId",
}

func (p *AddEnvironmentMonitorResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddEnvironmentMonitorResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false
	var issetMonitorId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMonitorId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMonitorId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddEnvironmentMonitorResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AddEnvironmentMonitorResponse[fieldId]))
}

func (p *AddEnvironmentMonitorResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *AddEnvironmentMonitorResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MonitorId = _field
	return nil
}

func (p *AddEnvironmentMonitorResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddEnvironmentMonitorResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddEnvironmentMonitorResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AddEnvironmentMonitorResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("monitorId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MonitorId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AddEnvironmentMonitorResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddEnvironmentMonitorResponse(%+v)", *p)

}

// 获取环境监测数据请求
type GetEnvironmentMonitorsRequest struct {
	LocationCode string `thrift:"locationCode,1,required" form:"locationCode,required" json:"locationCode,required" query:"locationCode,required"`
	StartTime    string `thrift:"startTime,2,required" form:"startTime,required" json:"startTime,required" query:"startTime,required"`
	EndTime      string `thrift:"endTime,3,required" form:"endTime,required" json:"endTime,required" query:"endTime,required"`
}

func NewGetEnvironmentMonitorsRequest() *GetEnvironmentMonitorsRequest {
	return &GetEnvironmentMonitorsRequest{}
}

func (p *GetEnvironmentMonitorsRequest) InitDefault() {
}

func (p *GetEnvironmentMonitorsRequest) GetLocationCode() (v string) {
	return p.LocationCode
}

func (p *GetEnvironmentMonitorsRequest) GetStartTime() (v string) {
	return p.StartTime
}

func (p *GetEnvironmentMonitorsRequest) GetEndTime() (v string) {
	return p.EndTime
}

var fieldIDToName_GetEnvironmentMonitorsRequest = map[int16]string{
	1: "locationCode",
	2: "startTime",
	3: "endTime",
}

func (p *GetEnvironmentMonitorsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetLocationCode bool = false
	var issetStartTime bool = false
	var issetEndTime bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetLocationCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEndTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetLocationCode {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEndTime {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEnvironmentMonitorsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEnvironmentMonitorsRequest[fieldId]))
}

func (p *GetEnvironmentMonitorsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LocationCode = _field
	return nil
}
func (p *GetEnvironmentMonitorsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartTime = _field
	return nil
}
func (p *GetEnvironmentMonitorsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndTime = _field
	return nil
}

func (p *GetEnvironmentMonitorsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEnvironmentMonitorsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEnvironmentMonitorsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("locationCode", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LocationCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEnvironmentMonitorsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("startTime", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEnvironmentMonitorsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("endTime", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetEnvironmentMonitorsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEnvironmentMonitorsRequest(%+v)", *p)

}

// 获取环境监测数据响应
type GetEnvironmentMonitorsResponse struct {
	Base     *model.BaseResp             `thrift:"Base,1,required" form:"Base,required" json:"Base,required" query:"Base,required"`
	Monitors []*model.EnvironmentMonitor `thrift:"monitors,2,required" form:"monitors,required" json:"monitors,required" query:"monitors,required"`
}

func NewGetEnvironmentMonitorsResponse() *GetEnvironmentMonitorsResponse {
	return &GetEnvironmentMonitorsResponse{}
}

func (p *GetEnvironmentMonitorsResponse) InitDefault() {
}

var GetEnvironmentMonitorsResponse_Base_DEFAULT *model.BaseResp

func (p *GetEnvironmentMonitorsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetEnvironmentMonitorsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetEnvironmentMonitorsResponse) GetMonitors() (v []*model.EnvironmentMonitor) {
	return p.Monitors
}

var fieldIDToName_GetEnvironmentMonitorsResponse = map[int16]string{
	1: "Base",
	2: "monitors",
}

func (p *GetEnvironmentMonitorsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEnvironmentMonitorsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false
	var issetMonitors bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMonitors = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMonitors {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEnvironmentMonitorsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEnvironmentMonitorsResponse[fieldId]))
}

func (p *GetEnvironmentMonitorsResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *GetEnvironmentMonitorsResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*model.EnvironmentMonitor, 0, size)
	values := make([]model.EnvironmentMonitor, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Monitors = _field
	return nil
}

func (p *GetEnvironmentMonitorsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEnvironmentMonitorsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEnvironmentMonitorsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEnvironmentMonitorsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("monitors", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Monitors)); err != nil {
		return err
	}
	for _, v := range p.Monitors {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetEnvironmentMonitorsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEnvironmentMonitorsResponse(%+v)", *p)

}

// 创建生活方式调查请求
type CreateLifestyleSurveyRequest struct {
	Survey *model.LifestyleSurvey `thrift:"survey,1,required" form:"survey,required" json:"survey,required" query:"survey,required"`
}

func NewCreateLifestyleSurveyRequest() *CreateLifestyleSurveyRequest {
	return &CreateLifestyleSurveyRequest{}
}

func (p *CreateLifestyleSurveyRequest) InitDefault() {
}

var CreateLifestyleSurveyRequest_Survey_DEFAULT *model.LifestyleSurvey

func (p *CreateLifestyleSurveyRequest) GetSurvey() (v *model.LifestyleSurvey) {
	if !p.IsSetSurvey() {
		return CreateLifestyleSurveyRequest_Survey_DEFAULT
	}
	return p.Survey
}

var fieldIDToName_CreateLifestyleSurveyRequest = map[int16]string{
	1: "survey",
}

func (p *CreateLifestyleSurveyRequest) IsSetSurvey() bool {
	return p.Survey != nil
}

func (p *CreateLifestyleSurveyRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSurvey bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSurvey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSurvey {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateLifestyleSurveyRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateLifestyleSurveyRequest[fieldId]))
}

func (p *CreateLifestyleSurveyRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewLifestyleSurvey()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Survey = _field
	return nil
}

func (p *CreateLifestyleSurveyRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateLifestyleSurveyRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateLifestyleSurveyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("survey", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Survey.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateLifestyleSurveyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateLifestyleSurveyRequest(%+v)", *p)

}

// 创建生活方式调查响应
type CreateLifestyleSurveyResponse struct {
	Base     *model.BaseResp `thrift:"Base,1,required" form:"Base,required" json:"Base,required" query:"Base,required"`
	SurveyId int64           `thrift:"surveyId,2,required" form:"surveyId,required" json:"surveyId,required" query:"surveyId,required"`
}

func NewCreateLifestyleSurveyResponse() *CreateLifestyleSurveyResponse {
	return &CreateLifestyleSurveyResponse{}
}

func (p *CreateLifestyleSurveyResponse) InitDefault() {
}

var CreateLifestyleSurveyResponse_Base_DEFAULT *model.BaseResp

func (p *CreateLifestyleSurveyResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateLifestyleSurveyResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *CreateLifestyleSurveyResponse) GetSurveyId() (v int64) {
	return p.SurveyId
}

var fieldIDToName_CreateLifestyleSurveyResponse = map[int16]string{
	1: "Base",
	2: "surveyId",
}

func (p *CreateLifestyleSurveyResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateLifestyleSurveyResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false
	var issetSurveyId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSurveyId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSurveyId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateLifestyleSurveyResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateLifestyleSurveyResponse[fieldId]))
}

func (p *CreateLifestyleSurveyResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *CreateLifestyleSurveyResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SurveyId = _field
	return nil
}

func (p *CreateLifestyleSurveyResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateLifestyleSurveyResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateLifestyleSurveyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateLifestyleSurveyResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("surveyId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SurveyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateLifestyleSurveyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateLifestyleSurveyResponse(%+v)", *p)

}

// 获取生活方式调查请求
type GetLifestyleSurveyRequest struct {
	PatientId int64 `thrift:"patientId,1,required" form:"patientId,required" json:"patientId,required" query:"patientId,required"`
}

func NewGetLifestyleSurveyRequest() *GetLifestyleSurveyRequest {
	return &GetLifestyleSurveyRequest{}
}

func (p *GetLifestyleSurveyRequest) InitDefault() {
}

func (p *GetLifestyleSurveyRequest) GetPatientId() (v int64) {
	return p.PatientId
}

var fieldIDToName_GetLifestyleSurveyRequest = map[int16]string{
	1: "patientId",
}

func (p *GetLifestyleSurveyRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPatientId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPatientId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPatientId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLifestyleSurveyRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetLifestyleSurveyRequest[fieldId]))
}

func (p *GetLifestyleSurveyRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PatientId = _field
	return nil
}

func (p *GetLifestyleSurveyRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLifestyleSurveyRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLifestyleSurveyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("patientId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PatientId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLifestyleSurveyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLifestyleSurveyRequest(%+v)", *p)

}

// 获取生活方式调查响应
type GetLifestyleSurveyResponse struct {
	Base   *model.BaseResp        `thrift:"Base,1,required" form:"Base,required" json:"Base,required" query:"Base,required"`
	Survey *model.LifestyleSurvey `thrift:"survey,2,required" form:"survey,required" json:"survey,required" query:"survey,required"`
}

func NewGetLifestyleSurveyResponse() *GetLifestyleSurveyResponse {
	return &GetLifestyleSurveyResponse{}
}

func (p *GetLifestyleSurveyResponse) InitDefault() {
}

var GetLifestyleSurveyResponse_Base_DEFAULT *model.BaseResp

func (p *GetLifestyleSurveyResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetLifestyleSurveyResponse_Base_DEFAULT
	}
	return p.Base
}

var GetLifestyleSurveyResponse_Survey_DEFAULT *model.LifestyleSurvey

func (p *GetLifestyleSurveyResponse) GetSurvey() (v *model.LifestyleSurvey) {
	if !p.IsSetSurvey() {
		return GetLifestyleSurveyResponse_Survey_DEFAULT
	}
	return p.Survey
}

var fieldIDToName_GetLifestyleSurveyResponse = map[int16]string{
	1: "Base",
	2: "survey",
}

func (p *GetLifestyleSurveyResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetLifestyleSurveyResponse) IsSetSurvey() bool {
	return p.Survey != nil
}

func (p *GetLifestyleSurveyResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false
	var issetSurvey bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSurvey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSurvey {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLifestyleSurveyResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetLifestyleSurveyResponse[fieldId]))
}

func (p *GetLifestyleSurveyResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := model.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *GetLifestyleSurveyResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := model.NewLifestyleSurvey()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Survey = _field
	return nil
}

func (p *GetLifestyleSurveyResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLifestyleSurveyResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLifestyleSurveyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetLifestyleSurveyResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("survey", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Survey.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetLifestyleSurveyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLifestyleSurveyResponse(%+v)", *p)

}

type EpidemiologyService interface {
	// 环境暴露管理
	CreateEnvironmentExposure(ctx context.Context, req *CreateEnvironmentExposureRequest) (r *CreateEnvironmentExposureResponse, err error)

	GetEnvironmentExposure(ctx context.Context, req *GetEnvironmentExposureRequest) (r *GetEnvironmentExposureResponse, err error)

	GetPatientEnvironmentExposures(ctx context.Context, req *GetPatientEnvironmentExposuresRequest) (r *GetPatientEnvironmentExposuresResponse, err error)
	// 环境监测数据管理
	AddEnvironmentMonitor(ctx context.Context, req *AddEnvironmentMonitorRequest) (r *AddEnvironmentMonitorResponse, err error)

	GetEnvironmentMonitors(ctx context.Context, req *GetEnvironmentMonitorsRequest) (r *GetEnvironmentMonitorsResponse, err error)
	// 生活方式调查管理
	CreateLifestyleSurvey(ctx context.Context, req *CreateLifestyleSurveyRequest) (r *CreateLifestyleSurveyResponse, err error)

	GetLifestyleSurvey(ctx context.Context, req *GetLifestyleSurveyRequest) (r *GetLifestyleSurveyResponse, err error)
}

type EpidemiologyServiceClient struct {
	c thrift.TClient
}

func NewEpidemiologyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EpidemiologyServiceClient {
	return &EpidemiologyServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewEpidemiologyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EpidemiologyServiceClient {
	return &EpidemiologyServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewEpidemiologyServiceClient(c thrift.TClient) *EpidemiologyServiceClient {
	return &EpidemiologyServiceClient{
		c: c,
	}
}

func (p *EpidemiologyServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *EpidemiologyServiceClient) CreateEnvironmentExposure(ctx context.Context, req *CreateEnvironmentExposureRequest) (r *CreateEnvironmentExposureResponse, err error) {
	var _args EpidemiologyServiceCreateEnvironmentExposureArgs
	_args.Req = req
	var _result EpidemiologyServiceCreateEnvironmentExposureResult
	if err = p.Client_().Call(ctx, "CreateEnvironmentExposure", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EpidemiologyServiceClient) GetEnvironmentExposure(ctx context.Context, req *GetEnvironmentExposureRequest) (r *GetEnvironmentExposureResponse, err error) {
	var _args EpidemiologyServiceGetEnvironmentExposureArgs
	_args.Req = req
	var _result EpidemiologyServiceGetEnvironmentExposureResult
	if err = p.Client_().Call(ctx, "GetEnvironmentExposure", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EpidemiologyServiceClient) GetPatientEnvironmentExposures(ctx context.Context, req *GetPatientEnvironmentExposuresRequest) (r *GetPatientEnvironmentExposuresResponse, err error) {
	var _args EpidemiologyServiceGetPatientEnvironmentExposuresArgs
	_args.Req = req
	var _result EpidemiologyServiceGetPatientEnvironmentExposuresResult
	if err = p.Client_().Call(ctx, "GetPatientEnvironmentExposures", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EpidemiologyServiceClient) AddEnvironmentMonitor(ctx context.Context, req *AddEnvironmentMonitorRequest) (r *AddEnvironmentMonitorResponse, err error) {
	var _args EpidemiologyServiceAddEnvironmentMonitorArgs
	_args.Req = req
	var _result EpidemiologyServiceAddEnvironmentMonitorResult
	if err = p.Client_().Call(ctx, "AddEnvironmentMonitor", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EpidemiologyServiceClient) GetEnvironmentMonitors(ctx context.Context, req *GetEnvironmentMonitorsRequest) (r *GetEnvironmentMonitorsResponse, err error) {
	var _args EpidemiologyServiceGetEnvironmentMonitorsArgs
	_args.Req = req
	var _result EpidemiologyServiceGetEnvironmentMonitorsResult
	if err = p.Client_().Call(ctx, "GetEnvironmentMonitors", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EpidemiologyServiceClient) CreateLifestyleSurvey(ctx context.Context, req *CreateLifestyleSurveyRequest) (r *CreateLifestyleSurveyResponse, err error) {
	var _args EpidemiologyServiceCreateLifestyleSurveyArgs
	_args.Req = req
	var _result EpidemiologyServiceCreateLifestyleSurveyResult
	if err = p.Client_().Call(ctx, "CreateLifestyleSurvey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EpidemiologyServiceClient) GetLifestyleSurvey(ctx context.Context, req *GetLifestyleSurveyRequest) (r *GetLifestyleSurveyResponse, err error) {
	var _args EpidemiologyServiceGetLifestyleSurveyArgs
	_args.Req = req
	var _result EpidemiologyServiceGetLifestyleSurveyResult
	if err = p.Client_().Call(ctx, "GetLifestyleSurvey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type EpidemiologyServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EpidemiologyService
}

func (p *EpidemiologyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EpidemiologyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EpidemiologyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEpidemiologyServiceProcessor(handler EpidemiologyService) *EpidemiologyServiceProcessor {
	self := &EpidemiologyServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateEnvironmentExposure", &epidemiologyServiceProcessorCreateEnvironmentExposure{handler: handler})
	self.AddToProcessorMap("GetEnvironmentExposure", &epidemiologyServiceProcessorGetEnvironmentExposure{handler: handler})
	self.AddToProcessorMap("GetPatientEnvironmentExposures", &epidemiologyServiceProcessorGetPatientEnvironmentExposures{handler: handler})
	self.AddToProcessorMap("AddEnvironmentMonitor", &epidemiologyServiceProcessorAddEnvironmentMonitor{handler: handler})
	self.AddToProcessorMap("GetEnvironmentMonitors", &epidemiologyServiceProcessorGetEnvironmentMonitors{handler: handler})
	self.AddToProcessorMap("CreateLifestyleSurvey", &epidemiologyServiceProcessorCreateLifestyleSurvey{handler: handler})
	self.AddToProcessorMap("GetLifestyleSurvey", &epidemiologyServiceProcessorGetLifestyleSurvey{handler: handler})
	return self
}
func (p *EpidemiologyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type epidemiologyServiceProcessorCreateEnvironmentExposure struct {
	handler EpidemiologyService
}

func (p *epidemiologyServiceProcessorCreateEnvironmentExposure) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemiologyServiceCreateEnvironmentExposureArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEnvironmentExposure", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemiologyServiceCreateEnvironmentExposureResult{}
	var retval *CreateEnvironmentExposureResponse
	if retval, err2 = p.handler.CreateEnvironmentExposure(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEnvironmentExposure: "+err2.Error())
		oprot.WriteMessageBegin("CreateEnvironmentExposure", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEnvironmentExposure", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type epidemiologyServiceProcessorGetEnvironmentExposure struct {
	handler EpidemiologyService
}

func (p *epidemiologyServiceProcessorGetEnvironmentExposure) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemiologyServiceGetEnvironmentExposureArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEnvironmentExposure", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemiologyServiceGetEnvironmentExposureResult{}
	var retval *GetEnvironmentExposureResponse
	if retval, err2 = p.handler.GetEnvironmentExposure(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEnvironmentExposure: "+err2.Error())
		oprot.WriteMessageBegin("GetEnvironmentExposure", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEnvironmentExposure", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type epidemiologyServiceProcessorGetPatientEnvironmentExposures struct {
	handler EpidemiologyService
}

func (p *epidemiologyServiceProcessorGetPatientEnvironmentExposures) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemiologyServiceGetPatientEnvironmentExposuresArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPatientEnvironmentExposures", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemiologyServiceGetPatientEnvironmentExposuresResult{}
	var retval *GetPatientEnvironmentExposuresResponse
	if retval, err2 = p.handler.GetPatientEnvironmentExposures(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPatientEnvironmentExposures: "+err2.Error())
		oprot.WriteMessageBegin("GetPatientEnvironmentExposures", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPatientEnvironmentExposures", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type epidemiologyServiceProcessorAddEnvironmentMonitor struct {
	handler EpidemiologyService
}

func (p *epidemiologyServiceProcessorAddEnvironmentMonitor) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemiologyServiceAddEnvironmentMonitorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddEnvironmentMonitor", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemiologyServiceAddEnvironmentMonitorResult{}
	var retval *AddEnvironmentMonitorResponse
	if retval, err2 = p.handler.AddEnvironmentMonitor(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddEnvironmentMonitor: "+err2.Error())
		oprot.WriteMessageBegin("AddEnvironmentMonitor", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddEnvironmentMonitor", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type epidemiologyServiceProcessorGetEnvironmentMonitors struct {
	handler EpidemiologyService
}

func (p *epidemiologyServiceProcessorGetEnvironmentMonitors) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemiologyServiceGetEnvironmentMonitorsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEnvironmentMonitors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemiologyServiceGetEnvironmentMonitorsResult{}
	var retval *GetEnvironmentMonitorsResponse
	if retval, err2 = p.handler.GetEnvironmentMonitors(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEnvironmentMonitors: "+err2.Error())
		oprot.WriteMessageBegin("GetEnvironmentMonitors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEnvironmentMonitors", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type epidemiologyServiceProcessorCreateLifestyleSurvey struct {
	handler EpidemiologyService
}

func (p *epidemiologyServiceProcessorCreateLifestyleSurvey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemiologyServiceCreateLifestyleSurveyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateLifestyleSurvey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemiologyServiceCreateLifestyleSurveyResult{}
	var retval *CreateLifestyleSurveyResponse
	if retval, err2 = p.handler.CreateLifestyleSurvey(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateLifestyleSurvey: "+err2.Error())
		oprot.WriteMessageBegin("CreateLifestyleSurvey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateLifestyleSurvey", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type epidemiologyServiceProcessorGetLifestyleSurvey struct {
	handler EpidemiologyService
}

func (p *epidemiologyServiceProcessorGetLifestyleSurvey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EpidemiologyServiceGetLifestyleSurveyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLifestyleSurvey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EpidemiologyServiceGetLifestyleSurveyResult{}
	var retval *GetLifestyleSurveyResponse
	if retval, err2 = p.handler.GetLifestyleSurvey(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLifestyleSurvey: "+err2.Error())
		oprot.WriteMessageBegin("GetLifestyleSurvey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLifestyleSurvey", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type EpidemiologyServiceCreateEnvironmentExposureArgs struct {
	Req *CreateEnvironmentExposureRequest `thrift:"req,1"`
}

func NewEpidemiologyServiceCreateEnvironmentExposureArgs() *EpidemiologyServiceCreateEnvironmentExposureArgs {
	return &EpidemiologyServiceCreateEnvironmentExposureArgs{}
}

func (p *EpidemiologyServiceCreateEnvironmentExposureArgs) InitDefault() {
}

var EpidemiologyServiceCreateEnvironmentExposureArgs_Req_DEFAULT *CreateEnvironmentExposureRequest

func (p *EpidemiologyServiceCreateEnvironmentExposureArgs) GetReq() (v *CreateEnvironmentExposureRequest) {
	if !p.IsSetReq() {
		return EpidemiologyServiceCreateEnvironmentExposureArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_EpidemiologyServiceCreateEnvironmentExposureArgs = map[int16]string{
	1: "req",
}

func (p *EpidemiologyServiceCreateEnvironmentExposureArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EpidemiologyServiceCreateEnvironmentExposureArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyServiceCreateEnvironmentExposureArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyServiceCreateEnvironmentExposureArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEnvironmentExposureRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EpidemiologyServiceCreateEnvironmentExposureArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEnvironmentExposure_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyServiceCreateEnvironmentExposureArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemiologyServiceCreateEnvironmentExposureArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyServiceCreateEnvironmentExposureArgs(%+v)", *p)

}

type EpidemiologyServiceCreateEnvironmentExposureResult struct {
	Success *CreateEnvironmentExposureResponse `thrift:"success,0,optional"`
}

func NewEpidemiologyServiceCreateEnvironmentExposureResult() *EpidemiologyServiceCreateEnvironmentExposureResult {
	return &EpidemiologyServiceCreateEnvironmentExposureResult{}
}

func (p *EpidemiologyServiceCreateEnvironmentExposureResult) InitDefault() {
}

var EpidemiologyServiceCreateEnvironmentExposureResult_Success_DEFAULT *CreateEnvironmentExposureResponse

func (p *EpidemiologyServiceCreateEnvironmentExposureResult) GetSuccess() (v *CreateEnvironmentExposureResponse) {
	if !p.IsSetSuccess() {
		return EpidemiologyServiceCreateEnvironmentExposureResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemiologyServiceCreateEnvironmentExposureResult = map[int16]string{
	0: "success",
}

func (p *EpidemiologyServiceCreateEnvironmentExposureResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemiologyServiceCreateEnvironmentExposureResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyServiceCreateEnvironmentExposureResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyServiceCreateEnvironmentExposureResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEnvironmentExposureResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemiologyServiceCreateEnvironmentExposureResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEnvironmentExposure_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyServiceCreateEnvironmentExposureResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemiologyServiceCreateEnvironmentExposureResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyServiceCreateEnvironmentExposureResult(%+v)", *p)

}

type EpidemiologyServiceGetEnvironmentExposureArgs struct {
	Req *GetEnvironmentExposureRequest `thrift:"req,1"`
}

func NewEpidemiologyServiceGetEnvironmentExposureArgs() *EpidemiologyServiceGetEnvironmentExposureArgs {
	return &EpidemiologyServiceGetEnvironmentExposureArgs{}
}

func (p *EpidemiologyServiceGetEnvironmentExposureArgs) InitDefault() {
}

var EpidemiologyServiceGetEnvironmentExposureArgs_Req_DEFAULT *GetEnvironmentExposureRequest

func (p *EpidemiologyServiceGetEnvironmentExposureArgs) GetReq() (v *GetEnvironmentExposureRequest) {
	if !p.IsSetReq() {
		return EpidemiologyServiceGetEnvironmentExposureArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_EpidemiologyServiceGetEnvironmentExposureArgs = map[int16]string{
	1: "req",
}

func (p *EpidemiologyServiceGetEnvironmentExposureArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EpidemiologyServiceGetEnvironmentExposureArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyServiceGetEnvironmentExposureArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetEnvironmentExposureArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEnvironmentExposureRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EpidemiologyServiceGetEnvironmentExposureArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEnvironmentExposure_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetEnvironmentExposureArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemiologyServiceGetEnvironmentExposureArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyServiceGetEnvironmentExposureArgs(%+v)", *p)

}

type EpidemiologyServiceGetEnvironmentExposureResult struct {
	Success *GetEnvironmentExposureResponse `thrift:"success,0,optional"`
}

func NewEpidemiologyServiceGetEnvironmentExposureResult() *EpidemiologyServiceGetEnvironmentExposureResult {
	return &EpidemiologyServiceGetEnvironmentExposureResult{}
}

func (p *EpidemiologyServiceGetEnvironmentExposureResult) InitDefault() {
}

var EpidemiologyServiceGetEnvironmentExposureResult_Success_DEFAULT *GetEnvironmentExposureResponse

func (p *EpidemiologyServiceGetEnvironmentExposureResult) GetSuccess() (v *GetEnvironmentExposureResponse) {
	if !p.IsSetSuccess() {
		return EpidemiologyServiceGetEnvironmentExposureResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemiologyServiceGetEnvironmentExposureResult = map[int16]string{
	0: "success",
}

func (p *EpidemiologyServiceGetEnvironmentExposureResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemiologyServiceGetEnvironmentExposureResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyServiceGetEnvironmentExposureResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetEnvironmentExposureResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEnvironmentExposureResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemiologyServiceGetEnvironmentExposureResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEnvironmentExposure_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetEnvironmentExposureResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemiologyServiceGetEnvironmentExposureResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyServiceGetEnvironmentExposureResult(%+v)", *p)

}

type EpidemiologyServiceGetPatientEnvironmentExposuresArgs struct {
	Req *GetPatientEnvironmentExposuresRequest `thrift:"req,1"`
}

func NewEpidemiologyServiceGetPatientEnvironmentExposuresArgs() *EpidemiologyServiceGetPatientEnvironmentExposuresArgs {
	return &EpidemiologyServiceGetPatientEnvironmentExposuresArgs{}
}

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresArgs) InitDefault() {
}

var EpidemiologyServiceGetPatientEnvironmentExposuresArgs_Req_DEFAULT *GetPatientEnvironmentExposuresRequest

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresArgs) GetReq() (v *GetPatientEnvironmentExposuresRequest) {
	if !p.IsSetReq() {
		return EpidemiologyServiceGetPatientEnvironmentExposuresArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_EpidemiologyServiceGetPatientEnvironmentExposuresArgs = map[int16]string{
	1: "req",
}

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyServiceGetPatientEnvironmentExposuresArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetPatientEnvironmentExposuresRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPatientEnvironmentExposures_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyServiceGetPatientEnvironmentExposuresArgs(%+v)", *p)

}

type EpidemiologyServiceGetPatientEnvironmentExposuresResult struct {
	Success *GetPatientEnvironmentExposuresResponse `thrift:"success,0,optional"`
}

func NewEpidemiologyServiceGetPatientEnvironmentExposuresResult() *EpidemiologyServiceGetPatientEnvironmentExposuresResult {
	return &EpidemiologyServiceGetPatientEnvironmentExposuresResult{}
}

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresResult) InitDefault() {
}

var EpidemiologyServiceGetPatientEnvironmentExposuresResult_Success_DEFAULT *GetPatientEnvironmentExposuresResponse

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresResult) GetSuccess() (v *GetPatientEnvironmentExposuresResponse) {
	if !p.IsSetSuccess() {
		return EpidemiologyServiceGetPatientEnvironmentExposuresResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemiologyServiceGetPatientEnvironmentExposuresResult = map[int16]string{
	0: "success",
}

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyServiceGetPatientEnvironmentExposuresResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetPatientEnvironmentExposuresResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPatientEnvironmentExposures_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemiologyServiceGetPatientEnvironmentExposuresResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyServiceGetPatientEnvironmentExposuresResult(%+v)", *p)

}

type EpidemiologyServiceAddEnvironmentMonitorArgs struct {
	Req *AddEnvironmentMonitorRequest `thrift:"req,1"`
}

func NewEpidemiologyServiceAddEnvironmentMonitorArgs() *EpidemiologyServiceAddEnvironmentMonitorArgs {
	return &EpidemiologyServiceAddEnvironmentMonitorArgs{}
}

func (p *EpidemiologyServiceAddEnvironmentMonitorArgs) InitDefault() {
}

var EpidemiologyServiceAddEnvironmentMonitorArgs_Req_DEFAULT *AddEnvironmentMonitorRequest

func (p *EpidemiologyServiceAddEnvironmentMonitorArgs) GetReq() (v *AddEnvironmentMonitorRequest) {
	if !p.IsSetReq() {
		return EpidemiologyServiceAddEnvironmentMonitorArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_EpidemiologyServiceAddEnvironmentMonitorArgs = map[int16]string{
	1: "req",
}

func (p *EpidemiologyServiceAddEnvironmentMonitorArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EpidemiologyServiceAddEnvironmentMonitorArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyServiceAddEnvironmentMonitorArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyServiceAddEnvironmentMonitorArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAddEnvironmentMonitorRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EpidemiologyServiceAddEnvironmentMonitorArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddEnvironmentMonitor_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyServiceAddEnvironmentMonitorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemiologyServiceAddEnvironmentMonitorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyServiceAddEnvironmentMonitorArgs(%+v)", *p)

}

type EpidemiologyServiceAddEnvironmentMonitorResult struct {
	Success *AddEnvironmentMonitorResponse `thrift:"success,0,optional"`
}

func NewEpidemiologyServiceAddEnvironmentMonitorResult() *EpidemiologyServiceAddEnvironmentMonitorResult {
	return &EpidemiologyServiceAddEnvironmentMonitorResult{}
}

func (p *EpidemiologyServiceAddEnvironmentMonitorResult) InitDefault() {
}

var EpidemiologyServiceAddEnvironmentMonitorResult_Success_DEFAULT *AddEnvironmentMonitorResponse

func (p *EpidemiologyServiceAddEnvironmentMonitorResult) GetSuccess() (v *AddEnvironmentMonitorResponse) {
	if !p.IsSetSuccess() {
		return EpidemiologyServiceAddEnvironmentMonitorResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemiologyServiceAddEnvironmentMonitorResult = map[int16]string{
	0: "success",
}

func (p *EpidemiologyServiceAddEnvironmentMonitorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemiologyServiceAddEnvironmentMonitorResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyServiceAddEnvironmentMonitorResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyServiceAddEnvironmentMonitorResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewAddEnvironmentMonitorResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemiologyServiceAddEnvironmentMonitorResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddEnvironmentMonitor_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyServiceAddEnvironmentMonitorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemiologyServiceAddEnvironmentMonitorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyServiceAddEnvironmentMonitorResult(%+v)", *p)

}

type EpidemiologyServiceGetEnvironmentMonitorsArgs struct {
	Req *GetEnvironmentMonitorsRequest `thrift:"req,1"`
}

func NewEpidemiologyServiceGetEnvironmentMonitorsArgs() *EpidemiologyServiceGetEnvironmentMonitorsArgs {
	return &EpidemiologyServiceGetEnvironmentMonitorsArgs{}
}

func (p *EpidemiologyServiceGetEnvironmentMonitorsArgs) InitDefault() {
}

var EpidemiologyServiceGetEnvironmentMonitorsArgs_Req_DEFAULT *GetEnvironmentMonitorsRequest

func (p *EpidemiologyServiceGetEnvironmentMonitorsArgs) GetReq() (v *GetEnvironmentMonitorsRequest) {
	if !p.IsSetReq() {
		return EpidemiologyServiceGetEnvironmentMonitorsArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_EpidemiologyServiceGetEnvironmentMonitorsArgs = map[int16]string{
	1: "req",
}

func (p *EpidemiologyServiceGetEnvironmentMonitorsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EpidemiologyServiceGetEnvironmentMonitorsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyServiceGetEnvironmentMonitorsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetEnvironmentMonitorsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEnvironmentMonitorsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EpidemiologyServiceGetEnvironmentMonitorsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEnvironmentMonitors_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetEnvironmentMonitorsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemiologyServiceGetEnvironmentMonitorsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyServiceGetEnvironmentMonitorsArgs(%+v)", *p)

}

type EpidemiologyServiceGetEnvironmentMonitorsResult struct {
	Success *GetEnvironmentMonitorsResponse `thrift:"success,0,optional"`
}

func NewEpidemiologyServiceGetEnvironmentMonitorsResult() *EpidemiologyServiceGetEnvironmentMonitorsResult {
	return &EpidemiologyServiceGetEnvironmentMonitorsResult{}
}

func (p *EpidemiologyServiceGetEnvironmentMonitorsResult) InitDefault() {
}

var EpidemiologyServiceGetEnvironmentMonitorsResult_Success_DEFAULT *GetEnvironmentMonitorsResponse

func (p *EpidemiologyServiceGetEnvironmentMonitorsResult) GetSuccess() (v *GetEnvironmentMonitorsResponse) {
	if !p.IsSetSuccess() {
		return EpidemiologyServiceGetEnvironmentMonitorsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemiologyServiceGetEnvironmentMonitorsResult = map[int16]string{
	0: "success",
}

func (p *EpidemiologyServiceGetEnvironmentMonitorsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemiologyServiceGetEnvironmentMonitorsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyServiceGetEnvironmentMonitorsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetEnvironmentMonitorsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEnvironmentMonitorsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemiologyServiceGetEnvironmentMonitorsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEnvironmentMonitors_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetEnvironmentMonitorsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemiologyServiceGetEnvironmentMonitorsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyServiceGetEnvironmentMonitorsResult(%+v)", *p)

}

type EpidemiologyServiceCreateLifestyleSurveyArgs struct {
	Req *CreateLifestyleSurveyRequest `thrift:"req,1"`
}

func NewEpidemiologyServiceCreateLifestyleSurveyArgs() *EpidemiologyServiceCreateLifestyleSurveyArgs {
	return &EpidemiologyServiceCreateLifestyleSurveyArgs{}
}

func (p *EpidemiologyServiceCreateLifestyleSurveyArgs) InitDefault() {
}

var EpidemiologyServiceCreateLifestyleSurveyArgs_Req_DEFAULT *CreateLifestyleSurveyRequest

func (p *EpidemiologyServiceCreateLifestyleSurveyArgs) GetReq() (v *CreateLifestyleSurveyRequest) {
	if !p.IsSetReq() {
		return EpidemiologyServiceCreateLifestyleSurveyArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_EpidemiologyServiceCreateLifestyleSurveyArgs = map[int16]string{
	1: "req",
}

func (p *EpidemiologyServiceCreateLifestyleSurveyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EpidemiologyServiceCreateLifestyleSurveyArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyServiceCreateLifestyleSurveyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyServiceCreateLifestyleSurveyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateLifestyleSurveyRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EpidemiologyServiceCreateLifestyleSurveyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateLifestyleSurvey_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyServiceCreateLifestyleSurveyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemiologyServiceCreateLifestyleSurveyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyServiceCreateLifestyleSurveyArgs(%+v)", *p)

}

type EpidemiologyServiceCreateLifestyleSurveyResult struct {
	Success *CreateLifestyleSurveyResponse `thrift:"success,0,optional"`
}

func NewEpidemiologyServiceCreateLifestyleSurveyResult() *EpidemiologyServiceCreateLifestyleSurveyResult {
	return &EpidemiologyServiceCreateLifestyleSurveyResult{}
}

func (p *EpidemiologyServiceCreateLifestyleSurveyResult) InitDefault() {
}

var EpidemiologyServiceCreateLifestyleSurveyResult_Success_DEFAULT *CreateLifestyleSurveyResponse

func (p *EpidemiologyServiceCreateLifestyleSurveyResult) GetSuccess() (v *CreateLifestyleSurveyResponse) {
	if !p.IsSetSuccess() {
		return EpidemiologyServiceCreateLifestyleSurveyResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemiologyServiceCreateLifestyleSurveyResult = map[int16]string{
	0: "success",
}

func (p *EpidemiologyServiceCreateLifestyleSurveyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemiologyServiceCreateLifestyleSurveyResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyServiceCreateLifestyleSurveyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyServiceCreateLifestyleSurveyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateLifestyleSurveyResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemiologyServiceCreateLifestyleSurveyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateLifestyleSurvey_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyServiceCreateLifestyleSurveyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemiologyServiceCreateLifestyleSurveyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyServiceCreateLifestyleSurveyResult(%+v)", *p)

}

type EpidemiologyServiceGetLifestyleSurveyArgs struct {
	Req *GetLifestyleSurveyRequest `thrift:"req,1"`
}

func NewEpidemiologyServiceGetLifestyleSurveyArgs() *EpidemiologyServiceGetLifestyleSurveyArgs {
	return &EpidemiologyServiceGetLifestyleSurveyArgs{}
}

func (p *EpidemiologyServiceGetLifestyleSurveyArgs) InitDefault() {
}

var EpidemiologyServiceGetLifestyleSurveyArgs_Req_DEFAULT *GetLifestyleSurveyRequest

func (p *EpidemiologyServiceGetLifestyleSurveyArgs) GetReq() (v *GetLifestyleSurveyRequest) {
	if !p.IsSetReq() {
		return EpidemiologyServiceGetLifestyleSurveyArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_EpidemiologyServiceGetLifestyleSurveyArgs = map[int16]string{
	1: "req",
}

func (p *EpidemiologyServiceGetLifestyleSurveyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EpidemiologyServiceGetLifestyleSurveyArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyServiceGetLifestyleSurveyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetLifestyleSurveyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetLifestyleSurveyRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EpidemiologyServiceGetLifestyleSurveyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLifestyleSurvey_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetLifestyleSurveyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EpidemiologyServiceGetLifestyleSurveyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyServiceGetLifestyleSurveyArgs(%+v)", *p)

}

type EpidemiologyServiceGetLifestyleSurveyResult struct {
	Success *GetLifestyleSurveyResponse `thrift:"success,0,optional"`
}

func NewEpidemiologyServiceGetLifestyleSurveyResult() *EpidemiologyServiceGetLifestyleSurveyResult {
	return &EpidemiologyServiceGetLifestyleSurveyResult{}
}

func (p *EpidemiologyServiceGetLifestyleSurveyResult) InitDefault() {
}

var EpidemiologyServiceGetLifestyleSurveyResult_Success_DEFAULT *GetLifestyleSurveyResponse

func (p *EpidemiologyServiceGetLifestyleSurveyResult) GetSuccess() (v *GetLifestyleSurveyResponse) {
	if !p.IsSetSuccess() {
		return EpidemiologyServiceGetLifestyleSurveyResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EpidemiologyServiceGetLifestyleSurveyResult = map[int16]string{
	0: "success",
}

func (p *EpidemiologyServiceGetLifestyleSurveyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EpidemiologyServiceGetLifestyleSurveyResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EpidemiologyServiceGetLifestyleSurveyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetLifestyleSurveyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetLifestyleSurveyResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EpidemiologyServiceGetLifestyleSurveyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLifestyleSurvey_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EpidemiologyServiceGetLifestyleSurveyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EpidemiologyServiceGetLifestyleSurveyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EpidemiologyServiceGetLifestyleSurveyResult(%+v)", *p)

}
