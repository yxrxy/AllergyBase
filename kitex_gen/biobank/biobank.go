// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package biobank

import (
	"context"
	"fmt"
	"github.com/yxrxy/AllergyBase/kitex_gen/model"
)

type CreateSampleRequest struct {
	Sample *model.SampleInfo `thrift:"sample,1,required" frugal:"1,required,model.SampleInfo" json:"sample"`
}

func NewCreateSampleRequest() *CreateSampleRequest {
	return &CreateSampleRequest{}
}

func (p *CreateSampleRequest) InitDefault() {
}

var CreateSampleRequest_Sample_DEFAULT *model.SampleInfo

func (p *CreateSampleRequest) GetSample() (v *model.SampleInfo) {
	if !p.IsSetSample() {
		return CreateSampleRequest_Sample_DEFAULT
	}
	return p.Sample
}
func (p *CreateSampleRequest) SetSample(val *model.SampleInfo) {
	p.Sample = val
}

func (p *CreateSampleRequest) IsSetSample() bool {
	return p.Sample != nil
}

func (p *CreateSampleRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSampleRequest(%+v)", *p)
}

var fieldIDToName_CreateSampleRequest = map[int16]string{
	1: "sample",
}

type CreateSampleResponse struct {
	Base     *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	SampleId int64           `thrift:"sampleId,2,required" frugal:"2,required,i64" json:"sampleId"`
}

func NewCreateSampleResponse() *CreateSampleResponse {
	return &CreateSampleResponse{}
}

func (p *CreateSampleResponse) InitDefault() {
}

var CreateSampleResponse_Base_DEFAULT *model.BaseResp

func (p *CreateSampleResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateSampleResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *CreateSampleResponse) GetSampleId() (v int64) {
	return p.SampleId
}
func (p *CreateSampleResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateSampleResponse) SetSampleId(val int64) {
	p.SampleId = val
}

func (p *CreateSampleResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateSampleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSampleResponse(%+v)", *p)
}

var fieldIDToName_CreateSampleResponse = map[int16]string{
	1: "Base",
	2: "sampleId",
}

type GetSampleRequest struct {
	SampleId int64 `thrift:"sampleId,1,required" frugal:"1,required,i64" json:"sampleId"`
}

func NewGetSampleRequest() *GetSampleRequest {
	return &GetSampleRequest{}
}

func (p *GetSampleRequest) InitDefault() {
}

func (p *GetSampleRequest) GetSampleId() (v int64) {
	return p.SampleId
}
func (p *GetSampleRequest) SetSampleId(val int64) {
	p.SampleId = val
}

func (p *GetSampleRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSampleRequest(%+v)", *p)
}

var fieldIDToName_GetSampleRequest = map[int16]string{
	1: "sampleId",
}

type GetSampleResponse struct {
	Base   *model.BaseResp   `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Sample *model.SampleInfo `thrift:"sample,2,required" frugal:"2,required,model.SampleInfo" json:"sample"`
}

func NewGetSampleResponse() *GetSampleResponse {
	return &GetSampleResponse{}
}

func (p *GetSampleResponse) InitDefault() {
}

var GetSampleResponse_Base_DEFAULT *model.BaseResp

func (p *GetSampleResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetSampleResponse_Base_DEFAULT
	}
	return p.Base
}

var GetSampleResponse_Sample_DEFAULT *model.SampleInfo

func (p *GetSampleResponse) GetSample() (v *model.SampleInfo) {
	if !p.IsSetSample() {
		return GetSampleResponse_Sample_DEFAULT
	}
	return p.Sample
}
func (p *GetSampleResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetSampleResponse) SetSample(val *model.SampleInfo) {
	p.Sample = val
}

func (p *GetSampleResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetSampleResponse) IsSetSample() bool {
	return p.Sample != nil
}

func (p *GetSampleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSampleResponse(%+v)", *p)
}

var fieldIDToName_GetSampleResponse = map[int16]string{
	1: "Base",
	2: "sample",
}

type GetPatientSamplesRequest struct {
	PatientId int64 `thrift:"patientId,1,required" frugal:"1,required,i64" json:"patientId"`
}

func NewGetPatientSamplesRequest() *GetPatientSamplesRequest {
	return &GetPatientSamplesRequest{}
}

func (p *GetPatientSamplesRequest) InitDefault() {
}

func (p *GetPatientSamplesRequest) GetPatientId() (v int64) {
	return p.PatientId
}
func (p *GetPatientSamplesRequest) SetPatientId(val int64) {
	p.PatientId = val
}

func (p *GetPatientSamplesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPatientSamplesRequest(%+v)", *p)
}

var fieldIDToName_GetPatientSamplesRequest = map[int16]string{
	1: "patientId",
}

type GetPatientSamplesResponse struct {
	Base    *model.BaseResp     `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Samples []*model.SampleInfo `thrift:"samples,2,required" frugal:"2,required,list<model.SampleInfo>" json:"samples"`
}

func NewGetPatientSamplesResponse() *GetPatientSamplesResponse {
	return &GetPatientSamplesResponse{}
}

func (p *GetPatientSamplesResponse) InitDefault() {
}

var GetPatientSamplesResponse_Base_DEFAULT *model.BaseResp

func (p *GetPatientSamplesResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetPatientSamplesResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetPatientSamplesResponse) GetSamples() (v []*model.SampleInfo) {
	return p.Samples
}
func (p *GetPatientSamplesResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetPatientSamplesResponse) SetSamples(val []*model.SampleInfo) {
	p.Samples = val
}

func (p *GetPatientSamplesResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetPatientSamplesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPatientSamplesResponse(%+v)", *p)
}

var fieldIDToName_GetPatientSamplesResponse = map[int16]string{
	1: "Base",
	2: "samples",
}

type ListSamplesRequest struct {
	Offset    *int32  `thrift:"offset,1,optional" frugal:"1,optional,i32" json:"offset,omitempty"`
	Limit     *int32  `thrift:"limit,2,optional" frugal:"2,optional,i32" json:"limit,omitempty"`
	SampleNo  *string `thrift:"sampleNo,3,optional" frugal:"3,optional,string" json:"sampleNo,omitempty"`
	PatientId *int64  `thrift:"patientId,4,optional" frugal:"4,optional,i64" json:"patientId,omitempty"`
}

func NewListSamplesRequest() *ListSamplesRequest {
	return &ListSamplesRequest{}
}

func (p *ListSamplesRequest) InitDefault() {
}

var ListSamplesRequest_Offset_DEFAULT int32

func (p *ListSamplesRequest) GetOffset() (v int32) {
	if !p.IsSetOffset() {
		return ListSamplesRequest_Offset_DEFAULT
	}
	return *p.Offset
}

var ListSamplesRequest_Limit_DEFAULT int32

func (p *ListSamplesRequest) GetLimit() (v int32) {
	if !p.IsSetLimit() {
		return ListSamplesRequest_Limit_DEFAULT
	}
	return *p.Limit
}

var ListSamplesRequest_SampleNo_DEFAULT string

func (p *ListSamplesRequest) GetSampleNo() (v string) {
	if !p.IsSetSampleNo() {
		return ListSamplesRequest_SampleNo_DEFAULT
	}
	return *p.SampleNo
}

var ListSamplesRequest_PatientId_DEFAULT int64

func (p *ListSamplesRequest) GetPatientId() (v int64) {
	if !p.IsSetPatientId() {
		return ListSamplesRequest_PatientId_DEFAULT
	}
	return *p.PatientId
}
func (p *ListSamplesRequest) SetOffset(val *int32) {
	p.Offset = val
}
func (p *ListSamplesRequest) SetLimit(val *int32) {
	p.Limit = val
}
func (p *ListSamplesRequest) SetSampleNo(val *string) {
	p.SampleNo = val
}
func (p *ListSamplesRequest) SetPatientId(val *int64) {
	p.PatientId = val
}

func (p *ListSamplesRequest) IsSetOffset() bool {
	return p.Offset != nil
}

func (p *ListSamplesRequest) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *ListSamplesRequest) IsSetSampleNo() bool {
	return p.SampleNo != nil
}

func (p *ListSamplesRequest) IsSetPatientId() bool {
	return p.PatientId != nil
}

func (p *ListSamplesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSamplesRequest(%+v)", *p)
}

var fieldIDToName_ListSamplesRequest = map[int16]string{
	1: "offset",
	2: "limit",
	3: "sampleNo",
	4: "patientId",
}

type ListSamplesResponse struct {
	Base    *model.BaseResp     `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Samples []*model.SampleInfo `thrift:"samples,2,required" frugal:"2,required,list<model.SampleInfo>" json:"samples"`
	Total   int64               `thrift:"total,3,required" frugal:"3,required,i64" json:"total"`
}

func NewListSamplesResponse() *ListSamplesResponse {
	return &ListSamplesResponse{}
}

func (p *ListSamplesResponse) InitDefault() {
}

var ListSamplesResponse_Base_DEFAULT *model.BaseResp

func (p *ListSamplesResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ListSamplesResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *ListSamplesResponse) GetSamples() (v []*model.SampleInfo) {
	return p.Samples
}

func (p *ListSamplesResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *ListSamplesResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ListSamplesResponse) SetSamples(val []*model.SampleInfo) {
	p.Samples = val
}
func (p *ListSamplesResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *ListSamplesResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListSamplesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSamplesResponse(%+v)", *p)
}

var fieldIDToName_ListSamplesResponse = map[int16]string{
	1: "Base",
	2: "samples",
	3: "total",
}

type AddStorageInfoRequest struct {
	Storage *model.StorageInfo `thrift:"storage,1,required" frugal:"1,required,model.StorageInfo" json:"storage"`
}

func NewAddStorageInfoRequest() *AddStorageInfoRequest {
	return &AddStorageInfoRequest{}
}

func (p *AddStorageInfoRequest) InitDefault() {
}

var AddStorageInfoRequest_Storage_DEFAULT *model.StorageInfo

func (p *AddStorageInfoRequest) GetStorage() (v *model.StorageInfo) {
	if !p.IsSetStorage() {
		return AddStorageInfoRequest_Storage_DEFAULT
	}
	return p.Storage
}
func (p *AddStorageInfoRequest) SetStorage(val *model.StorageInfo) {
	p.Storage = val
}

func (p *AddStorageInfoRequest) IsSetStorage() bool {
	return p.Storage != nil
}

func (p *AddStorageInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddStorageInfoRequest(%+v)", *p)
}

var fieldIDToName_AddStorageInfoRequest = map[int16]string{
	1: "storage",
}

type AddStorageInfoResponse struct {
	Base      *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	StorageId int64           `thrift:"storageId,2,required" frugal:"2,required,i64" json:"storageId"`
}

func NewAddStorageInfoResponse() *AddStorageInfoResponse {
	return &AddStorageInfoResponse{}
}

func (p *AddStorageInfoResponse) InitDefault() {
}

var AddStorageInfoResponse_Base_DEFAULT *model.BaseResp

func (p *AddStorageInfoResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AddStorageInfoResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *AddStorageInfoResponse) GetStorageId() (v int64) {
	return p.StorageId
}
func (p *AddStorageInfoResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *AddStorageInfoResponse) SetStorageId(val int64) {
	p.StorageId = val
}

func (p *AddStorageInfoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddStorageInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddStorageInfoResponse(%+v)", *p)
}

var fieldIDToName_AddStorageInfoResponse = map[int16]string{
	1: "Base",
	2: "storageId",
}

type GetStorageInfoRequest struct {
	SampleId int64 `thrift:"sampleId,1,required" frugal:"1,required,i64" json:"sampleId"`
}

func NewGetStorageInfoRequest() *GetStorageInfoRequest {
	return &GetStorageInfoRequest{}
}

func (p *GetStorageInfoRequest) InitDefault() {
}

func (p *GetStorageInfoRequest) GetSampleId() (v int64) {
	return p.SampleId
}
func (p *GetStorageInfoRequest) SetSampleId(val int64) {
	p.SampleId = val
}

func (p *GetStorageInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetStorageInfoRequest(%+v)", *p)
}

var fieldIDToName_GetStorageInfoRequest = map[int16]string{
	1: "sampleId",
}

type GetStorageInfoResponse struct {
	Base    *model.BaseResp    `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Storage *model.StorageInfo `thrift:"storage,2,required" frugal:"2,required,model.StorageInfo" json:"storage"`
}

func NewGetStorageInfoResponse() *GetStorageInfoResponse {
	return &GetStorageInfoResponse{}
}

func (p *GetStorageInfoResponse) InitDefault() {
}

var GetStorageInfoResponse_Base_DEFAULT *model.BaseResp

func (p *GetStorageInfoResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetStorageInfoResponse_Base_DEFAULT
	}
	return p.Base
}

var GetStorageInfoResponse_Storage_DEFAULT *model.StorageInfo

func (p *GetStorageInfoResponse) GetStorage() (v *model.StorageInfo) {
	if !p.IsSetStorage() {
		return GetStorageInfoResponse_Storage_DEFAULT
	}
	return p.Storage
}
func (p *GetStorageInfoResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetStorageInfoResponse) SetStorage(val *model.StorageInfo) {
	p.Storage = val
}

func (p *GetStorageInfoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetStorageInfoResponse) IsSetStorage() bool {
	return p.Storage != nil
}

func (p *GetStorageInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetStorageInfoResponse(%+v)", *p)
}

var fieldIDToName_GetStorageInfoResponse = map[int16]string{
	1: "Base",
	2: "storage",
}

type AddGenomicDataRequest struct {
	Data *model.GenomicData `thrift:"data,1,required" frugal:"1,required,model.GenomicData" json:"data"`
}

func NewAddGenomicDataRequest() *AddGenomicDataRequest {
	return &AddGenomicDataRequest{}
}

func (p *AddGenomicDataRequest) InitDefault() {
}

var AddGenomicDataRequest_Data_DEFAULT *model.GenomicData

func (p *AddGenomicDataRequest) GetData() (v *model.GenomicData) {
	if !p.IsSetData() {
		return AddGenomicDataRequest_Data_DEFAULT
	}
	return p.Data
}
func (p *AddGenomicDataRequest) SetData(val *model.GenomicData) {
	p.Data = val
}

func (p *AddGenomicDataRequest) IsSetData() bool {
	return p.Data != nil
}

func (p *AddGenomicDataRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddGenomicDataRequest(%+v)", *p)
}

var fieldIDToName_AddGenomicDataRequest = map[int16]string{
	1: "data",
}

type AddGenomicDataResponse struct {
	Base   *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	DataId int64           `thrift:"dataId,2,required" frugal:"2,required,i64" json:"dataId"`
}

func NewAddGenomicDataResponse() *AddGenomicDataResponse {
	return &AddGenomicDataResponse{}
}

func (p *AddGenomicDataResponse) InitDefault() {
}

var AddGenomicDataResponse_Base_DEFAULT *model.BaseResp

func (p *AddGenomicDataResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AddGenomicDataResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *AddGenomicDataResponse) GetDataId() (v int64) {
	return p.DataId
}
func (p *AddGenomicDataResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *AddGenomicDataResponse) SetDataId(val int64) {
	p.DataId = val
}

func (p *AddGenomicDataResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddGenomicDataResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddGenomicDataResponse(%+v)", *p)
}

var fieldIDToName_AddGenomicDataResponse = map[int16]string{
	1: "Base",
	2: "dataId",
}

type GetSampleGenomicDataRequest struct {
	SampleId int64 `thrift:"sampleId,1,required" frugal:"1,required,i64" json:"sampleId"`
}

func NewGetSampleGenomicDataRequest() *GetSampleGenomicDataRequest {
	return &GetSampleGenomicDataRequest{}
}

func (p *GetSampleGenomicDataRequest) InitDefault() {
}

func (p *GetSampleGenomicDataRequest) GetSampleId() (v int64) {
	return p.SampleId
}
func (p *GetSampleGenomicDataRequest) SetSampleId(val int64) {
	p.SampleId = val
}

func (p *GetSampleGenomicDataRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSampleGenomicDataRequest(%+v)", *p)
}

var fieldIDToName_GetSampleGenomicDataRequest = map[int16]string{
	1: "sampleId",
}

type GetSampleGenomicDataResponse struct {
	Base *model.BaseResp      `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Data []*model.GenomicData `thrift:"data,2,required" frugal:"2,required,list<model.GenomicData>" json:"data"`
}

func NewGetSampleGenomicDataResponse() *GetSampleGenomicDataResponse {
	return &GetSampleGenomicDataResponse{}
}

func (p *GetSampleGenomicDataResponse) InitDefault() {
}

var GetSampleGenomicDataResponse_Base_DEFAULT *model.BaseResp

func (p *GetSampleGenomicDataResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetSampleGenomicDataResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetSampleGenomicDataResponse) GetData() (v []*model.GenomicData) {
	return p.Data
}
func (p *GetSampleGenomicDataResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetSampleGenomicDataResponse) SetData(val []*model.GenomicData) {
	p.Data = val
}

func (p *GetSampleGenomicDataResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetSampleGenomicDataResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSampleGenomicDataResponse(%+v)", *p)
}

var fieldIDToName_GetSampleGenomicDataResponse = map[int16]string{
	1: "Base",
	2: "data",
}

type AddProteomicsDataRequest struct {
	Data *model.ProteomicsData `thrift:"data,1,required" frugal:"1,required,model.ProteomicsData" json:"data"`
}

func NewAddProteomicsDataRequest() *AddProteomicsDataRequest {
	return &AddProteomicsDataRequest{}
}

func (p *AddProteomicsDataRequest) InitDefault() {
}

var AddProteomicsDataRequest_Data_DEFAULT *model.ProteomicsData

func (p *AddProteomicsDataRequest) GetData() (v *model.ProteomicsData) {
	if !p.IsSetData() {
		return AddProteomicsDataRequest_Data_DEFAULT
	}
	return p.Data
}
func (p *AddProteomicsDataRequest) SetData(val *model.ProteomicsData) {
	p.Data = val
}

func (p *AddProteomicsDataRequest) IsSetData() bool {
	return p.Data != nil
}

func (p *AddProteomicsDataRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddProteomicsDataRequest(%+v)", *p)
}

var fieldIDToName_AddProteomicsDataRequest = map[int16]string{
	1: "data",
}

type AddProteomicsDataResponse struct {
	Base   *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	DataId int64           `thrift:"dataId,2,required" frugal:"2,required,i64" json:"dataId"`
}

func NewAddProteomicsDataResponse() *AddProteomicsDataResponse {
	return &AddProteomicsDataResponse{}
}

func (p *AddProteomicsDataResponse) InitDefault() {
}

var AddProteomicsDataResponse_Base_DEFAULT *model.BaseResp

func (p *AddProteomicsDataResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AddProteomicsDataResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *AddProteomicsDataResponse) GetDataId() (v int64) {
	return p.DataId
}
func (p *AddProteomicsDataResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *AddProteomicsDataResponse) SetDataId(val int64) {
	p.DataId = val
}

func (p *AddProteomicsDataResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddProteomicsDataResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddProteomicsDataResponse(%+v)", *p)
}

var fieldIDToName_AddProteomicsDataResponse = map[int16]string{
	1: "Base",
	2: "dataId",
}

type GetSampleProteomicsDataRequest struct {
	SampleId int64 `thrift:"sampleId,1,required" frugal:"1,required,i64" json:"sampleId"`
}

func NewGetSampleProteomicsDataRequest() *GetSampleProteomicsDataRequest {
	return &GetSampleProteomicsDataRequest{}
}

func (p *GetSampleProteomicsDataRequest) InitDefault() {
}

func (p *GetSampleProteomicsDataRequest) GetSampleId() (v int64) {
	return p.SampleId
}
func (p *GetSampleProteomicsDataRequest) SetSampleId(val int64) {
	p.SampleId = val
}

func (p *GetSampleProteomicsDataRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSampleProteomicsDataRequest(%+v)", *p)
}

var fieldIDToName_GetSampleProteomicsDataRequest = map[int16]string{
	1: "sampleId",
}

type GetSampleProteomicsDataResponse struct {
	Base *model.BaseResp         `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Data []*model.ProteomicsData `thrift:"data,2,required" frugal:"2,required,list<model.ProteomicsData>" json:"data"`
}

func NewGetSampleProteomicsDataResponse() *GetSampleProteomicsDataResponse {
	return &GetSampleProteomicsDataResponse{}
}

func (p *GetSampleProteomicsDataResponse) InitDefault() {
}

var GetSampleProteomicsDataResponse_Base_DEFAULT *model.BaseResp

func (p *GetSampleProteomicsDataResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetSampleProteomicsDataResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetSampleProteomicsDataResponse) GetData() (v []*model.ProteomicsData) {
	return p.Data
}
func (p *GetSampleProteomicsDataResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetSampleProteomicsDataResponse) SetData(val []*model.ProteomicsData) {
	p.Data = val
}

func (p *GetSampleProteomicsDataResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetSampleProteomicsDataResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSampleProteomicsDataResponse(%+v)", *p)
}

var fieldIDToName_GetSampleProteomicsDataResponse = map[int16]string{
	1: "Base",
	2: "data",
}

type BiobankService interface {
	CreateSample(ctx context.Context, req *CreateSampleRequest) (r *CreateSampleResponse, err error)

	GetSample(ctx context.Context, req *GetSampleRequest) (r *GetSampleResponse, err error)

	ListSamples(ctx context.Context, req *ListSamplesRequest) (r *ListSamplesResponse, err error)

	GetPatientSamples(ctx context.Context, req *GetPatientSamplesRequest) (r *GetPatientSamplesResponse, err error)

	AddStorageInfo(ctx context.Context, req *AddStorageInfoRequest) (r *AddStorageInfoResponse, err error)

	GetStorageInfo(ctx context.Context, req *GetStorageInfoRequest) (r *GetStorageInfoResponse, err error)

	AddGenomicData(ctx context.Context, req *AddGenomicDataRequest) (r *AddGenomicDataResponse, err error)

	GetSampleGenomicData(ctx context.Context, req *GetSampleGenomicDataRequest) (r *GetSampleGenomicDataResponse, err error)

	AddProteomicsData(ctx context.Context, req *AddProteomicsDataRequest) (r *AddProteomicsDataResponse, err error)

	GetSampleProteomicsData(ctx context.Context, req *GetSampleProteomicsDataRequest) (r *GetSampleProteomicsDataResponse, err error)
}

type BiobankServiceCreateSampleArgs struct {
	Req *CreateSampleRequest `thrift:"req,1" frugal:"1,default,CreateSampleRequest" json:"req"`
}

func NewBiobankServiceCreateSampleArgs() *BiobankServiceCreateSampleArgs {
	return &BiobankServiceCreateSampleArgs{}
}

func (p *BiobankServiceCreateSampleArgs) InitDefault() {
}

var BiobankServiceCreateSampleArgs_Req_DEFAULT *CreateSampleRequest

func (p *BiobankServiceCreateSampleArgs) GetReq() (v *CreateSampleRequest) {
	if !p.IsSetReq() {
		return BiobankServiceCreateSampleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BiobankServiceCreateSampleArgs) SetReq(val *CreateSampleRequest) {
	p.Req = val
}

func (p *BiobankServiceCreateSampleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BiobankServiceCreateSampleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceCreateSampleArgs(%+v)", *p)
}

var fieldIDToName_BiobankServiceCreateSampleArgs = map[int16]string{
	1: "req",
}

type BiobankServiceCreateSampleResult struct {
	Success *CreateSampleResponse `thrift:"success,0,optional" frugal:"0,optional,CreateSampleResponse" json:"success,omitempty"`
}

func NewBiobankServiceCreateSampleResult() *BiobankServiceCreateSampleResult {
	return &BiobankServiceCreateSampleResult{}
}

func (p *BiobankServiceCreateSampleResult) InitDefault() {
}

var BiobankServiceCreateSampleResult_Success_DEFAULT *CreateSampleResponse

func (p *BiobankServiceCreateSampleResult) GetSuccess() (v *CreateSampleResponse) {
	if !p.IsSetSuccess() {
		return BiobankServiceCreateSampleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BiobankServiceCreateSampleResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateSampleResponse)
}

func (p *BiobankServiceCreateSampleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankServiceCreateSampleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceCreateSampleResult(%+v)", *p)
}

var fieldIDToName_BiobankServiceCreateSampleResult = map[int16]string{
	0: "success",
}

type BiobankServiceGetSampleArgs struct {
	Req *GetSampleRequest `thrift:"req,1" frugal:"1,default,GetSampleRequest" json:"req"`
}

func NewBiobankServiceGetSampleArgs() *BiobankServiceGetSampleArgs {
	return &BiobankServiceGetSampleArgs{}
}

func (p *BiobankServiceGetSampleArgs) InitDefault() {
}

var BiobankServiceGetSampleArgs_Req_DEFAULT *GetSampleRequest

func (p *BiobankServiceGetSampleArgs) GetReq() (v *GetSampleRequest) {
	if !p.IsSetReq() {
		return BiobankServiceGetSampleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BiobankServiceGetSampleArgs) SetReq(val *GetSampleRequest) {
	p.Req = val
}

func (p *BiobankServiceGetSampleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BiobankServiceGetSampleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceGetSampleArgs(%+v)", *p)
}

var fieldIDToName_BiobankServiceGetSampleArgs = map[int16]string{
	1: "req",
}

type BiobankServiceGetSampleResult struct {
	Success *GetSampleResponse `thrift:"success,0,optional" frugal:"0,optional,GetSampleResponse" json:"success,omitempty"`
}

func NewBiobankServiceGetSampleResult() *BiobankServiceGetSampleResult {
	return &BiobankServiceGetSampleResult{}
}

func (p *BiobankServiceGetSampleResult) InitDefault() {
}

var BiobankServiceGetSampleResult_Success_DEFAULT *GetSampleResponse

func (p *BiobankServiceGetSampleResult) GetSuccess() (v *GetSampleResponse) {
	if !p.IsSetSuccess() {
		return BiobankServiceGetSampleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BiobankServiceGetSampleResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSampleResponse)
}

func (p *BiobankServiceGetSampleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankServiceGetSampleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceGetSampleResult(%+v)", *p)
}

var fieldIDToName_BiobankServiceGetSampleResult = map[int16]string{
	0: "success",
}

type BiobankServiceListSamplesArgs struct {
	Req *ListSamplesRequest `thrift:"req,1" frugal:"1,default,ListSamplesRequest" json:"req"`
}

func NewBiobankServiceListSamplesArgs() *BiobankServiceListSamplesArgs {
	return &BiobankServiceListSamplesArgs{}
}

func (p *BiobankServiceListSamplesArgs) InitDefault() {
}

var BiobankServiceListSamplesArgs_Req_DEFAULT *ListSamplesRequest

func (p *BiobankServiceListSamplesArgs) GetReq() (v *ListSamplesRequest) {
	if !p.IsSetReq() {
		return BiobankServiceListSamplesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BiobankServiceListSamplesArgs) SetReq(val *ListSamplesRequest) {
	p.Req = val
}

func (p *BiobankServiceListSamplesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BiobankServiceListSamplesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceListSamplesArgs(%+v)", *p)
}

var fieldIDToName_BiobankServiceListSamplesArgs = map[int16]string{
	1: "req",
}

type BiobankServiceListSamplesResult struct {
	Success *ListSamplesResponse `thrift:"success,0,optional" frugal:"0,optional,ListSamplesResponse" json:"success,omitempty"`
}

func NewBiobankServiceListSamplesResult() *BiobankServiceListSamplesResult {
	return &BiobankServiceListSamplesResult{}
}

func (p *BiobankServiceListSamplesResult) InitDefault() {
}

var BiobankServiceListSamplesResult_Success_DEFAULT *ListSamplesResponse

func (p *BiobankServiceListSamplesResult) GetSuccess() (v *ListSamplesResponse) {
	if !p.IsSetSuccess() {
		return BiobankServiceListSamplesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BiobankServiceListSamplesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListSamplesResponse)
}

func (p *BiobankServiceListSamplesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankServiceListSamplesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceListSamplesResult(%+v)", *p)
}

var fieldIDToName_BiobankServiceListSamplesResult = map[int16]string{
	0: "success",
}

type BiobankServiceGetPatientSamplesArgs struct {
	Req *GetPatientSamplesRequest `thrift:"req,1" frugal:"1,default,GetPatientSamplesRequest" json:"req"`
}

func NewBiobankServiceGetPatientSamplesArgs() *BiobankServiceGetPatientSamplesArgs {
	return &BiobankServiceGetPatientSamplesArgs{}
}

func (p *BiobankServiceGetPatientSamplesArgs) InitDefault() {
}

var BiobankServiceGetPatientSamplesArgs_Req_DEFAULT *GetPatientSamplesRequest

func (p *BiobankServiceGetPatientSamplesArgs) GetReq() (v *GetPatientSamplesRequest) {
	if !p.IsSetReq() {
		return BiobankServiceGetPatientSamplesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BiobankServiceGetPatientSamplesArgs) SetReq(val *GetPatientSamplesRequest) {
	p.Req = val
}

func (p *BiobankServiceGetPatientSamplesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BiobankServiceGetPatientSamplesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceGetPatientSamplesArgs(%+v)", *p)
}

var fieldIDToName_BiobankServiceGetPatientSamplesArgs = map[int16]string{
	1: "req",
}

type BiobankServiceGetPatientSamplesResult struct {
	Success *GetPatientSamplesResponse `thrift:"success,0,optional" frugal:"0,optional,GetPatientSamplesResponse" json:"success,omitempty"`
}

func NewBiobankServiceGetPatientSamplesResult() *BiobankServiceGetPatientSamplesResult {
	return &BiobankServiceGetPatientSamplesResult{}
}

func (p *BiobankServiceGetPatientSamplesResult) InitDefault() {
}

var BiobankServiceGetPatientSamplesResult_Success_DEFAULT *GetPatientSamplesResponse

func (p *BiobankServiceGetPatientSamplesResult) GetSuccess() (v *GetPatientSamplesResponse) {
	if !p.IsSetSuccess() {
		return BiobankServiceGetPatientSamplesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BiobankServiceGetPatientSamplesResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPatientSamplesResponse)
}

func (p *BiobankServiceGetPatientSamplesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankServiceGetPatientSamplesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceGetPatientSamplesResult(%+v)", *p)
}

var fieldIDToName_BiobankServiceGetPatientSamplesResult = map[int16]string{
	0: "success",
}

type BiobankServiceAddStorageInfoArgs struct {
	Req *AddStorageInfoRequest `thrift:"req,1" frugal:"1,default,AddStorageInfoRequest" json:"req"`
}

func NewBiobankServiceAddStorageInfoArgs() *BiobankServiceAddStorageInfoArgs {
	return &BiobankServiceAddStorageInfoArgs{}
}

func (p *BiobankServiceAddStorageInfoArgs) InitDefault() {
}

var BiobankServiceAddStorageInfoArgs_Req_DEFAULT *AddStorageInfoRequest

func (p *BiobankServiceAddStorageInfoArgs) GetReq() (v *AddStorageInfoRequest) {
	if !p.IsSetReq() {
		return BiobankServiceAddStorageInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BiobankServiceAddStorageInfoArgs) SetReq(val *AddStorageInfoRequest) {
	p.Req = val
}

func (p *BiobankServiceAddStorageInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BiobankServiceAddStorageInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceAddStorageInfoArgs(%+v)", *p)
}

var fieldIDToName_BiobankServiceAddStorageInfoArgs = map[int16]string{
	1: "req",
}

type BiobankServiceAddStorageInfoResult struct {
	Success *AddStorageInfoResponse `thrift:"success,0,optional" frugal:"0,optional,AddStorageInfoResponse" json:"success,omitempty"`
}

func NewBiobankServiceAddStorageInfoResult() *BiobankServiceAddStorageInfoResult {
	return &BiobankServiceAddStorageInfoResult{}
}

func (p *BiobankServiceAddStorageInfoResult) InitDefault() {
}

var BiobankServiceAddStorageInfoResult_Success_DEFAULT *AddStorageInfoResponse

func (p *BiobankServiceAddStorageInfoResult) GetSuccess() (v *AddStorageInfoResponse) {
	if !p.IsSetSuccess() {
		return BiobankServiceAddStorageInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BiobankServiceAddStorageInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddStorageInfoResponse)
}

func (p *BiobankServiceAddStorageInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankServiceAddStorageInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceAddStorageInfoResult(%+v)", *p)
}

var fieldIDToName_BiobankServiceAddStorageInfoResult = map[int16]string{
	0: "success",
}

type BiobankServiceGetStorageInfoArgs struct {
	Req *GetStorageInfoRequest `thrift:"req,1" frugal:"1,default,GetStorageInfoRequest" json:"req"`
}

func NewBiobankServiceGetStorageInfoArgs() *BiobankServiceGetStorageInfoArgs {
	return &BiobankServiceGetStorageInfoArgs{}
}

func (p *BiobankServiceGetStorageInfoArgs) InitDefault() {
}

var BiobankServiceGetStorageInfoArgs_Req_DEFAULT *GetStorageInfoRequest

func (p *BiobankServiceGetStorageInfoArgs) GetReq() (v *GetStorageInfoRequest) {
	if !p.IsSetReq() {
		return BiobankServiceGetStorageInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BiobankServiceGetStorageInfoArgs) SetReq(val *GetStorageInfoRequest) {
	p.Req = val
}

func (p *BiobankServiceGetStorageInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BiobankServiceGetStorageInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceGetStorageInfoArgs(%+v)", *p)
}

var fieldIDToName_BiobankServiceGetStorageInfoArgs = map[int16]string{
	1: "req",
}

type BiobankServiceGetStorageInfoResult struct {
	Success *GetStorageInfoResponse `thrift:"success,0,optional" frugal:"0,optional,GetStorageInfoResponse" json:"success,omitempty"`
}

func NewBiobankServiceGetStorageInfoResult() *BiobankServiceGetStorageInfoResult {
	return &BiobankServiceGetStorageInfoResult{}
}

func (p *BiobankServiceGetStorageInfoResult) InitDefault() {
}

var BiobankServiceGetStorageInfoResult_Success_DEFAULT *GetStorageInfoResponse

func (p *BiobankServiceGetStorageInfoResult) GetSuccess() (v *GetStorageInfoResponse) {
	if !p.IsSetSuccess() {
		return BiobankServiceGetStorageInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BiobankServiceGetStorageInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetStorageInfoResponse)
}

func (p *BiobankServiceGetStorageInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankServiceGetStorageInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceGetStorageInfoResult(%+v)", *p)
}

var fieldIDToName_BiobankServiceGetStorageInfoResult = map[int16]string{
	0: "success",
}

type BiobankServiceAddGenomicDataArgs struct {
	Req *AddGenomicDataRequest `thrift:"req,1" frugal:"1,default,AddGenomicDataRequest" json:"req"`
}

func NewBiobankServiceAddGenomicDataArgs() *BiobankServiceAddGenomicDataArgs {
	return &BiobankServiceAddGenomicDataArgs{}
}

func (p *BiobankServiceAddGenomicDataArgs) InitDefault() {
}

var BiobankServiceAddGenomicDataArgs_Req_DEFAULT *AddGenomicDataRequest

func (p *BiobankServiceAddGenomicDataArgs) GetReq() (v *AddGenomicDataRequest) {
	if !p.IsSetReq() {
		return BiobankServiceAddGenomicDataArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BiobankServiceAddGenomicDataArgs) SetReq(val *AddGenomicDataRequest) {
	p.Req = val
}

func (p *BiobankServiceAddGenomicDataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BiobankServiceAddGenomicDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceAddGenomicDataArgs(%+v)", *p)
}

var fieldIDToName_BiobankServiceAddGenomicDataArgs = map[int16]string{
	1: "req",
}

type BiobankServiceAddGenomicDataResult struct {
	Success *AddGenomicDataResponse `thrift:"success,0,optional" frugal:"0,optional,AddGenomicDataResponse" json:"success,omitempty"`
}

func NewBiobankServiceAddGenomicDataResult() *BiobankServiceAddGenomicDataResult {
	return &BiobankServiceAddGenomicDataResult{}
}

func (p *BiobankServiceAddGenomicDataResult) InitDefault() {
}

var BiobankServiceAddGenomicDataResult_Success_DEFAULT *AddGenomicDataResponse

func (p *BiobankServiceAddGenomicDataResult) GetSuccess() (v *AddGenomicDataResponse) {
	if !p.IsSetSuccess() {
		return BiobankServiceAddGenomicDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BiobankServiceAddGenomicDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddGenomicDataResponse)
}

func (p *BiobankServiceAddGenomicDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankServiceAddGenomicDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceAddGenomicDataResult(%+v)", *p)
}

var fieldIDToName_BiobankServiceAddGenomicDataResult = map[int16]string{
	0: "success",
}

type BiobankServiceGetSampleGenomicDataArgs struct {
	Req *GetSampleGenomicDataRequest `thrift:"req,1" frugal:"1,default,GetSampleGenomicDataRequest" json:"req"`
}

func NewBiobankServiceGetSampleGenomicDataArgs() *BiobankServiceGetSampleGenomicDataArgs {
	return &BiobankServiceGetSampleGenomicDataArgs{}
}

func (p *BiobankServiceGetSampleGenomicDataArgs) InitDefault() {
}

var BiobankServiceGetSampleGenomicDataArgs_Req_DEFAULT *GetSampleGenomicDataRequest

func (p *BiobankServiceGetSampleGenomicDataArgs) GetReq() (v *GetSampleGenomicDataRequest) {
	if !p.IsSetReq() {
		return BiobankServiceGetSampleGenomicDataArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BiobankServiceGetSampleGenomicDataArgs) SetReq(val *GetSampleGenomicDataRequest) {
	p.Req = val
}

func (p *BiobankServiceGetSampleGenomicDataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BiobankServiceGetSampleGenomicDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceGetSampleGenomicDataArgs(%+v)", *p)
}

var fieldIDToName_BiobankServiceGetSampleGenomicDataArgs = map[int16]string{
	1: "req",
}

type BiobankServiceGetSampleGenomicDataResult struct {
	Success *GetSampleGenomicDataResponse `thrift:"success,0,optional" frugal:"0,optional,GetSampleGenomicDataResponse" json:"success,omitempty"`
}

func NewBiobankServiceGetSampleGenomicDataResult() *BiobankServiceGetSampleGenomicDataResult {
	return &BiobankServiceGetSampleGenomicDataResult{}
}

func (p *BiobankServiceGetSampleGenomicDataResult) InitDefault() {
}

var BiobankServiceGetSampleGenomicDataResult_Success_DEFAULT *GetSampleGenomicDataResponse

func (p *BiobankServiceGetSampleGenomicDataResult) GetSuccess() (v *GetSampleGenomicDataResponse) {
	if !p.IsSetSuccess() {
		return BiobankServiceGetSampleGenomicDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BiobankServiceGetSampleGenomicDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSampleGenomicDataResponse)
}

func (p *BiobankServiceGetSampleGenomicDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankServiceGetSampleGenomicDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceGetSampleGenomicDataResult(%+v)", *p)
}

var fieldIDToName_BiobankServiceGetSampleGenomicDataResult = map[int16]string{
	0: "success",
}

type BiobankServiceAddProteomicsDataArgs struct {
	Req *AddProteomicsDataRequest `thrift:"req,1" frugal:"1,default,AddProteomicsDataRequest" json:"req"`
}

func NewBiobankServiceAddProteomicsDataArgs() *BiobankServiceAddProteomicsDataArgs {
	return &BiobankServiceAddProteomicsDataArgs{}
}

func (p *BiobankServiceAddProteomicsDataArgs) InitDefault() {
}

var BiobankServiceAddProteomicsDataArgs_Req_DEFAULT *AddProteomicsDataRequest

func (p *BiobankServiceAddProteomicsDataArgs) GetReq() (v *AddProteomicsDataRequest) {
	if !p.IsSetReq() {
		return BiobankServiceAddProteomicsDataArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BiobankServiceAddProteomicsDataArgs) SetReq(val *AddProteomicsDataRequest) {
	p.Req = val
}

func (p *BiobankServiceAddProteomicsDataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BiobankServiceAddProteomicsDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceAddProteomicsDataArgs(%+v)", *p)
}

var fieldIDToName_BiobankServiceAddProteomicsDataArgs = map[int16]string{
	1: "req",
}

type BiobankServiceAddProteomicsDataResult struct {
	Success *AddProteomicsDataResponse `thrift:"success,0,optional" frugal:"0,optional,AddProteomicsDataResponse" json:"success,omitempty"`
}

func NewBiobankServiceAddProteomicsDataResult() *BiobankServiceAddProteomicsDataResult {
	return &BiobankServiceAddProteomicsDataResult{}
}

func (p *BiobankServiceAddProteomicsDataResult) InitDefault() {
}

var BiobankServiceAddProteomicsDataResult_Success_DEFAULT *AddProteomicsDataResponse

func (p *BiobankServiceAddProteomicsDataResult) GetSuccess() (v *AddProteomicsDataResponse) {
	if !p.IsSetSuccess() {
		return BiobankServiceAddProteomicsDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BiobankServiceAddProteomicsDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddProteomicsDataResponse)
}

func (p *BiobankServiceAddProteomicsDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankServiceAddProteomicsDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceAddProteomicsDataResult(%+v)", *p)
}

var fieldIDToName_BiobankServiceAddProteomicsDataResult = map[int16]string{
	0: "success",
}

type BiobankServiceGetSampleProteomicsDataArgs struct {
	Req *GetSampleProteomicsDataRequest `thrift:"req,1" frugal:"1,default,GetSampleProteomicsDataRequest" json:"req"`
}

func NewBiobankServiceGetSampleProteomicsDataArgs() *BiobankServiceGetSampleProteomicsDataArgs {
	return &BiobankServiceGetSampleProteomicsDataArgs{}
}

func (p *BiobankServiceGetSampleProteomicsDataArgs) InitDefault() {
}

var BiobankServiceGetSampleProteomicsDataArgs_Req_DEFAULT *GetSampleProteomicsDataRequest

func (p *BiobankServiceGetSampleProteomicsDataArgs) GetReq() (v *GetSampleProteomicsDataRequest) {
	if !p.IsSetReq() {
		return BiobankServiceGetSampleProteomicsDataArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BiobankServiceGetSampleProteomicsDataArgs) SetReq(val *GetSampleProteomicsDataRequest) {
	p.Req = val
}

func (p *BiobankServiceGetSampleProteomicsDataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BiobankServiceGetSampleProteomicsDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceGetSampleProteomicsDataArgs(%+v)", *p)
}

var fieldIDToName_BiobankServiceGetSampleProteomicsDataArgs = map[int16]string{
	1: "req",
}

type BiobankServiceGetSampleProteomicsDataResult struct {
	Success *GetSampleProteomicsDataResponse `thrift:"success,0,optional" frugal:"0,optional,GetSampleProteomicsDataResponse" json:"success,omitempty"`
}

func NewBiobankServiceGetSampleProteomicsDataResult() *BiobankServiceGetSampleProteomicsDataResult {
	return &BiobankServiceGetSampleProteomicsDataResult{}
}

func (p *BiobankServiceGetSampleProteomicsDataResult) InitDefault() {
}

var BiobankServiceGetSampleProteomicsDataResult_Success_DEFAULT *GetSampleProteomicsDataResponse

func (p *BiobankServiceGetSampleProteomicsDataResult) GetSuccess() (v *GetSampleProteomicsDataResponse) {
	if !p.IsSetSuccess() {
		return BiobankServiceGetSampleProteomicsDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BiobankServiceGetSampleProteomicsDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSampleProteomicsDataResponse)
}

func (p *BiobankServiceGetSampleProteomicsDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BiobankServiceGetSampleProteomicsDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiobankServiceGetSampleProteomicsDataResult(%+v)", *p)
}

var fieldIDToName_BiobankServiceGetSampleProteomicsDataResult = map[int16]string{
	0: "success",
}
