// Code generated by Kitex v0.13.1. DO NOT EDIT.

package biobankservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	biobank "github.com/yxrxy/AllergyBase/kitex_gen/biobank"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateSample": kitex.NewMethodInfo(
		createSampleHandler,
		newBiobankServiceCreateSampleArgs,
		newBiobankServiceCreateSampleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSample": kitex.NewMethodInfo(
		getSampleHandler,
		newBiobankServiceGetSampleArgs,
		newBiobankServiceGetSampleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListSamples": kitex.NewMethodInfo(
		listSamplesHandler,
		newBiobankServiceListSamplesArgs,
		newBiobankServiceListSamplesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPatientSamples": kitex.NewMethodInfo(
		getPatientSamplesHandler,
		newBiobankServiceGetPatientSamplesArgs,
		newBiobankServiceGetPatientSamplesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AddStorageInfo": kitex.NewMethodInfo(
		addStorageInfoHandler,
		newBiobankServiceAddStorageInfoArgs,
		newBiobankServiceAddStorageInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetStorageInfo": kitex.NewMethodInfo(
		getStorageInfoHandler,
		newBiobankServiceGetStorageInfoArgs,
		newBiobankServiceGetStorageInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AddGenomicData": kitex.NewMethodInfo(
		addGenomicDataHandler,
		newBiobankServiceAddGenomicDataArgs,
		newBiobankServiceAddGenomicDataResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSampleGenomicData": kitex.NewMethodInfo(
		getSampleGenomicDataHandler,
		newBiobankServiceGetSampleGenomicDataArgs,
		newBiobankServiceGetSampleGenomicDataResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AddProteomicsData": kitex.NewMethodInfo(
		addProteomicsDataHandler,
		newBiobankServiceAddProteomicsDataArgs,
		newBiobankServiceAddProteomicsDataResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSampleProteomicsData": kitex.NewMethodInfo(
		getSampleProteomicsDataHandler,
		newBiobankServiceGetSampleProteomicsDataArgs,
		newBiobankServiceGetSampleProteomicsDataResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	biobankServiceServiceInfo                = NewServiceInfo()
	biobankServiceServiceInfoForClient       = NewServiceInfoForClient()
	biobankServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return biobankServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return biobankServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return biobankServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "BiobankService"
	handlerType := (*biobank.BiobankService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "biobank",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func createSampleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biobank.BiobankServiceCreateSampleArgs)
	realResult := result.(*biobank.BiobankServiceCreateSampleResult)
	success, err := handler.(biobank.BiobankService).CreateSample(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBiobankServiceCreateSampleArgs() interface{} {
	return biobank.NewBiobankServiceCreateSampleArgs()
}

func newBiobankServiceCreateSampleResult() interface{} {
	return biobank.NewBiobankServiceCreateSampleResult()
}

func getSampleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biobank.BiobankServiceGetSampleArgs)
	realResult := result.(*biobank.BiobankServiceGetSampleResult)
	success, err := handler.(biobank.BiobankService).GetSample(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBiobankServiceGetSampleArgs() interface{} {
	return biobank.NewBiobankServiceGetSampleArgs()
}

func newBiobankServiceGetSampleResult() interface{} {
	return biobank.NewBiobankServiceGetSampleResult()
}

func listSamplesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biobank.BiobankServiceListSamplesArgs)
	realResult := result.(*biobank.BiobankServiceListSamplesResult)
	success, err := handler.(biobank.BiobankService).ListSamples(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBiobankServiceListSamplesArgs() interface{} {
	return biobank.NewBiobankServiceListSamplesArgs()
}

func newBiobankServiceListSamplesResult() interface{} {
	return biobank.NewBiobankServiceListSamplesResult()
}

func getPatientSamplesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biobank.BiobankServiceGetPatientSamplesArgs)
	realResult := result.(*biobank.BiobankServiceGetPatientSamplesResult)
	success, err := handler.(biobank.BiobankService).GetPatientSamples(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBiobankServiceGetPatientSamplesArgs() interface{} {
	return biobank.NewBiobankServiceGetPatientSamplesArgs()
}

func newBiobankServiceGetPatientSamplesResult() interface{} {
	return biobank.NewBiobankServiceGetPatientSamplesResult()
}

func addStorageInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biobank.BiobankServiceAddStorageInfoArgs)
	realResult := result.(*biobank.BiobankServiceAddStorageInfoResult)
	success, err := handler.(biobank.BiobankService).AddStorageInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBiobankServiceAddStorageInfoArgs() interface{} {
	return biobank.NewBiobankServiceAddStorageInfoArgs()
}

func newBiobankServiceAddStorageInfoResult() interface{} {
	return biobank.NewBiobankServiceAddStorageInfoResult()
}

func getStorageInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biobank.BiobankServiceGetStorageInfoArgs)
	realResult := result.(*biobank.BiobankServiceGetStorageInfoResult)
	success, err := handler.(biobank.BiobankService).GetStorageInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBiobankServiceGetStorageInfoArgs() interface{} {
	return biobank.NewBiobankServiceGetStorageInfoArgs()
}

func newBiobankServiceGetStorageInfoResult() interface{} {
	return biobank.NewBiobankServiceGetStorageInfoResult()
}

func addGenomicDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biobank.BiobankServiceAddGenomicDataArgs)
	realResult := result.(*biobank.BiobankServiceAddGenomicDataResult)
	success, err := handler.(biobank.BiobankService).AddGenomicData(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBiobankServiceAddGenomicDataArgs() interface{} {
	return biobank.NewBiobankServiceAddGenomicDataArgs()
}

func newBiobankServiceAddGenomicDataResult() interface{} {
	return biobank.NewBiobankServiceAddGenomicDataResult()
}

func getSampleGenomicDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biobank.BiobankServiceGetSampleGenomicDataArgs)
	realResult := result.(*biobank.BiobankServiceGetSampleGenomicDataResult)
	success, err := handler.(biobank.BiobankService).GetSampleGenomicData(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBiobankServiceGetSampleGenomicDataArgs() interface{} {
	return biobank.NewBiobankServiceGetSampleGenomicDataArgs()
}

func newBiobankServiceGetSampleGenomicDataResult() interface{} {
	return biobank.NewBiobankServiceGetSampleGenomicDataResult()
}

func addProteomicsDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biobank.BiobankServiceAddProteomicsDataArgs)
	realResult := result.(*biobank.BiobankServiceAddProteomicsDataResult)
	success, err := handler.(biobank.BiobankService).AddProteomicsData(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBiobankServiceAddProteomicsDataArgs() interface{} {
	return biobank.NewBiobankServiceAddProteomicsDataArgs()
}

func newBiobankServiceAddProteomicsDataResult() interface{} {
	return biobank.NewBiobankServiceAddProteomicsDataResult()
}

func getSampleProteomicsDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biobank.BiobankServiceGetSampleProteomicsDataArgs)
	realResult := result.(*biobank.BiobankServiceGetSampleProteomicsDataResult)
	success, err := handler.(biobank.BiobankService).GetSampleProteomicsData(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBiobankServiceGetSampleProteomicsDataArgs() interface{} {
	return biobank.NewBiobankServiceGetSampleProteomicsDataArgs()
}

func newBiobankServiceGetSampleProteomicsDataResult() interface{} {
	return biobank.NewBiobankServiceGetSampleProteomicsDataResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateSample(ctx context.Context, req *biobank.CreateSampleRequest) (r *biobank.CreateSampleResponse, err error) {
	var _args biobank.BiobankServiceCreateSampleArgs
	_args.Req = req
	var _result biobank.BiobankServiceCreateSampleResult
	if err = p.c.Call(ctx, "CreateSample", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSample(ctx context.Context, req *biobank.GetSampleRequest) (r *biobank.GetSampleResponse, err error) {
	var _args biobank.BiobankServiceGetSampleArgs
	_args.Req = req
	var _result biobank.BiobankServiceGetSampleResult
	if err = p.c.Call(ctx, "GetSample", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSamples(ctx context.Context, req *biobank.ListSamplesRequest) (r *biobank.ListSamplesResponse, err error) {
	var _args biobank.BiobankServiceListSamplesArgs
	_args.Req = req
	var _result biobank.BiobankServiceListSamplesResult
	if err = p.c.Call(ctx, "ListSamples", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPatientSamples(ctx context.Context, req *biobank.GetPatientSamplesRequest) (r *biobank.GetPatientSamplesResponse, err error) {
	var _args biobank.BiobankServiceGetPatientSamplesArgs
	_args.Req = req
	var _result biobank.BiobankServiceGetPatientSamplesResult
	if err = p.c.Call(ctx, "GetPatientSamples", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddStorageInfo(ctx context.Context, req *biobank.AddStorageInfoRequest) (r *biobank.AddStorageInfoResponse, err error) {
	var _args biobank.BiobankServiceAddStorageInfoArgs
	_args.Req = req
	var _result biobank.BiobankServiceAddStorageInfoResult
	if err = p.c.Call(ctx, "AddStorageInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetStorageInfo(ctx context.Context, req *biobank.GetStorageInfoRequest) (r *biobank.GetStorageInfoResponse, err error) {
	var _args biobank.BiobankServiceGetStorageInfoArgs
	_args.Req = req
	var _result biobank.BiobankServiceGetStorageInfoResult
	if err = p.c.Call(ctx, "GetStorageInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddGenomicData(ctx context.Context, req *biobank.AddGenomicDataRequest) (r *biobank.AddGenomicDataResponse, err error) {
	var _args biobank.BiobankServiceAddGenomicDataArgs
	_args.Req = req
	var _result biobank.BiobankServiceAddGenomicDataResult
	if err = p.c.Call(ctx, "AddGenomicData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSampleGenomicData(ctx context.Context, req *biobank.GetSampleGenomicDataRequest) (r *biobank.GetSampleGenomicDataResponse, err error) {
	var _args biobank.BiobankServiceGetSampleGenomicDataArgs
	_args.Req = req
	var _result biobank.BiobankServiceGetSampleGenomicDataResult
	if err = p.c.Call(ctx, "GetSampleGenomicData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddProteomicsData(ctx context.Context, req *biobank.AddProteomicsDataRequest) (r *biobank.AddProteomicsDataResponse, err error) {
	var _args biobank.BiobankServiceAddProteomicsDataArgs
	_args.Req = req
	var _result biobank.BiobankServiceAddProteomicsDataResult
	if err = p.c.Call(ctx, "AddProteomicsData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSampleProteomicsData(ctx context.Context, req *biobank.GetSampleProteomicsDataRequest) (r *biobank.GetSampleProteomicsDataResponse, err error) {
	var _args biobank.BiobankServiceGetSampleProteomicsDataArgs
	_args.Req = req
	var _result biobank.BiobankServiceGetSampleProteomicsDataResult
	if err = p.c.Call(ctx, "GetSampleProteomicsData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
