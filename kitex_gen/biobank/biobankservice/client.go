// Code generated by Kitex v0.13.1. DO NOT EDIT.

package biobankservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	biobank "github.com/yxrxy/AllergyBase/kitex_gen/biobank"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateSample(ctx context.Context, req *biobank.CreateSampleRequest, callOptions ...callopt.Option) (r *biobank.CreateSampleResponse, err error)
	GetSample(ctx context.Context, req *biobank.GetSampleRequest, callOptions ...callopt.Option) (r *biobank.GetSampleResponse, err error)
	ListSamples(ctx context.Context, req *biobank.ListSamplesRequest, callOptions ...callopt.Option) (r *biobank.ListSamplesResponse, err error)
	GetPatientSamples(ctx context.Context, req *biobank.GetPatientSamplesRequest, callOptions ...callopt.Option) (r *biobank.GetPatientSamplesResponse, err error)
	AddStorageInfo(ctx context.Context, req *biobank.AddStorageInfoRequest, callOptions ...callopt.Option) (r *biobank.AddStorageInfoResponse, err error)
	GetStorageInfo(ctx context.Context, req *biobank.GetStorageInfoRequest, callOptions ...callopt.Option) (r *biobank.GetStorageInfoResponse, err error)
	AddGenomicData(ctx context.Context, req *biobank.AddGenomicDataRequest, callOptions ...callopt.Option) (r *biobank.AddGenomicDataResponse, err error)
	GetSampleGenomicData(ctx context.Context, req *biobank.GetSampleGenomicDataRequest, callOptions ...callopt.Option) (r *biobank.GetSampleGenomicDataResponse, err error)
	AddProteomicsData(ctx context.Context, req *biobank.AddProteomicsDataRequest, callOptions ...callopt.Option) (r *biobank.AddProteomicsDataResponse, err error)
	GetSampleProteomicsData(ctx context.Context, req *biobank.GetSampleProteomicsDataRequest, callOptions ...callopt.Option) (r *biobank.GetSampleProteomicsDataResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kBiobankServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kBiobankServiceClient struct {
	*kClient
}

func (p *kBiobankServiceClient) CreateSample(ctx context.Context, req *biobank.CreateSampleRequest, callOptions ...callopt.Option) (r *biobank.CreateSampleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateSample(ctx, req)
}

func (p *kBiobankServiceClient) GetSample(ctx context.Context, req *biobank.GetSampleRequest, callOptions ...callopt.Option) (r *biobank.GetSampleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSample(ctx, req)
}

func (p *kBiobankServiceClient) ListSamples(ctx context.Context, req *biobank.ListSamplesRequest, callOptions ...callopt.Option) (r *biobank.ListSamplesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListSamples(ctx, req)
}

func (p *kBiobankServiceClient) GetPatientSamples(ctx context.Context, req *biobank.GetPatientSamplesRequest, callOptions ...callopt.Option) (r *biobank.GetPatientSamplesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPatientSamples(ctx, req)
}

func (p *kBiobankServiceClient) AddStorageInfo(ctx context.Context, req *biobank.AddStorageInfoRequest, callOptions ...callopt.Option) (r *biobank.AddStorageInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddStorageInfo(ctx, req)
}

func (p *kBiobankServiceClient) GetStorageInfo(ctx context.Context, req *biobank.GetStorageInfoRequest, callOptions ...callopt.Option) (r *biobank.GetStorageInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetStorageInfo(ctx, req)
}

func (p *kBiobankServiceClient) AddGenomicData(ctx context.Context, req *biobank.AddGenomicDataRequest, callOptions ...callopt.Option) (r *biobank.AddGenomicDataResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddGenomicData(ctx, req)
}

func (p *kBiobankServiceClient) GetSampleGenomicData(ctx context.Context, req *biobank.GetSampleGenomicDataRequest, callOptions ...callopt.Option) (r *biobank.GetSampleGenomicDataResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSampleGenomicData(ctx, req)
}

func (p *kBiobankServiceClient) AddProteomicsData(ctx context.Context, req *biobank.AddProteomicsDataRequest, callOptions ...callopt.Option) (r *biobank.AddProteomicsDataResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddProteomicsData(ctx, req)
}

func (p *kBiobankServiceClient) GetSampleProteomicsData(ctx context.Context, req *biobank.GetSampleProteomicsDataRequest, callOptions ...callopt.Option) (r *biobank.GetSampleProteomicsDataResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSampleProteomicsData(ctx, req)
}
