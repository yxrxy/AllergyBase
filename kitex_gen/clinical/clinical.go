// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package clinical

import (
	"context"
	"fmt"
	"github.com/yxrxy/AllergyBase/kitex_gen/model"
)

type CreatePatientRequest struct {
	Patient *model.Patient `thrift:"patient,1,required" frugal:"1,required,model.Patient" json:"patient"`
}

func NewCreatePatientRequest() *CreatePatientRequest {
	return &CreatePatientRequest{}
}

func (p *CreatePatientRequest) InitDefault() {
}

var CreatePatientRequest_Patient_DEFAULT *model.Patient

func (p *CreatePatientRequest) GetPatient() (v *model.Patient) {
	if !p.IsSetPatient() {
		return CreatePatientRequest_Patient_DEFAULT
	}
	return p.Patient
}
func (p *CreatePatientRequest) SetPatient(val *model.Patient) {
	p.Patient = val
}

func (p *CreatePatientRequest) IsSetPatient() bool {
	return p.Patient != nil
}

func (p *CreatePatientRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePatientRequest(%+v)", *p)
}

var fieldIDToName_CreatePatientRequest = map[int16]string{
	1: "patient",
}

type CreatePatientResponse struct {
	Base      *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	PatientId int64           `thrift:"patientId,2,required" frugal:"2,required,i64" json:"patientId"`
}

func NewCreatePatientResponse() *CreatePatientResponse {
	return &CreatePatientResponse{}
}

func (p *CreatePatientResponse) InitDefault() {
}

var CreatePatientResponse_Base_DEFAULT *model.BaseResp

func (p *CreatePatientResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreatePatientResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *CreatePatientResponse) GetPatientId() (v int64) {
	return p.PatientId
}
func (p *CreatePatientResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreatePatientResponse) SetPatientId(val int64) {
	p.PatientId = val
}

func (p *CreatePatientResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreatePatientResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePatientResponse(%+v)", *p)
}

var fieldIDToName_CreatePatientResponse = map[int16]string{
	1: "Base",
	2: "patientId",
}

type GetPatientRequest struct {
	PatientId int64 `thrift:"patientId,1,required" frugal:"1,required,i64" json:"patientId"`
}

func NewGetPatientRequest() *GetPatientRequest {
	return &GetPatientRequest{}
}

func (p *GetPatientRequest) InitDefault() {
}

func (p *GetPatientRequest) GetPatientId() (v int64) {
	return p.PatientId
}
func (p *GetPatientRequest) SetPatientId(val int64) {
	p.PatientId = val
}

func (p *GetPatientRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPatientRequest(%+v)", *p)
}

var fieldIDToName_GetPatientRequest = map[int16]string{
	1: "patientId",
}

type GetPatientResponse struct {
	Base    *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Patient *model.Patient  `thrift:"patient,2,required" frugal:"2,required,model.Patient" json:"patient"`
}

func NewGetPatientResponse() *GetPatientResponse {
	return &GetPatientResponse{}
}

func (p *GetPatientResponse) InitDefault() {
}

var GetPatientResponse_Base_DEFAULT *model.BaseResp

func (p *GetPatientResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetPatientResponse_Base_DEFAULT
	}
	return p.Base
}

var GetPatientResponse_Patient_DEFAULT *model.Patient

func (p *GetPatientResponse) GetPatient() (v *model.Patient) {
	if !p.IsSetPatient() {
		return GetPatientResponse_Patient_DEFAULT
	}
	return p.Patient
}
func (p *GetPatientResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetPatientResponse) SetPatient(val *model.Patient) {
	p.Patient = val
}

func (p *GetPatientResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetPatientResponse) IsSetPatient() bool {
	return p.Patient != nil
}

func (p *GetPatientResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPatientResponse(%+v)", *p)
}

var fieldIDToName_GetPatientResponse = map[int16]string{
	1: "Base",
	2: "patient",
}

type ListPatientsRequest struct {
	Offset    int32   `thrift:"offset,1,required" frugal:"1,required,i32" json:"offset"`
	Limit     int32   `thrift:"limit,2,required" frugal:"2,required,i32" json:"limit"`
	PatientNo *string `thrift:"patientNo,3,optional" frugal:"3,optional,string" json:"patientNo,omitempty"`
	Name      *string `thrift:"name,4,optional" frugal:"4,optional,string" json:"name,omitempty"`
	IdCard    *string `thrift:"idCard,5,optional" frugal:"5,optional,string" json:"idCard,omitempty"`
	Phone     *string `thrift:"phone,6,optional" frugal:"6,optional,string" json:"phone,omitempty"`
}

func NewListPatientsRequest() *ListPatientsRequest {
	return &ListPatientsRequest{}
}

func (p *ListPatientsRequest) InitDefault() {
}

func (p *ListPatientsRequest) GetOffset() (v int32) {
	return p.Offset
}

func (p *ListPatientsRequest) GetLimit() (v int32) {
	return p.Limit
}

var ListPatientsRequest_PatientNo_DEFAULT string

func (p *ListPatientsRequest) GetPatientNo() (v string) {
	if !p.IsSetPatientNo() {
		return ListPatientsRequest_PatientNo_DEFAULT
	}
	return *p.PatientNo
}

var ListPatientsRequest_Name_DEFAULT string

func (p *ListPatientsRequest) GetName() (v string) {
	if !p.IsSetName() {
		return ListPatientsRequest_Name_DEFAULT
	}
	return *p.Name
}

var ListPatientsRequest_IdCard_DEFAULT string

func (p *ListPatientsRequest) GetIdCard() (v string) {
	if !p.IsSetIdCard() {
		return ListPatientsRequest_IdCard_DEFAULT
	}
	return *p.IdCard
}

var ListPatientsRequest_Phone_DEFAULT string

func (p *ListPatientsRequest) GetPhone() (v string) {
	if !p.IsSetPhone() {
		return ListPatientsRequest_Phone_DEFAULT
	}
	return *p.Phone
}
func (p *ListPatientsRequest) SetOffset(val int32) {
	p.Offset = val
}
func (p *ListPatientsRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *ListPatientsRequest) SetPatientNo(val *string) {
	p.PatientNo = val
}
func (p *ListPatientsRequest) SetName(val *string) {
	p.Name = val
}
func (p *ListPatientsRequest) SetIdCard(val *string) {
	p.IdCard = val
}
func (p *ListPatientsRequest) SetPhone(val *string) {
	p.Phone = val
}

func (p *ListPatientsRequest) IsSetPatientNo() bool {
	return p.PatientNo != nil
}

func (p *ListPatientsRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *ListPatientsRequest) IsSetIdCard() bool {
	return p.IdCard != nil
}

func (p *ListPatientsRequest) IsSetPhone() bool {
	return p.Phone != nil
}

func (p *ListPatientsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPatientsRequest(%+v)", *p)
}

var fieldIDToName_ListPatientsRequest = map[int16]string{
	1: "offset",
	2: "limit",
	3: "patientNo",
	4: "name",
	5: "idCard",
	6: "phone",
}

type ListPatientsResponse struct {
	Base     *model.BaseResp  `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Patients []*model.Patient `thrift:"patients,2,required" frugal:"2,required,list<model.Patient>" json:"patients"`
	Total    int32            `thrift:"total,3,required" frugal:"3,required,i32" json:"total"`
}

func NewListPatientsResponse() *ListPatientsResponse {
	return &ListPatientsResponse{}
}

func (p *ListPatientsResponse) InitDefault() {
}

var ListPatientsResponse_Base_DEFAULT *model.BaseResp

func (p *ListPatientsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ListPatientsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *ListPatientsResponse) GetPatients() (v []*model.Patient) {
	return p.Patients
}

func (p *ListPatientsResponse) GetTotal() (v int32) {
	return p.Total
}
func (p *ListPatientsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ListPatientsResponse) SetPatients(val []*model.Patient) {
	p.Patients = val
}
func (p *ListPatientsResponse) SetTotal(val int32) {
	p.Total = val
}

func (p *ListPatientsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListPatientsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPatientsResponse(%+v)", *p)
}

var fieldIDToName_ListPatientsResponse = map[int16]string{
	1: "Base",
	2: "patients",
	3: "total",
}

type CreateVisitRequest struct {
	Visit *model.Visit `thrift:"visit,1,required" frugal:"1,required,model.Visit" json:"visit"`
}

func NewCreateVisitRequest() *CreateVisitRequest {
	return &CreateVisitRequest{}
}

func (p *CreateVisitRequest) InitDefault() {
}

var CreateVisitRequest_Visit_DEFAULT *model.Visit

func (p *CreateVisitRequest) GetVisit() (v *model.Visit) {
	if !p.IsSetVisit() {
		return CreateVisitRequest_Visit_DEFAULT
	}
	return p.Visit
}
func (p *CreateVisitRequest) SetVisit(val *model.Visit) {
	p.Visit = val
}

func (p *CreateVisitRequest) IsSetVisit() bool {
	return p.Visit != nil
}

func (p *CreateVisitRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateVisitRequest(%+v)", *p)
}

var fieldIDToName_CreateVisitRequest = map[int16]string{
	1: "visit",
}

type CreateVisitResponse struct {
	Base    *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	VisitId int64           `thrift:"visitId,2,required" frugal:"2,required,i64" json:"visitId"`
}

func NewCreateVisitResponse() *CreateVisitResponse {
	return &CreateVisitResponse{}
}

func (p *CreateVisitResponse) InitDefault() {
}

var CreateVisitResponse_Base_DEFAULT *model.BaseResp

func (p *CreateVisitResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateVisitResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *CreateVisitResponse) GetVisitId() (v int64) {
	return p.VisitId
}
func (p *CreateVisitResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateVisitResponse) SetVisitId(val int64) {
	p.VisitId = val
}

func (p *CreateVisitResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateVisitResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateVisitResponse(%+v)", *p)
}

var fieldIDToName_CreateVisitResponse = map[int16]string{
	1: "Base",
	2: "visitId",
}

type GetVisitRequest struct {
	VisitId int64 `thrift:"visitId,1,required" frugal:"1,required,i64" json:"visitId"`
}

func NewGetVisitRequest() *GetVisitRequest {
	return &GetVisitRequest{}
}

func (p *GetVisitRequest) InitDefault() {
}

func (p *GetVisitRequest) GetVisitId() (v int64) {
	return p.VisitId
}
func (p *GetVisitRequest) SetVisitId(val int64) {
	p.VisitId = val
}

func (p *GetVisitRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVisitRequest(%+v)", *p)
}

var fieldIDToName_GetVisitRequest = map[int16]string{
	1: "visitId",
}

type GetVisitResponse struct {
	Base  *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Visit *model.Visit    `thrift:"visit,2,required" frugal:"2,required,model.Visit" json:"visit"`
}

func NewGetVisitResponse() *GetVisitResponse {
	return &GetVisitResponse{}
}

func (p *GetVisitResponse) InitDefault() {
}

var GetVisitResponse_Base_DEFAULT *model.BaseResp

func (p *GetVisitResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetVisitResponse_Base_DEFAULT
	}
	return p.Base
}

var GetVisitResponse_Visit_DEFAULT *model.Visit

func (p *GetVisitResponse) GetVisit() (v *model.Visit) {
	if !p.IsSetVisit() {
		return GetVisitResponse_Visit_DEFAULT
	}
	return p.Visit
}
func (p *GetVisitResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetVisitResponse) SetVisit(val *model.Visit) {
	p.Visit = val
}

func (p *GetVisitResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetVisitResponse) IsSetVisit() bool {
	return p.Visit != nil
}

func (p *GetVisitResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVisitResponse(%+v)", *p)
}

var fieldIDToName_GetVisitResponse = map[int16]string{
	1: "Base",
	2: "visit",
}

type GetPatientVisitsRequest struct {
	PatientId int64 `thrift:"patientId,1,required" frugal:"1,required,i64" json:"patientId"`
}

func NewGetPatientVisitsRequest() *GetPatientVisitsRequest {
	return &GetPatientVisitsRequest{}
}

func (p *GetPatientVisitsRequest) InitDefault() {
}

func (p *GetPatientVisitsRequest) GetPatientId() (v int64) {
	return p.PatientId
}
func (p *GetPatientVisitsRequest) SetPatientId(val int64) {
	p.PatientId = val
}

func (p *GetPatientVisitsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPatientVisitsRequest(%+v)", *p)
}

var fieldIDToName_GetPatientVisitsRequest = map[int16]string{
	1: "patientId",
}

type GetPatientVisitsResponse struct {
	Base   *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Visits []*model.Visit  `thrift:"visits,2,required" frugal:"2,required,list<model.Visit>" json:"visits"`
}

func NewGetPatientVisitsResponse() *GetPatientVisitsResponse {
	return &GetPatientVisitsResponse{}
}

func (p *GetPatientVisitsResponse) InitDefault() {
}

var GetPatientVisitsResponse_Base_DEFAULT *model.BaseResp

func (p *GetPatientVisitsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetPatientVisitsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetPatientVisitsResponse) GetVisits() (v []*model.Visit) {
	return p.Visits
}
func (p *GetPatientVisitsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetPatientVisitsResponse) SetVisits(val []*model.Visit) {
	p.Visits = val
}

func (p *GetPatientVisitsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetPatientVisitsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPatientVisitsResponse(%+v)", *p)
}

var fieldIDToName_GetPatientVisitsResponse = map[int16]string{
	1: "Base",
	2: "visits",
}

type ListAllVisitsRequest struct {
	Offset     int32   `thrift:"offset,1,required" frugal:"1,required,i32" json:"offset"`
	Limit      int32   `thrift:"limit,2,required" frugal:"2,required,i32" json:"limit"`
	PatientId  *string `thrift:"patientId,3,optional" frugal:"3,optional,string" json:"patientId,omitempty"`
	VisitNo    *string `thrift:"visitNo,4,optional" frugal:"4,optional,string" json:"visitNo,omitempty"`
	Department *string `thrift:"department,5,optional" frugal:"5,optional,string" json:"department,omitempty"`
}

func NewListAllVisitsRequest() *ListAllVisitsRequest {
	return &ListAllVisitsRequest{}
}

func (p *ListAllVisitsRequest) InitDefault() {
}

func (p *ListAllVisitsRequest) GetOffset() (v int32) {
	return p.Offset
}

func (p *ListAllVisitsRequest) GetLimit() (v int32) {
	return p.Limit
}

var ListAllVisitsRequest_PatientId_DEFAULT string

func (p *ListAllVisitsRequest) GetPatientId() (v string) {
	if !p.IsSetPatientId() {
		return ListAllVisitsRequest_PatientId_DEFAULT
	}
	return *p.PatientId
}

var ListAllVisitsRequest_VisitNo_DEFAULT string

func (p *ListAllVisitsRequest) GetVisitNo() (v string) {
	if !p.IsSetVisitNo() {
		return ListAllVisitsRequest_VisitNo_DEFAULT
	}
	return *p.VisitNo
}

var ListAllVisitsRequest_Department_DEFAULT string

func (p *ListAllVisitsRequest) GetDepartment() (v string) {
	if !p.IsSetDepartment() {
		return ListAllVisitsRequest_Department_DEFAULT
	}
	return *p.Department
}
func (p *ListAllVisitsRequest) SetOffset(val int32) {
	p.Offset = val
}
func (p *ListAllVisitsRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *ListAllVisitsRequest) SetPatientId(val *string) {
	p.PatientId = val
}
func (p *ListAllVisitsRequest) SetVisitNo(val *string) {
	p.VisitNo = val
}
func (p *ListAllVisitsRequest) SetDepartment(val *string) {
	p.Department = val
}

func (p *ListAllVisitsRequest) IsSetPatientId() bool {
	return p.PatientId != nil
}

func (p *ListAllVisitsRequest) IsSetVisitNo() bool {
	return p.VisitNo != nil
}

func (p *ListAllVisitsRequest) IsSetDepartment() bool {
	return p.Department != nil
}

func (p *ListAllVisitsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAllVisitsRequest(%+v)", *p)
}

var fieldIDToName_ListAllVisitsRequest = map[int16]string{
	1: "offset",
	2: "limit",
	3: "patientId",
	4: "visitNo",
	5: "department",
}

type ListAllVisitsResponse struct {
	Base   *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Visits []*model.Visit  `thrift:"visits,2,required" frugal:"2,required,list<model.Visit>" json:"visits"`
	Total  int32           `thrift:"total,3,required" frugal:"3,required,i32" json:"total"`
}

func NewListAllVisitsResponse() *ListAllVisitsResponse {
	return &ListAllVisitsResponse{}
}

func (p *ListAllVisitsResponse) InitDefault() {
}

var ListAllVisitsResponse_Base_DEFAULT *model.BaseResp

func (p *ListAllVisitsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ListAllVisitsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *ListAllVisitsResponse) GetVisits() (v []*model.Visit) {
	return p.Visits
}

func (p *ListAllVisitsResponse) GetTotal() (v int32) {
	return p.Total
}
func (p *ListAllVisitsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ListAllVisitsResponse) SetVisits(val []*model.Visit) {
	p.Visits = val
}
func (p *ListAllVisitsResponse) SetTotal(val int32) {
	p.Total = val
}

func (p *ListAllVisitsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListAllVisitsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAllVisitsResponse(%+v)", *p)
}

var fieldIDToName_ListAllVisitsResponse = map[int16]string{
	1: "Base",
	2: "visits",
	3: "total",
}

type AddDiagnosisRequest struct {
	Diagnosis *model.Diagnosis `thrift:"diagnosis,1,required" frugal:"1,required,model.Diagnosis" json:"diagnosis"`
}

func NewAddDiagnosisRequest() *AddDiagnosisRequest {
	return &AddDiagnosisRequest{}
}

func (p *AddDiagnosisRequest) InitDefault() {
}

var AddDiagnosisRequest_Diagnosis_DEFAULT *model.Diagnosis

func (p *AddDiagnosisRequest) GetDiagnosis() (v *model.Diagnosis) {
	if !p.IsSetDiagnosis() {
		return AddDiagnosisRequest_Diagnosis_DEFAULT
	}
	return p.Diagnosis
}
func (p *AddDiagnosisRequest) SetDiagnosis(val *model.Diagnosis) {
	p.Diagnosis = val
}

func (p *AddDiagnosisRequest) IsSetDiagnosis() bool {
	return p.Diagnosis != nil
}

func (p *AddDiagnosisRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddDiagnosisRequest(%+v)", *p)
}

var fieldIDToName_AddDiagnosisRequest = map[int16]string{
	1: "diagnosis",
}

type AddDiagnosisResponse struct {
	Base        *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	DiagnosisId int64           `thrift:"diagnosisId,2,required" frugal:"2,required,i64" json:"diagnosisId"`
}

func NewAddDiagnosisResponse() *AddDiagnosisResponse {
	return &AddDiagnosisResponse{}
}

func (p *AddDiagnosisResponse) InitDefault() {
}

var AddDiagnosisResponse_Base_DEFAULT *model.BaseResp

func (p *AddDiagnosisResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AddDiagnosisResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *AddDiagnosisResponse) GetDiagnosisId() (v int64) {
	return p.DiagnosisId
}
func (p *AddDiagnosisResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *AddDiagnosisResponse) SetDiagnosisId(val int64) {
	p.DiagnosisId = val
}

func (p *AddDiagnosisResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddDiagnosisResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddDiagnosisResponse(%+v)", *p)
}

var fieldIDToName_AddDiagnosisResponse = map[int16]string{
	1: "Base",
	2: "diagnosisId",
}

type GetVisitDiagnosesRequest struct {
	VisitId int64 `thrift:"visitId,1,required" frugal:"1,required,i64" json:"visitId"`
}

func NewGetVisitDiagnosesRequest() *GetVisitDiagnosesRequest {
	return &GetVisitDiagnosesRequest{}
}

func (p *GetVisitDiagnosesRequest) InitDefault() {
}

func (p *GetVisitDiagnosesRequest) GetVisitId() (v int64) {
	return p.VisitId
}
func (p *GetVisitDiagnosesRequest) SetVisitId(val int64) {
	p.VisitId = val
}

func (p *GetVisitDiagnosesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVisitDiagnosesRequest(%+v)", *p)
}

var fieldIDToName_GetVisitDiagnosesRequest = map[int16]string{
	1: "visitId",
}

type GetVisitDiagnosesResponse struct {
	Base      *model.BaseResp    `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Diagnoses []*model.Diagnosis `thrift:"diagnoses,2,required" frugal:"2,required,list<model.Diagnosis>" json:"diagnoses"`
}

func NewGetVisitDiagnosesResponse() *GetVisitDiagnosesResponse {
	return &GetVisitDiagnosesResponse{}
}

func (p *GetVisitDiagnosesResponse) InitDefault() {
}

var GetVisitDiagnosesResponse_Base_DEFAULT *model.BaseResp

func (p *GetVisitDiagnosesResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetVisitDiagnosesResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetVisitDiagnosesResponse) GetDiagnoses() (v []*model.Diagnosis) {
	return p.Diagnoses
}
func (p *GetVisitDiagnosesResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetVisitDiagnosesResponse) SetDiagnoses(val []*model.Diagnosis) {
	p.Diagnoses = val
}

func (p *GetVisitDiagnosesResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetVisitDiagnosesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVisitDiagnosesResponse(%+v)", *p)
}

var fieldIDToName_GetVisitDiagnosesResponse = map[int16]string{
	1: "Base",
	2: "diagnoses",
}

type AddExaminationRequest struct {
	Examination *model.Examination `thrift:"examination,1,required" frugal:"1,required,model.Examination" json:"examination"`
}

func NewAddExaminationRequest() *AddExaminationRequest {
	return &AddExaminationRequest{}
}

func (p *AddExaminationRequest) InitDefault() {
}

var AddExaminationRequest_Examination_DEFAULT *model.Examination

func (p *AddExaminationRequest) GetExamination() (v *model.Examination) {
	if !p.IsSetExamination() {
		return AddExaminationRequest_Examination_DEFAULT
	}
	return p.Examination
}
func (p *AddExaminationRequest) SetExamination(val *model.Examination) {
	p.Examination = val
}

func (p *AddExaminationRequest) IsSetExamination() bool {
	return p.Examination != nil
}

func (p *AddExaminationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddExaminationRequest(%+v)", *p)
}

var fieldIDToName_AddExaminationRequest = map[int16]string{
	1: "examination",
}

type AddExaminationResponse struct {
	Base          *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	ExaminationId int64           `thrift:"examinationId,2,required" frugal:"2,required,i64" json:"examinationId"`
}

func NewAddExaminationResponse() *AddExaminationResponse {
	return &AddExaminationResponse{}
}

func (p *AddExaminationResponse) InitDefault() {
}

var AddExaminationResponse_Base_DEFAULT *model.BaseResp

func (p *AddExaminationResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AddExaminationResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *AddExaminationResponse) GetExaminationId() (v int64) {
	return p.ExaminationId
}
func (p *AddExaminationResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *AddExaminationResponse) SetExaminationId(val int64) {
	p.ExaminationId = val
}

func (p *AddExaminationResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddExaminationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddExaminationResponse(%+v)", *p)
}

var fieldIDToName_AddExaminationResponse = map[int16]string{
	1: "Base",
	2: "examinationId",
}

type GetVisitExaminationsRequest struct {
	VisitId int64 `thrift:"visitId,1,required" frugal:"1,required,i64" json:"visitId"`
}

func NewGetVisitExaminationsRequest() *GetVisitExaminationsRequest {
	return &GetVisitExaminationsRequest{}
}

func (p *GetVisitExaminationsRequest) InitDefault() {
}

func (p *GetVisitExaminationsRequest) GetVisitId() (v int64) {
	return p.VisitId
}
func (p *GetVisitExaminationsRequest) SetVisitId(val int64) {
	p.VisitId = val
}

func (p *GetVisitExaminationsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVisitExaminationsRequest(%+v)", *p)
}

var fieldIDToName_GetVisitExaminationsRequest = map[int16]string{
	1: "visitId",
}

type GetVisitExaminationsResponse struct {
	Base         *model.BaseResp      `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Examinations []*model.Examination `thrift:"examinations,2,required" frugal:"2,required,list<model.Examination>" json:"examinations"`
}

func NewGetVisitExaminationsResponse() *GetVisitExaminationsResponse {
	return &GetVisitExaminationsResponse{}
}

func (p *GetVisitExaminationsResponse) InitDefault() {
}

var GetVisitExaminationsResponse_Base_DEFAULT *model.BaseResp

func (p *GetVisitExaminationsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetVisitExaminationsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetVisitExaminationsResponse) GetExaminations() (v []*model.Examination) {
	return p.Examinations
}
func (p *GetVisitExaminationsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetVisitExaminationsResponse) SetExaminations(val []*model.Examination) {
	p.Examinations = val
}

func (p *GetVisitExaminationsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetVisitExaminationsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVisitExaminationsResponse(%+v)", *p)
}

var fieldIDToName_GetVisitExaminationsResponse = map[int16]string{
	1: "Base",
	2: "examinations",
}

type ListAllDiagnosesRequest struct {
	Offset        int32   `thrift:"offset,1,required" frugal:"1,required,i32" json:"offset"`
	Limit         int32   `thrift:"limit,2,required" frugal:"2,required,i32" json:"limit"`
	PatientId     *string `thrift:"patientId,3,optional" frugal:"3,optional,string" json:"patientId,omitempty"`
	VisitNo       *string `thrift:"visitNo,4,optional" frugal:"4,optional,string" json:"visitNo,omitempty"`
	DiagnosisCode *string `thrift:"diagnosisCode,5,optional" frugal:"5,optional,string" json:"diagnosisCode,omitempty"`
	DiagnosisName *string `thrift:"diagnosisName,6,optional" frugal:"6,optional,string" json:"diagnosisName,omitempty"`
}

func NewListAllDiagnosesRequest() *ListAllDiagnosesRequest {
	return &ListAllDiagnosesRequest{}
}

func (p *ListAllDiagnosesRequest) InitDefault() {
}

func (p *ListAllDiagnosesRequest) GetOffset() (v int32) {
	return p.Offset
}

func (p *ListAllDiagnosesRequest) GetLimit() (v int32) {
	return p.Limit
}

var ListAllDiagnosesRequest_PatientId_DEFAULT string

func (p *ListAllDiagnosesRequest) GetPatientId() (v string) {
	if !p.IsSetPatientId() {
		return ListAllDiagnosesRequest_PatientId_DEFAULT
	}
	return *p.PatientId
}

var ListAllDiagnosesRequest_VisitNo_DEFAULT string

func (p *ListAllDiagnosesRequest) GetVisitNo() (v string) {
	if !p.IsSetVisitNo() {
		return ListAllDiagnosesRequest_VisitNo_DEFAULT
	}
	return *p.VisitNo
}

var ListAllDiagnosesRequest_DiagnosisCode_DEFAULT string

func (p *ListAllDiagnosesRequest) GetDiagnosisCode() (v string) {
	if !p.IsSetDiagnosisCode() {
		return ListAllDiagnosesRequest_DiagnosisCode_DEFAULT
	}
	return *p.DiagnosisCode
}

var ListAllDiagnosesRequest_DiagnosisName_DEFAULT string

func (p *ListAllDiagnosesRequest) GetDiagnosisName() (v string) {
	if !p.IsSetDiagnosisName() {
		return ListAllDiagnosesRequest_DiagnosisName_DEFAULT
	}
	return *p.DiagnosisName
}
func (p *ListAllDiagnosesRequest) SetOffset(val int32) {
	p.Offset = val
}
func (p *ListAllDiagnosesRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *ListAllDiagnosesRequest) SetPatientId(val *string) {
	p.PatientId = val
}
func (p *ListAllDiagnosesRequest) SetVisitNo(val *string) {
	p.VisitNo = val
}
func (p *ListAllDiagnosesRequest) SetDiagnosisCode(val *string) {
	p.DiagnosisCode = val
}
func (p *ListAllDiagnosesRequest) SetDiagnosisName(val *string) {
	p.DiagnosisName = val
}

func (p *ListAllDiagnosesRequest) IsSetPatientId() bool {
	return p.PatientId != nil
}

func (p *ListAllDiagnosesRequest) IsSetVisitNo() bool {
	return p.VisitNo != nil
}

func (p *ListAllDiagnosesRequest) IsSetDiagnosisCode() bool {
	return p.DiagnosisCode != nil
}

func (p *ListAllDiagnosesRequest) IsSetDiagnosisName() bool {
	return p.DiagnosisName != nil
}

func (p *ListAllDiagnosesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAllDiagnosesRequest(%+v)", *p)
}

var fieldIDToName_ListAllDiagnosesRequest = map[int16]string{
	1: "offset",
	2: "limit",
	3: "patientId",
	4: "visitNo",
	5: "diagnosisCode",
	6: "diagnosisName",
}

type ListAllDiagnosesResponse struct {
	Base      *model.BaseResp    `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Diagnoses []*model.Diagnosis `thrift:"diagnoses,2,required" frugal:"2,required,list<model.Diagnosis>" json:"diagnoses"`
	Total     int32              `thrift:"total,3,required" frugal:"3,required,i32" json:"total"`
}

func NewListAllDiagnosesResponse() *ListAllDiagnosesResponse {
	return &ListAllDiagnosesResponse{}
}

func (p *ListAllDiagnosesResponse) InitDefault() {
}

var ListAllDiagnosesResponse_Base_DEFAULT *model.BaseResp

func (p *ListAllDiagnosesResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ListAllDiagnosesResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *ListAllDiagnosesResponse) GetDiagnoses() (v []*model.Diagnosis) {
	return p.Diagnoses
}

func (p *ListAllDiagnosesResponse) GetTotal() (v int32) {
	return p.Total
}
func (p *ListAllDiagnosesResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ListAllDiagnosesResponse) SetDiagnoses(val []*model.Diagnosis) {
	p.Diagnoses = val
}
func (p *ListAllDiagnosesResponse) SetTotal(val int32) {
	p.Total = val
}

func (p *ListAllDiagnosesResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListAllDiagnosesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAllDiagnosesResponse(%+v)", *p)
}

var fieldIDToName_ListAllDiagnosesResponse = map[int16]string{
	1: "Base",
	2: "diagnoses",
	3: "total",
}

type ListAllExaminationsRequest struct {
	Offset          int32   `thrift:"offset,1,required" frugal:"1,required,i32" json:"offset"`
	Limit           int32   `thrift:"limit,2,required" frugal:"2,required,i32" json:"limit"`
	PatientId       *string `thrift:"patientId,3,optional" frugal:"3,optional,string" json:"patientId,omitempty"`
	VisitNo         *string `thrift:"visitNo,4,optional" frugal:"4,optional,string" json:"visitNo,omitempty"`
	ExaminationType *string `thrift:"examinationType,5,optional" frugal:"5,optional,string" json:"examinationType,omitempty"`
	ExaminationName *string `thrift:"examinationName,6,optional" frugal:"6,optional,string" json:"examinationName,omitempty"`
}

func NewListAllExaminationsRequest() *ListAllExaminationsRequest {
	return &ListAllExaminationsRequest{}
}

func (p *ListAllExaminationsRequest) InitDefault() {
}

func (p *ListAllExaminationsRequest) GetOffset() (v int32) {
	return p.Offset
}

func (p *ListAllExaminationsRequest) GetLimit() (v int32) {
	return p.Limit
}

var ListAllExaminationsRequest_PatientId_DEFAULT string

func (p *ListAllExaminationsRequest) GetPatientId() (v string) {
	if !p.IsSetPatientId() {
		return ListAllExaminationsRequest_PatientId_DEFAULT
	}
	return *p.PatientId
}

var ListAllExaminationsRequest_VisitNo_DEFAULT string

func (p *ListAllExaminationsRequest) GetVisitNo() (v string) {
	if !p.IsSetVisitNo() {
		return ListAllExaminationsRequest_VisitNo_DEFAULT
	}
	return *p.VisitNo
}

var ListAllExaminationsRequest_ExaminationType_DEFAULT string

func (p *ListAllExaminationsRequest) GetExaminationType() (v string) {
	if !p.IsSetExaminationType() {
		return ListAllExaminationsRequest_ExaminationType_DEFAULT
	}
	return *p.ExaminationType
}

var ListAllExaminationsRequest_ExaminationName_DEFAULT string

func (p *ListAllExaminationsRequest) GetExaminationName() (v string) {
	if !p.IsSetExaminationName() {
		return ListAllExaminationsRequest_ExaminationName_DEFAULT
	}
	return *p.ExaminationName
}
func (p *ListAllExaminationsRequest) SetOffset(val int32) {
	p.Offset = val
}
func (p *ListAllExaminationsRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *ListAllExaminationsRequest) SetPatientId(val *string) {
	p.PatientId = val
}
func (p *ListAllExaminationsRequest) SetVisitNo(val *string) {
	p.VisitNo = val
}
func (p *ListAllExaminationsRequest) SetExaminationType(val *string) {
	p.ExaminationType = val
}
func (p *ListAllExaminationsRequest) SetExaminationName(val *string) {
	p.ExaminationName = val
}

func (p *ListAllExaminationsRequest) IsSetPatientId() bool {
	return p.PatientId != nil
}

func (p *ListAllExaminationsRequest) IsSetVisitNo() bool {
	return p.VisitNo != nil
}

func (p *ListAllExaminationsRequest) IsSetExaminationType() bool {
	return p.ExaminationType != nil
}

func (p *ListAllExaminationsRequest) IsSetExaminationName() bool {
	return p.ExaminationName != nil
}

func (p *ListAllExaminationsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAllExaminationsRequest(%+v)", *p)
}

var fieldIDToName_ListAllExaminationsRequest = map[int16]string{
	1: "offset",
	2: "limit",
	3: "patientId",
	4: "visitNo",
	5: "examinationType",
	6: "examinationName",
}

type ListAllExaminationsResponse struct {
	Base         *model.BaseResp      `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Examinations []*model.Examination `thrift:"examinations,2,required" frugal:"2,required,list<model.Examination>" json:"examinations"`
	Total        int32                `thrift:"total,3,required" frugal:"3,required,i32" json:"total"`
}

func NewListAllExaminationsResponse() *ListAllExaminationsResponse {
	return &ListAllExaminationsResponse{}
}

func (p *ListAllExaminationsResponse) InitDefault() {
}

var ListAllExaminationsResponse_Base_DEFAULT *model.BaseResp

func (p *ListAllExaminationsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ListAllExaminationsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *ListAllExaminationsResponse) GetExaminations() (v []*model.Examination) {
	return p.Examinations
}

func (p *ListAllExaminationsResponse) GetTotal() (v int32) {
	return p.Total
}
func (p *ListAllExaminationsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ListAllExaminationsResponse) SetExaminations(val []*model.Examination) {
	p.Examinations = val
}
func (p *ListAllExaminationsResponse) SetTotal(val int32) {
	p.Total = val
}

func (p *ListAllExaminationsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListAllExaminationsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAllExaminationsResponse(%+v)", *p)
}

var fieldIDToName_ListAllExaminationsResponse = map[int16]string{
	1: "Base",
	2: "examinations",
	3: "total",
}

type ClinicalService interface {
	CreatePatient(ctx context.Context, req *CreatePatientRequest) (r *CreatePatientResponse, err error)

	GetPatient(ctx context.Context, req *GetPatientRequest) (r *GetPatientResponse, err error)

	ListPatients(ctx context.Context, req *ListPatientsRequest) (r *ListPatientsResponse, err error)

	CreateVisit(ctx context.Context, req *CreateVisitRequest) (r *CreateVisitResponse, err error)

	GetVisit(ctx context.Context, req *GetVisitRequest) (r *GetVisitResponse, err error)

	GetPatientVisits(ctx context.Context, req *GetPatientVisitsRequest) (r *GetPatientVisitsResponse, err error)

	ListAllVisits(ctx context.Context, req *ListAllVisitsRequest) (r *ListAllVisitsResponse, err error)

	AddDiagnosis(ctx context.Context, req *AddDiagnosisRequest) (r *AddDiagnosisResponse, err error)

	GetVisitDiagnoses(ctx context.Context, req *GetVisitDiagnosesRequest) (r *GetVisitDiagnosesResponse, err error)

	ListAllDiagnoses(ctx context.Context, req *ListAllDiagnosesRequest) (r *ListAllDiagnosesResponse, err error)

	AddExamination(ctx context.Context, req *AddExaminationRequest) (r *AddExaminationResponse, err error)

	GetVisitExaminations(ctx context.Context, req *GetVisitExaminationsRequest) (r *GetVisitExaminationsResponse, err error)

	ListAllExaminations(ctx context.Context, req *ListAllExaminationsRequest) (r *ListAllExaminationsResponse, err error)
}

type ClinicalServiceCreatePatientArgs struct {
	Req *CreatePatientRequest `thrift:"req,1" frugal:"1,default,CreatePatientRequest" json:"req"`
}

func NewClinicalServiceCreatePatientArgs() *ClinicalServiceCreatePatientArgs {
	return &ClinicalServiceCreatePatientArgs{}
}

func (p *ClinicalServiceCreatePatientArgs) InitDefault() {
}

var ClinicalServiceCreatePatientArgs_Req_DEFAULT *CreatePatientRequest

func (p *ClinicalServiceCreatePatientArgs) GetReq() (v *CreatePatientRequest) {
	if !p.IsSetReq() {
		return ClinicalServiceCreatePatientArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClinicalServiceCreatePatientArgs) SetReq(val *CreatePatientRequest) {
	p.Req = val
}

func (p *ClinicalServiceCreatePatientArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClinicalServiceCreatePatientArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceCreatePatientArgs(%+v)", *p)
}

var fieldIDToName_ClinicalServiceCreatePatientArgs = map[int16]string{
	1: "req",
}

type ClinicalServiceCreatePatientResult struct {
	Success *CreatePatientResponse `thrift:"success,0,optional" frugal:"0,optional,CreatePatientResponse" json:"success,omitempty"`
}

func NewClinicalServiceCreatePatientResult() *ClinicalServiceCreatePatientResult {
	return &ClinicalServiceCreatePatientResult{}
}

func (p *ClinicalServiceCreatePatientResult) InitDefault() {
}

var ClinicalServiceCreatePatientResult_Success_DEFAULT *CreatePatientResponse

func (p *ClinicalServiceCreatePatientResult) GetSuccess() (v *CreatePatientResponse) {
	if !p.IsSetSuccess() {
		return ClinicalServiceCreatePatientResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClinicalServiceCreatePatientResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreatePatientResponse)
}

func (p *ClinicalServiceCreatePatientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalServiceCreatePatientResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceCreatePatientResult(%+v)", *p)
}

var fieldIDToName_ClinicalServiceCreatePatientResult = map[int16]string{
	0: "success",
}

type ClinicalServiceGetPatientArgs struct {
	Req *GetPatientRequest `thrift:"req,1" frugal:"1,default,GetPatientRequest" json:"req"`
}

func NewClinicalServiceGetPatientArgs() *ClinicalServiceGetPatientArgs {
	return &ClinicalServiceGetPatientArgs{}
}

func (p *ClinicalServiceGetPatientArgs) InitDefault() {
}

var ClinicalServiceGetPatientArgs_Req_DEFAULT *GetPatientRequest

func (p *ClinicalServiceGetPatientArgs) GetReq() (v *GetPatientRequest) {
	if !p.IsSetReq() {
		return ClinicalServiceGetPatientArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClinicalServiceGetPatientArgs) SetReq(val *GetPatientRequest) {
	p.Req = val
}

func (p *ClinicalServiceGetPatientArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClinicalServiceGetPatientArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceGetPatientArgs(%+v)", *p)
}

var fieldIDToName_ClinicalServiceGetPatientArgs = map[int16]string{
	1: "req",
}

type ClinicalServiceGetPatientResult struct {
	Success *GetPatientResponse `thrift:"success,0,optional" frugal:"0,optional,GetPatientResponse" json:"success,omitempty"`
}

func NewClinicalServiceGetPatientResult() *ClinicalServiceGetPatientResult {
	return &ClinicalServiceGetPatientResult{}
}

func (p *ClinicalServiceGetPatientResult) InitDefault() {
}

var ClinicalServiceGetPatientResult_Success_DEFAULT *GetPatientResponse

func (p *ClinicalServiceGetPatientResult) GetSuccess() (v *GetPatientResponse) {
	if !p.IsSetSuccess() {
		return ClinicalServiceGetPatientResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClinicalServiceGetPatientResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPatientResponse)
}

func (p *ClinicalServiceGetPatientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalServiceGetPatientResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceGetPatientResult(%+v)", *p)
}

var fieldIDToName_ClinicalServiceGetPatientResult = map[int16]string{
	0: "success",
}

type ClinicalServiceListPatientsArgs struct {
	Req *ListPatientsRequest `thrift:"req,1" frugal:"1,default,ListPatientsRequest" json:"req"`
}

func NewClinicalServiceListPatientsArgs() *ClinicalServiceListPatientsArgs {
	return &ClinicalServiceListPatientsArgs{}
}

func (p *ClinicalServiceListPatientsArgs) InitDefault() {
}

var ClinicalServiceListPatientsArgs_Req_DEFAULT *ListPatientsRequest

func (p *ClinicalServiceListPatientsArgs) GetReq() (v *ListPatientsRequest) {
	if !p.IsSetReq() {
		return ClinicalServiceListPatientsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClinicalServiceListPatientsArgs) SetReq(val *ListPatientsRequest) {
	p.Req = val
}

func (p *ClinicalServiceListPatientsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClinicalServiceListPatientsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceListPatientsArgs(%+v)", *p)
}

var fieldIDToName_ClinicalServiceListPatientsArgs = map[int16]string{
	1: "req",
}

type ClinicalServiceListPatientsResult struct {
	Success *ListPatientsResponse `thrift:"success,0,optional" frugal:"0,optional,ListPatientsResponse" json:"success,omitempty"`
}

func NewClinicalServiceListPatientsResult() *ClinicalServiceListPatientsResult {
	return &ClinicalServiceListPatientsResult{}
}

func (p *ClinicalServiceListPatientsResult) InitDefault() {
}

var ClinicalServiceListPatientsResult_Success_DEFAULT *ListPatientsResponse

func (p *ClinicalServiceListPatientsResult) GetSuccess() (v *ListPatientsResponse) {
	if !p.IsSetSuccess() {
		return ClinicalServiceListPatientsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClinicalServiceListPatientsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListPatientsResponse)
}

func (p *ClinicalServiceListPatientsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalServiceListPatientsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceListPatientsResult(%+v)", *p)
}

var fieldIDToName_ClinicalServiceListPatientsResult = map[int16]string{
	0: "success",
}

type ClinicalServiceCreateVisitArgs struct {
	Req *CreateVisitRequest `thrift:"req,1" frugal:"1,default,CreateVisitRequest" json:"req"`
}

func NewClinicalServiceCreateVisitArgs() *ClinicalServiceCreateVisitArgs {
	return &ClinicalServiceCreateVisitArgs{}
}

func (p *ClinicalServiceCreateVisitArgs) InitDefault() {
}

var ClinicalServiceCreateVisitArgs_Req_DEFAULT *CreateVisitRequest

func (p *ClinicalServiceCreateVisitArgs) GetReq() (v *CreateVisitRequest) {
	if !p.IsSetReq() {
		return ClinicalServiceCreateVisitArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClinicalServiceCreateVisitArgs) SetReq(val *CreateVisitRequest) {
	p.Req = val
}

func (p *ClinicalServiceCreateVisitArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClinicalServiceCreateVisitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceCreateVisitArgs(%+v)", *p)
}

var fieldIDToName_ClinicalServiceCreateVisitArgs = map[int16]string{
	1: "req",
}

type ClinicalServiceCreateVisitResult struct {
	Success *CreateVisitResponse `thrift:"success,0,optional" frugal:"0,optional,CreateVisitResponse" json:"success,omitempty"`
}

func NewClinicalServiceCreateVisitResult() *ClinicalServiceCreateVisitResult {
	return &ClinicalServiceCreateVisitResult{}
}

func (p *ClinicalServiceCreateVisitResult) InitDefault() {
}

var ClinicalServiceCreateVisitResult_Success_DEFAULT *CreateVisitResponse

func (p *ClinicalServiceCreateVisitResult) GetSuccess() (v *CreateVisitResponse) {
	if !p.IsSetSuccess() {
		return ClinicalServiceCreateVisitResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClinicalServiceCreateVisitResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateVisitResponse)
}

func (p *ClinicalServiceCreateVisitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalServiceCreateVisitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceCreateVisitResult(%+v)", *p)
}

var fieldIDToName_ClinicalServiceCreateVisitResult = map[int16]string{
	0: "success",
}

type ClinicalServiceGetVisitArgs struct {
	Req *GetVisitRequest `thrift:"req,1" frugal:"1,default,GetVisitRequest" json:"req"`
}

func NewClinicalServiceGetVisitArgs() *ClinicalServiceGetVisitArgs {
	return &ClinicalServiceGetVisitArgs{}
}

func (p *ClinicalServiceGetVisitArgs) InitDefault() {
}

var ClinicalServiceGetVisitArgs_Req_DEFAULT *GetVisitRequest

func (p *ClinicalServiceGetVisitArgs) GetReq() (v *GetVisitRequest) {
	if !p.IsSetReq() {
		return ClinicalServiceGetVisitArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClinicalServiceGetVisitArgs) SetReq(val *GetVisitRequest) {
	p.Req = val
}

func (p *ClinicalServiceGetVisitArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClinicalServiceGetVisitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceGetVisitArgs(%+v)", *p)
}

var fieldIDToName_ClinicalServiceGetVisitArgs = map[int16]string{
	1: "req",
}

type ClinicalServiceGetVisitResult struct {
	Success *GetVisitResponse `thrift:"success,0,optional" frugal:"0,optional,GetVisitResponse" json:"success,omitempty"`
}

func NewClinicalServiceGetVisitResult() *ClinicalServiceGetVisitResult {
	return &ClinicalServiceGetVisitResult{}
}

func (p *ClinicalServiceGetVisitResult) InitDefault() {
}

var ClinicalServiceGetVisitResult_Success_DEFAULT *GetVisitResponse

func (p *ClinicalServiceGetVisitResult) GetSuccess() (v *GetVisitResponse) {
	if !p.IsSetSuccess() {
		return ClinicalServiceGetVisitResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClinicalServiceGetVisitResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetVisitResponse)
}

func (p *ClinicalServiceGetVisitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalServiceGetVisitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceGetVisitResult(%+v)", *p)
}

var fieldIDToName_ClinicalServiceGetVisitResult = map[int16]string{
	0: "success",
}

type ClinicalServiceGetPatientVisitsArgs struct {
	Req *GetPatientVisitsRequest `thrift:"req,1" frugal:"1,default,GetPatientVisitsRequest" json:"req"`
}

func NewClinicalServiceGetPatientVisitsArgs() *ClinicalServiceGetPatientVisitsArgs {
	return &ClinicalServiceGetPatientVisitsArgs{}
}

func (p *ClinicalServiceGetPatientVisitsArgs) InitDefault() {
}

var ClinicalServiceGetPatientVisitsArgs_Req_DEFAULT *GetPatientVisitsRequest

func (p *ClinicalServiceGetPatientVisitsArgs) GetReq() (v *GetPatientVisitsRequest) {
	if !p.IsSetReq() {
		return ClinicalServiceGetPatientVisitsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClinicalServiceGetPatientVisitsArgs) SetReq(val *GetPatientVisitsRequest) {
	p.Req = val
}

func (p *ClinicalServiceGetPatientVisitsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClinicalServiceGetPatientVisitsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceGetPatientVisitsArgs(%+v)", *p)
}

var fieldIDToName_ClinicalServiceGetPatientVisitsArgs = map[int16]string{
	1: "req",
}

type ClinicalServiceGetPatientVisitsResult struct {
	Success *GetPatientVisitsResponse `thrift:"success,0,optional" frugal:"0,optional,GetPatientVisitsResponse" json:"success,omitempty"`
}

func NewClinicalServiceGetPatientVisitsResult() *ClinicalServiceGetPatientVisitsResult {
	return &ClinicalServiceGetPatientVisitsResult{}
}

func (p *ClinicalServiceGetPatientVisitsResult) InitDefault() {
}

var ClinicalServiceGetPatientVisitsResult_Success_DEFAULT *GetPatientVisitsResponse

func (p *ClinicalServiceGetPatientVisitsResult) GetSuccess() (v *GetPatientVisitsResponse) {
	if !p.IsSetSuccess() {
		return ClinicalServiceGetPatientVisitsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClinicalServiceGetPatientVisitsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPatientVisitsResponse)
}

func (p *ClinicalServiceGetPatientVisitsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalServiceGetPatientVisitsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceGetPatientVisitsResult(%+v)", *p)
}

var fieldIDToName_ClinicalServiceGetPatientVisitsResult = map[int16]string{
	0: "success",
}

type ClinicalServiceListAllVisitsArgs struct {
	Req *ListAllVisitsRequest `thrift:"req,1" frugal:"1,default,ListAllVisitsRequest" json:"req"`
}

func NewClinicalServiceListAllVisitsArgs() *ClinicalServiceListAllVisitsArgs {
	return &ClinicalServiceListAllVisitsArgs{}
}

func (p *ClinicalServiceListAllVisitsArgs) InitDefault() {
}

var ClinicalServiceListAllVisitsArgs_Req_DEFAULT *ListAllVisitsRequest

func (p *ClinicalServiceListAllVisitsArgs) GetReq() (v *ListAllVisitsRequest) {
	if !p.IsSetReq() {
		return ClinicalServiceListAllVisitsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClinicalServiceListAllVisitsArgs) SetReq(val *ListAllVisitsRequest) {
	p.Req = val
}

func (p *ClinicalServiceListAllVisitsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClinicalServiceListAllVisitsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceListAllVisitsArgs(%+v)", *p)
}

var fieldIDToName_ClinicalServiceListAllVisitsArgs = map[int16]string{
	1: "req",
}

type ClinicalServiceListAllVisitsResult struct {
	Success *ListAllVisitsResponse `thrift:"success,0,optional" frugal:"0,optional,ListAllVisitsResponse" json:"success,omitempty"`
}

func NewClinicalServiceListAllVisitsResult() *ClinicalServiceListAllVisitsResult {
	return &ClinicalServiceListAllVisitsResult{}
}

func (p *ClinicalServiceListAllVisitsResult) InitDefault() {
}

var ClinicalServiceListAllVisitsResult_Success_DEFAULT *ListAllVisitsResponse

func (p *ClinicalServiceListAllVisitsResult) GetSuccess() (v *ListAllVisitsResponse) {
	if !p.IsSetSuccess() {
		return ClinicalServiceListAllVisitsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClinicalServiceListAllVisitsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListAllVisitsResponse)
}

func (p *ClinicalServiceListAllVisitsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalServiceListAllVisitsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceListAllVisitsResult(%+v)", *p)
}

var fieldIDToName_ClinicalServiceListAllVisitsResult = map[int16]string{
	0: "success",
}

type ClinicalServiceAddDiagnosisArgs struct {
	Req *AddDiagnosisRequest `thrift:"req,1" frugal:"1,default,AddDiagnosisRequest" json:"req"`
}

func NewClinicalServiceAddDiagnosisArgs() *ClinicalServiceAddDiagnosisArgs {
	return &ClinicalServiceAddDiagnosisArgs{}
}

func (p *ClinicalServiceAddDiagnosisArgs) InitDefault() {
}

var ClinicalServiceAddDiagnosisArgs_Req_DEFAULT *AddDiagnosisRequest

func (p *ClinicalServiceAddDiagnosisArgs) GetReq() (v *AddDiagnosisRequest) {
	if !p.IsSetReq() {
		return ClinicalServiceAddDiagnosisArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClinicalServiceAddDiagnosisArgs) SetReq(val *AddDiagnosisRequest) {
	p.Req = val
}

func (p *ClinicalServiceAddDiagnosisArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClinicalServiceAddDiagnosisArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceAddDiagnosisArgs(%+v)", *p)
}

var fieldIDToName_ClinicalServiceAddDiagnosisArgs = map[int16]string{
	1: "req",
}

type ClinicalServiceAddDiagnosisResult struct {
	Success *AddDiagnosisResponse `thrift:"success,0,optional" frugal:"0,optional,AddDiagnosisResponse" json:"success,omitempty"`
}

func NewClinicalServiceAddDiagnosisResult() *ClinicalServiceAddDiagnosisResult {
	return &ClinicalServiceAddDiagnosisResult{}
}

func (p *ClinicalServiceAddDiagnosisResult) InitDefault() {
}

var ClinicalServiceAddDiagnosisResult_Success_DEFAULT *AddDiagnosisResponse

func (p *ClinicalServiceAddDiagnosisResult) GetSuccess() (v *AddDiagnosisResponse) {
	if !p.IsSetSuccess() {
		return ClinicalServiceAddDiagnosisResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClinicalServiceAddDiagnosisResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddDiagnosisResponse)
}

func (p *ClinicalServiceAddDiagnosisResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalServiceAddDiagnosisResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceAddDiagnosisResult(%+v)", *p)
}

var fieldIDToName_ClinicalServiceAddDiagnosisResult = map[int16]string{
	0: "success",
}

type ClinicalServiceGetVisitDiagnosesArgs struct {
	Req *GetVisitDiagnosesRequest `thrift:"req,1" frugal:"1,default,GetVisitDiagnosesRequest" json:"req"`
}

func NewClinicalServiceGetVisitDiagnosesArgs() *ClinicalServiceGetVisitDiagnosesArgs {
	return &ClinicalServiceGetVisitDiagnosesArgs{}
}

func (p *ClinicalServiceGetVisitDiagnosesArgs) InitDefault() {
}

var ClinicalServiceGetVisitDiagnosesArgs_Req_DEFAULT *GetVisitDiagnosesRequest

func (p *ClinicalServiceGetVisitDiagnosesArgs) GetReq() (v *GetVisitDiagnosesRequest) {
	if !p.IsSetReq() {
		return ClinicalServiceGetVisitDiagnosesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClinicalServiceGetVisitDiagnosesArgs) SetReq(val *GetVisitDiagnosesRequest) {
	p.Req = val
}

func (p *ClinicalServiceGetVisitDiagnosesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClinicalServiceGetVisitDiagnosesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceGetVisitDiagnosesArgs(%+v)", *p)
}

var fieldIDToName_ClinicalServiceGetVisitDiagnosesArgs = map[int16]string{
	1: "req",
}

type ClinicalServiceGetVisitDiagnosesResult struct {
	Success *GetVisitDiagnosesResponse `thrift:"success,0,optional" frugal:"0,optional,GetVisitDiagnosesResponse" json:"success,omitempty"`
}

func NewClinicalServiceGetVisitDiagnosesResult() *ClinicalServiceGetVisitDiagnosesResult {
	return &ClinicalServiceGetVisitDiagnosesResult{}
}

func (p *ClinicalServiceGetVisitDiagnosesResult) InitDefault() {
}

var ClinicalServiceGetVisitDiagnosesResult_Success_DEFAULT *GetVisitDiagnosesResponse

func (p *ClinicalServiceGetVisitDiagnosesResult) GetSuccess() (v *GetVisitDiagnosesResponse) {
	if !p.IsSetSuccess() {
		return ClinicalServiceGetVisitDiagnosesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClinicalServiceGetVisitDiagnosesResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetVisitDiagnosesResponse)
}

func (p *ClinicalServiceGetVisitDiagnosesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalServiceGetVisitDiagnosesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceGetVisitDiagnosesResult(%+v)", *p)
}

var fieldIDToName_ClinicalServiceGetVisitDiagnosesResult = map[int16]string{
	0: "success",
}

type ClinicalServiceListAllDiagnosesArgs struct {
	Req *ListAllDiagnosesRequest `thrift:"req,1" frugal:"1,default,ListAllDiagnosesRequest" json:"req"`
}

func NewClinicalServiceListAllDiagnosesArgs() *ClinicalServiceListAllDiagnosesArgs {
	return &ClinicalServiceListAllDiagnosesArgs{}
}

func (p *ClinicalServiceListAllDiagnosesArgs) InitDefault() {
}

var ClinicalServiceListAllDiagnosesArgs_Req_DEFAULT *ListAllDiagnosesRequest

func (p *ClinicalServiceListAllDiagnosesArgs) GetReq() (v *ListAllDiagnosesRequest) {
	if !p.IsSetReq() {
		return ClinicalServiceListAllDiagnosesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClinicalServiceListAllDiagnosesArgs) SetReq(val *ListAllDiagnosesRequest) {
	p.Req = val
}

func (p *ClinicalServiceListAllDiagnosesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClinicalServiceListAllDiagnosesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceListAllDiagnosesArgs(%+v)", *p)
}

var fieldIDToName_ClinicalServiceListAllDiagnosesArgs = map[int16]string{
	1: "req",
}

type ClinicalServiceListAllDiagnosesResult struct {
	Success *ListAllDiagnosesResponse `thrift:"success,0,optional" frugal:"0,optional,ListAllDiagnosesResponse" json:"success,omitempty"`
}

func NewClinicalServiceListAllDiagnosesResult() *ClinicalServiceListAllDiagnosesResult {
	return &ClinicalServiceListAllDiagnosesResult{}
}

func (p *ClinicalServiceListAllDiagnosesResult) InitDefault() {
}

var ClinicalServiceListAllDiagnosesResult_Success_DEFAULT *ListAllDiagnosesResponse

func (p *ClinicalServiceListAllDiagnosesResult) GetSuccess() (v *ListAllDiagnosesResponse) {
	if !p.IsSetSuccess() {
		return ClinicalServiceListAllDiagnosesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClinicalServiceListAllDiagnosesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListAllDiagnosesResponse)
}

func (p *ClinicalServiceListAllDiagnosesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalServiceListAllDiagnosesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceListAllDiagnosesResult(%+v)", *p)
}

var fieldIDToName_ClinicalServiceListAllDiagnosesResult = map[int16]string{
	0: "success",
}

type ClinicalServiceAddExaminationArgs struct {
	Req *AddExaminationRequest `thrift:"req,1" frugal:"1,default,AddExaminationRequest" json:"req"`
}

func NewClinicalServiceAddExaminationArgs() *ClinicalServiceAddExaminationArgs {
	return &ClinicalServiceAddExaminationArgs{}
}

func (p *ClinicalServiceAddExaminationArgs) InitDefault() {
}

var ClinicalServiceAddExaminationArgs_Req_DEFAULT *AddExaminationRequest

func (p *ClinicalServiceAddExaminationArgs) GetReq() (v *AddExaminationRequest) {
	if !p.IsSetReq() {
		return ClinicalServiceAddExaminationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClinicalServiceAddExaminationArgs) SetReq(val *AddExaminationRequest) {
	p.Req = val
}

func (p *ClinicalServiceAddExaminationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClinicalServiceAddExaminationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceAddExaminationArgs(%+v)", *p)
}

var fieldIDToName_ClinicalServiceAddExaminationArgs = map[int16]string{
	1: "req",
}

type ClinicalServiceAddExaminationResult struct {
	Success *AddExaminationResponse `thrift:"success,0,optional" frugal:"0,optional,AddExaminationResponse" json:"success,omitempty"`
}

func NewClinicalServiceAddExaminationResult() *ClinicalServiceAddExaminationResult {
	return &ClinicalServiceAddExaminationResult{}
}

func (p *ClinicalServiceAddExaminationResult) InitDefault() {
}

var ClinicalServiceAddExaminationResult_Success_DEFAULT *AddExaminationResponse

func (p *ClinicalServiceAddExaminationResult) GetSuccess() (v *AddExaminationResponse) {
	if !p.IsSetSuccess() {
		return ClinicalServiceAddExaminationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClinicalServiceAddExaminationResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddExaminationResponse)
}

func (p *ClinicalServiceAddExaminationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalServiceAddExaminationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceAddExaminationResult(%+v)", *p)
}

var fieldIDToName_ClinicalServiceAddExaminationResult = map[int16]string{
	0: "success",
}

type ClinicalServiceGetVisitExaminationsArgs struct {
	Req *GetVisitExaminationsRequest `thrift:"req,1" frugal:"1,default,GetVisitExaminationsRequest" json:"req"`
}

func NewClinicalServiceGetVisitExaminationsArgs() *ClinicalServiceGetVisitExaminationsArgs {
	return &ClinicalServiceGetVisitExaminationsArgs{}
}

func (p *ClinicalServiceGetVisitExaminationsArgs) InitDefault() {
}

var ClinicalServiceGetVisitExaminationsArgs_Req_DEFAULT *GetVisitExaminationsRequest

func (p *ClinicalServiceGetVisitExaminationsArgs) GetReq() (v *GetVisitExaminationsRequest) {
	if !p.IsSetReq() {
		return ClinicalServiceGetVisitExaminationsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClinicalServiceGetVisitExaminationsArgs) SetReq(val *GetVisitExaminationsRequest) {
	p.Req = val
}

func (p *ClinicalServiceGetVisitExaminationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClinicalServiceGetVisitExaminationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceGetVisitExaminationsArgs(%+v)", *p)
}

var fieldIDToName_ClinicalServiceGetVisitExaminationsArgs = map[int16]string{
	1: "req",
}

type ClinicalServiceGetVisitExaminationsResult struct {
	Success *GetVisitExaminationsResponse `thrift:"success,0,optional" frugal:"0,optional,GetVisitExaminationsResponse" json:"success,omitempty"`
}

func NewClinicalServiceGetVisitExaminationsResult() *ClinicalServiceGetVisitExaminationsResult {
	return &ClinicalServiceGetVisitExaminationsResult{}
}

func (p *ClinicalServiceGetVisitExaminationsResult) InitDefault() {
}

var ClinicalServiceGetVisitExaminationsResult_Success_DEFAULT *GetVisitExaminationsResponse

func (p *ClinicalServiceGetVisitExaminationsResult) GetSuccess() (v *GetVisitExaminationsResponse) {
	if !p.IsSetSuccess() {
		return ClinicalServiceGetVisitExaminationsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClinicalServiceGetVisitExaminationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetVisitExaminationsResponse)
}

func (p *ClinicalServiceGetVisitExaminationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalServiceGetVisitExaminationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceGetVisitExaminationsResult(%+v)", *p)
}

var fieldIDToName_ClinicalServiceGetVisitExaminationsResult = map[int16]string{
	0: "success",
}

type ClinicalServiceListAllExaminationsArgs struct {
	Req *ListAllExaminationsRequest `thrift:"req,1" frugal:"1,default,ListAllExaminationsRequest" json:"req"`
}

func NewClinicalServiceListAllExaminationsArgs() *ClinicalServiceListAllExaminationsArgs {
	return &ClinicalServiceListAllExaminationsArgs{}
}

func (p *ClinicalServiceListAllExaminationsArgs) InitDefault() {
}

var ClinicalServiceListAllExaminationsArgs_Req_DEFAULT *ListAllExaminationsRequest

func (p *ClinicalServiceListAllExaminationsArgs) GetReq() (v *ListAllExaminationsRequest) {
	if !p.IsSetReq() {
		return ClinicalServiceListAllExaminationsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ClinicalServiceListAllExaminationsArgs) SetReq(val *ListAllExaminationsRequest) {
	p.Req = val
}

func (p *ClinicalServiceListAllExaminationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClinicalServiceListAllExaminationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceListAllExaminationsArgs(%+v)", *p)
}

var fieldIDToName_ClinicalServiceListAllExaminationsArgs = map[int16]string{
	1: "req",
}

type ClinicalServiceListAllExaminationsResult struct {
	Success *ListAllExaminationsResponse `thrift:"success,0,optional" frugal:"0,optional,ListAllExaminationsResponse" json:"success,omitempty"`
}

func NewClinicalServiceListAllExaminationsResult() *ClinicalServiceListAllExaminationsResult {
	return &ClinicalServiceListAllExaminationsResult{}
}

func (p *ClinicalServiceListAllExaminationsResult) InitDefault() {
}

var ClinicalServiceListAllExaminationsResult_Success_DEFAULT *ListAllExaminationsResponse

func (p *ClinicalServiceListAllExaminationsResult) GetSuccess() (v *ListAllExaminationsResponse) {
	if !p.IsSetSuccess() {
		return ClinicalServiceListAllExaminationsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ClinicalServiceListAllExaminationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListAllExaminationsResponse)
}

func (p *ClinicalServiceListAllExaminationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClinicalServiceListAllExaminationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClinicalServiceListAllExaminationsResult(%+v)", *p)
}

var fieldIDToName_ClinicalServiceListAllExaminationsResult = map[int16]string{
	0: "success",
}
