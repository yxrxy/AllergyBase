// Code generated by Kitex v0.13.1. DO NOT EDIT.

package clinicalservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	clinical "github.com/yxrxy/AllergyBase/kitex_gen/clinical"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreatePatient": kitex.NewMethodInfo(
		createPatientHandler,
		newClinicalServiceCreatePatientArgs,
		newClinicalServiceCreatePatientResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPatient": kitex.NewMethodInfo(
		getPatientHandler,
		newClinicalServiceGetPatientArgs,
		newClinicalServiceGetPatientResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListPatients": kitex.NewMethodInfo(
		listPatientsHandler,
		newClinicalServiceListPatientsArgs,
		newClinicalServiceListPatientsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateVisit": kitex.NewMethodInfo(
		createVisitHandler,
		newClinicalServiceCreateVisitArgs,
		newClinicalServiceCreateVisitResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVisit": kitex.NewMethodInfo(
		getVisitHandler,
		newClinicalServiceGetVisitArgs,
		newClinicalServiceGetVisitResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPatientVisits": kitex.NewMethodInfo(
		getPatientVisitsHandler,
		newClinicalServiceGetPatientVisitsArgs,
		newClinicalServiceGetPatientVisitsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListAllVisits": kitex.NewMethodInfo(
		listAllVisitsHandler,
		newClinicalServiceListAllVisitsArgs,
		newClinicalServiceListAllVisitsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AddDiagnosis": kitex.NewMethodInfo(
		addDiagnosisHandler,
		newClinicalServiceAddDiagnosisArgs,
		newClinicalServiceAddDiagnosisResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVisitDiagnoses": kitex.NewMethodInfo(
		getVisitDiagnosesHandler,
		newClinicalServiceGetVisitDiagnosesArgs,
		newClinicalServiceGetVisitDiagnosesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListAllDiagnoses": kitex.NewMethodInfo(
		listAllDiagnosesHandler,
		newClinicalServiceListAllDiagnosesArgs,
		newClinicalServiceListAllDiagnosesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AddExamination": kitex.NewMethodInfo(
		addExaminationHandler,
		newClinicalServiceAddExaminationArgs,
		newClinicalServiceAddExaminationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVisitExaminations": kitex.NewMethodInfo(
		getVisitExaminationsHandler,
		newClinicalServiceGetVisitExaminationsArgs,
		newClinicalServiceGetVisitExaminationsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListAllExaminations": kitex.NewMethodInfo(
		listAllExaminationsHandler,
		newClinicalServiceListAllExaminationsArgs,
		newClinicalServiceListAllExaminationsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	clinicalServiceServiceInfo                = NewServiceInfo()
	clinicalServiceServiceInfoForClient       = NewServiceInfoForClient()
	clinicalServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return clinicalServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return clinicalServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return clinicalServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ClinicalService"
	handlerType := (*clinical.ClinicalService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "clinical",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func createPatientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*clinical.ClinicalServiceCreatePatientArgs)
	realResult := result.(*clinical.ClinicalServiceCreatePatientResult)
	success, err := handler.(clinical.ClinicalService).CreatePatient(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClinicalServiceCreatePatientArgs() interface{} {
	return clinical.NewClinicalServiceCreatePatientArgs()
}

func newClinicalServiceCreatePatientResult() interface{} {
	return clinical.NewClinicalServiceCreatePatientResult()
}

func getPatientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*clinical.ClinicalServiceGetPatientArgs)
	realResult := result.(*clinical.ClinicalServiceGetPatientResult)
	success, err := handler.(clinical.ClinicalService).GetPatient(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClinicalServiceGetPatientArgs() interface{} {
	return clinical.NewClinicalServiceGetPatientArgs()
}

func newClinicalServiceGetPatientResult() interface{} {
	return clinical.NewClinicalServiceGetPatientResult()
}

func listPatientsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*clinical.ClinicalServiceListPatientsArgs)
	realResult := result.(*clinical.ClinicalServiceListPatientsResult)
	success, err := handler.(clinical.ClinicalService).ListPatients(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClinicalServiceListPatientsArgs() interface{} {
	return clinical.NewClinicalServiceListPatientsArgs()
}

func newClinicalServiceListPatientsResult() interface{} {
	return clinical.NewClinicalServiceListPatientsResult()
}

func createVisitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*clinical.ClinicalServiceCreateVisitArgs)
	realResult := result.(*clinical.ClinicalServiceCreateVisitResult)
	success, err := handler.(clinical.ClinicalService).CreateVisit(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClinicalServiceCreateVisitArgs() interface{} {
	return clinical.NewClinicalServiceCreateVisitArgs()
}

func newClinicalServiceCreateVisitResult() interface{} {
	return clinical.NewClinicalServiceCreateVisitResult()
}

func getVisitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*clinical.ClinicalServiceGetVisitArgs)
	realResult := result.(*clinical.ClinicalServiceGetVisitResult)
	success, err := handler.(clinical.ClinicalService).GetVisit(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClinicalServiceGetVisitArgs() interface{} {
	return clinical.NewClinicalServiceGetVisitArgs()
}

func newClinicalServiceGetVisitResult() interface{} {
	return clinical.NewClinicalServiceGetVisitResult()
}

func getPatientVisitsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*clinical.ClinicalServiceGetPatientVisitsArgs)
	realResult := result.(*clinical.ClinicalServiceGetPatientVisitsResult)
	success, err := handler.(clinical.ClinicalService).GetPatientVisits(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClinicalServiceGetPatientVisitsArgs() interface{} {
	return clinical.NewClinicalServiceGetPatientVisitsArgs()
}

func newClinicalServiceGetPatientVisitsResult() interface{} {
	return clinical.NewClinicalServiceGetPatientVisitsResult()
}

func listAllVisitsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*clinical.ClinicalServiceListAllVisitsArgs)
	realResult := result.(*clinical.ClinicalServiceListAllVisitsResult)
	success, err := handler.(clinical.ClinicalService).ListAllVisits(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClinicalServiceListAllVisitsArgs() interface{} {
	return clinical.NewClinicalServiceListAllVisitsArgs()
}

func newClinicalServiceListAllVisitsResult() interface{} {
	return clinical.NewClinicalServiceListAllVisitsResult()
}

func addDiagnosisHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*clinical.ClinicalServiceAddDiagnosisArgs)
	realResult := result.(*clinical.ClinicalServiceAddDiagnosisResult)
	success, err := handler.(clinical.ClinicalService).AddDiagnosis(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClinicalServiceAddDiagnosisArgs() interface{} {
	return clinical.NewClinicalServiceAddDiagnosisArgs()
}

func newClinicalServiceAddDiagnosisResult() interface{} {
	return clinical.NewClinicalServiceAddDiagnosisResult()
}

func getVisitDiagnosesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*clinical.ClinicalServiceGetVisitDiagnosesArgs)
	realResult := result.(*clinical.ClinicalServiceGetVisitDiagnosesResult)
	success, err := handler.(clinical.ClinicalService).GetVisitDiagnoses(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClinicalServiceGetVisitDiagnosesArgs() interface{} {
	return clinical.NewClinicalServiceGetVisitDiagnosesArgs()
}

func newClinicalServiceGetVisitDiagnosesResult() interface{} {
	return clinical.NewClinicalServiceGetVisitDiagnosesResult()
}

func listAllDiagnosesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*clinical.ClinicalServiceListAllDiagnosesArgs)
	realResult := result.(*clinical.ClinicalServiceListAllDiagnosesResult)
	success, err := handler.(clinical.ClinicalService).ListAllDiagnoses(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClinicalServiceListAllDiagnosesArgs() interface{} {
	return clinical.NewClinicalServiceListAllDiagnosesArgs()
}

func newClinicalServiceListAllDiagnosesResult() interface{} {
	return clinical.NewClinicalServiceListAllDiagnosesResult()
}

func addExaminationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*clinical.ClinicalServiceAddExaminationArgs)
	realResult := result.(*clinical.ClinicalServiceAddExaminationResult)
	success, err := handler.(clinical.ClinicalService).AddExamination(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClinicalServiceAddExaminationArgs() interface{} {
	return clinical.NewClinicalServiceAddExaminationArgs()
}

func newClinicalServiceAddExaminationResult() interface{} {
	return clinical.NewClinicalServiceAddExaminationResult()
}

func getVisitExaminationsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*clinical.ClinicalServiceGetVisitExaminationsArgs)
	realResult := result.(*clinical.ClinicalServiceGetVisitExaminationsResult)
	success, err := handler.(clinical.ClinicalService).GetVisitExaminations(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClinicalServiceGetVisitExaminationsArgs() interface{} {
	return clinical.NewClinicalServiceGetVisitExaminationsArgs()
}

func newClinicalServiceGetVisitExaminationsResult() interface{} {
	return clinical.NewClinicalServiceGetVisitExaminationsResult()
}

func listAllExaminationsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*clinical.ClinicalServiceListAllExaminationsArgs)
	realResult := result.(*clinical.ClinicalServiceListAllExaminationsResult)
	success, err := handler.(clinical.ClinicalService).ListAllExaminations(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClinicalServiceListAllExaminationsArgs() interface{} {
	return clinical.NewClinicalServiceListAllExaminationsArgs()
}

func newClinicalServiceListAllExaminationsResult() interface{} {
	return clinical.NewClinicalServiceListAllExaminationsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreatePatient(ctx context.Context, req *clinical.CreatePatientRequest) (r *clinical.CreatePatientResponse, err error) {
	var _args clinical.ClinicalServiceCreatePatientArgs
	_args.Req = req
	var _result clinical.ClinicalServiceCreatePatientResult
	if err = p.c.Call(ctx, "CreatePatient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPatient(ctx context.Context, req *clinical.GetPatientRequest) (r *clinical.GetPatientResponse, err error) {
	var _args clinical.ClinicalServiceGetPatientArgs
	_args.Req = req
	var _result clinical.ClinicalServiceGetPatientResult
	if err = p.c.Call(ctx, "GetPatient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListPatients(ctx context.Context, req *clinical.ListPatientsRequest) (r *clinical.ListPatientsResponse, err error) {
	var _args clinical.ClinicalServiceListPatientsArgs
	_args.Req = req
	var _result clinical.ClinicalServiceListPatientsResult
	if err = p.c.Call(ctx, "ListPatients", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateVisit(ctx context.Context, req *clinical.CreateVisitRequest) (r *clinical.CreateVisitResponse, err error) {
	var _args clinical.ClinicalServiceCreateVisitArgs
	_args.Req = req
	var _result clinical.ClinicalServiceCreateVisitResult
	if err = p.c.Call(ctx, "CreateVisit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVisit(ctx context.Context, req *clinical.GetVisitRequest) (r *clinical.GetVisitResponse, err error) {
	var _args clinical.ClinicalServiceGetVisitArgs
	_args.Req = req
	var _result clinical.ClinicalServiceGetVisitResult
	if err = p.c.Call(ctx, "GetVisit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPatientVisits(ctx context.Context, req *clinical.GetPatientVisitsRequest) (r *clinical.GetPatientVisitsResponse, err error) {
	var _args clinical.ClinicalServiceGetPatientVisitsArgs
	_args.Req = req
	var _result clinical.ClinicalServiceGetPatientVisitsResult
	if err = p.c.Call(ctx, "GetPatientVisits", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListAllVisits(ctx context.Context, req *clinical.ListAllVisitsRequest) (r *clinical.ListAllVisitsResponse, err error) {
	var _args clinical.ClinicalServiceListAllVisitsArgs
	_args.Req = req
	var _result clinical.ClinicalServiceListAllVisitsResult
	if err = p.c.Call(ctx, "ListAllVisits", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddDiagnosis(ctx context.Context, req *clinical.AddDiagnosisRequest) (r *clinical.AddDiagnosisResponse, err error) {
	var _args clinical.ClinicalServiceAddDiagnosisArgs
	_args.Req = req
	var _result clinical.ClinicalServiceAddDiagnosisResult
	if err = p.c.Call(ctx, "AddDiagnosis", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVisitDiagnoses(ctx context.Context, req *clinical.GetVisitDiagnosesRequest) (r *clinical.GetVisitDiagnosesResponse, err error) {
	var _args clinical.ClinicalServiceGetVisitDiagnosesArgs
	_args.Req = req
	var _result clinical.ClinicalServiceGetVisitDiagnosesResult
	if err = p.c.Call(ctx, "GetVisitDiagnoses", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListAllDiagnoses(ctx context.Context, req *clinical.ListAllDiagnosesRequest) (r *clinical.ListAllDiagnosesResponse, err error) {
	var _args clinical.ClinicalServiceListAllDiagnosesArgs
	_args.Req = req
	var _result clinical.ClinicalServiceListAllDiagnosesResult
	if err = p.c.Call(ctx, "ListAllDiagnoses", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddExamination(ctx context.Context, req *clinical.AddExaminationRequest) (r *clinical.AddExaminationResponse, err error) {
	var _args clinical.ClinicalServiceAddExaminationArgs
	_args.Req = req
	var _result clinical.ClinicalServiceAddExaminationResult
	if err = p.c.Call(ctx, "AddExamination", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVisitExaminations(ctx context.Context, req *clinical.GetVisitExaminationsRequest) (r *clinical.GetVisitExaminationsResponse, err error) {
	var _args clinical.ClinicalServiceGetVisitExaminationsArgs
	_args.Req = req
	var _result clinical.ClinicalServiceGetVisitExaminationsResult
	if err = p.c.Call(ctx, "GetVisitExaminations", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListAllExaminations(ctx context.Context, req *clinical.ListAllExaminationsRequest) (r *clinical.ListAllExaminationsResponse, err error) {
	var _args clinical.ClinicalServiceListAllExaminationsArgs
	_args.Req = req
	var _result clinical.ClinicalServiceListAllExaminationsResult
	if err = p.c.Call(ctx, "ListAllExaminations", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
