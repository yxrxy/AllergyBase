// Code generated by Kitex v0.13.1. DO NOT EDIT.

package epidemiologyservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	epidemiology "github.com/yxrxy/AllergyBase/kitex_gen/epidemiology"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateEnvironmentExposure(ctx context.Context, req *epidemiology.CreateEnvironmentExposureRequest, callOptions ...callopt.Option) (r *epidemiology.CreateEnvironmentExposureResponse, err error)
	GetEnvironmentExposure(ctx context.Context, req *epidemiology.GetEnvironmentExposureRequest, callOptions ...callopt.Option) (r *epidemiology.GetEnvironmentExposureResponse, err error)
	GetPatientEnvironmentExposures(ctx context.Context, req *epidemiology.GetPatientEnvironmentExposuresRequest, callOptions ...callopt.Option) (r *epidemiology.GetPatientEnvironmentExposuresResponse, err error)
	AddEnvironmentMonitor(ctx context.Context, req *epidemiology.AddEnvironmentMonitorRequest, callOptions ...callopt.Option) (r *epidemiology.AddEnvironmentMonitorResponse, err error)
	GetEnvironmentMonitors(ctx context.Context, req *epidemiology.GetEnvironmentMonitorsRequest, callOptions ...callopt.Option) (r *epidemiology.GetEnvironmentMonitorsResponse, err error)
	CreateLifestyleSurvey(ctx context.Context, req *epidemiology.CreateLifestyleSurveyRequest, callOptions ...callopt.Option) (r *epidemiology.CreateLifestyleSurveyResponse, err error)
	GetLifestyleSurvey(ctx context.Context, req *epidemiology.GetLifestyleSurveyRequest, callOptions ...callopt.Option) (r *epidemiology.GetLifestyleSurveyResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kEpidemiologyServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kEpidemiologyServiceClient struct {
	*kClient
}

func (p *kEpidemiologyServiceClient) CreateEnvironmentExposure(ctx context.Context, req *epidemiology.CreateEnvironmentExposureRequest, callOptions ...callopt.Option) (r *epidemiology.CreateEnvironmentExposureResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateEnvironmentExposure(ctx, req)
}

func (p *kEpidemiologyServiceClient) GetEnvironmentExposure(ctx context.Context, req *epidemiology.GetEnvironmentExposureRequest, callOptions ...callopt.Option) (r *epidemiology.GetEnvironmentExposureResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetEnvironmentExposure(ctx, req)
}

func (p *kEpidemiologyServiceClient) GetPatientEnvironmentExposures(ctx context.Context, req *epidemiology.GetPatientEnvironmentExposuresRequest, callOptions ...callopt.Option) (r *epidemiology.GetPatientEnvironmentExposuresResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPatientEnvironmentExposures(ctx, req)
}

func (p *kEpidemiologyServiceClient) AddEnvironmentMonitor(ctx context.Context, req *epidemiology.AddEnvironmentMonitorRequest, callOptions ...callopt.Option) (r *epidemiology.AddEnvironmentMonitorResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddEnvironmentMonitor(ctx, req)
}

func (p *kEpidemiologyServiceClient) GetEnvironmentMonitors(ctx context.Context, req *epidemiology.GetEnvironmentMonitorsRequest, callOptions ...callopt.Option) (r *epidemiology.GetEnvironmentMonitorsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetEnvironmentMonitors(ctx, req)
}

func (p *kEpidemiologyServiceClient) CreateLifestyleSurvey(ctx context.Context, req *epidemiology.CreateLifestyleSurveyRequest, callOptions ...callopt.Option) (r *epidemiology.CreateLifestyleSurveyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateLifestyleSurvey(ctx, req)
}

func (p *kEpidemiologyServiceClient) GetLifestyleSurvey(ctx context.Context, req *epidemiology.GetLifestyleSurveyRequest, callOptions ...callopt.Option) (r *epidemiology.GetLifestyleSurveyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetLifestyleSurvey(ctx, req)
}
