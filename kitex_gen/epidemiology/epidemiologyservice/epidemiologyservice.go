// Code generated by Kitex v0.13.1. DO NOT EDIT.

package epidemiologyservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	epidemiology "github.com/yxrxy/AllergyBase/kitex_gen/epidemiology"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateEnvironmentExposure": kitex.NewMethodInfo(
		createEnvironmentExposureHandler,
		newEpidemiologyServiceCreateEnvironmentExposureArgs,
		newEpidemiologyServiceCreateEnvironmentExposureResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetEnvironmentExposure": kitex.NewMethodInfo(
		getEnvironmentExposureHandler,
		newEpidemiologyServiceGetEnvironmentExposureArgs,
		newEpidemiologyServiceGetEnvironmentExposureResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPatientEnvironmentExposures": kitex.NewMethodInfo(
		getPatientEnvironmentExposuresHandler,
		newEpidemiologyServiceGetPatientEnvironmentExposuresArgs,
		newEpidemiologyServiceGetPatientEnvironmentExposuresResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AddEnvironmentMonitor": kitex.NewMethodInfo(
		addEnvironmentMonitorHandler,
		newEpidemiologyServiceAddEnvironmentMonitorArgs,
		newEpidemiologyServiceAddEnvironmentMonitorResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetEnvironmentMonitors": kitex.NewMethodInfo(
		getEnvironmentMonitorsHandler,
		newEpidemiologyServiceGetEnvironmentMonitorsArgs,
		newEpidemiologyServiceGetEnvironmentMonitorsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateLifestyleSurvey": kitex.NewMethodInfo(
		createLifestyleSurveyHandler,
		newEpidemiologyServiceCreateLifestyleSurveyArgs,
		newEpidemiologyServiceCreateLifestyleSurveyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetLifestyleSurvey": kitex.NewMethodInfo(
		getLifestyleSurveyHandler,
		newEpidemiologyServiceGetLifestyleSurveyArgs,
		newEpidemiologyServiceGetLifestyleSurveyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	epidemiologyServiceServiceInfo                = NewServiceInfo()
	epidemiologyServiceServiceInfoForClient       = NewServiceInfoForClient()
	epidemiologyServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return epidemiologyServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return epidemiologyServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return epidemiologyServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "EpidemiologyService"
	handlerType := (*epidemiology.EpidemiologyService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "epidemiology",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func createEnvironmentExposureHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*epidemiology.EpidemiologyServiceCreateEnvironmentExposureArgs)
	realResult := result.(*epidemiology.EpidemiologyServiceCreateEnvironmentExposureResult)
	success, err := handler.(epidemiology.EpidemiologyService).CreateEnvironmentExposure(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEpidemiologyServiceCreateEnvironmentExposureArgs() interface{} {
	return epidemiology.NewEpidemiologyServiceCreateEnvironmentExposureArgs()
}

func newEpidemiologyServiceCreateEnvironmentExposureResult() interface{} {
	return epidemiology.NewEpidemiologyServiceCreateEnvironmentExposureResult()
}

func getEnvironmentExposureHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*epidemiology.EpidemiologyServiceGetEnvironmentExposureArgs)
	realResult := result.(*epidemiology.EpidemiologyServiceGetEnvironmentExposureResult)
	success, err := handler.(epidemiology.EpidemiologyService).GetEnvironmentExposure(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEpidemiologyServiceGetEnvironmentExposureArgs() interface{} {
	return epidemiology.NewEpidemiologyServiceGetEnvironmentExposureArgs()
}

func newEpidemiologyServiceGetEnvironmentExposureResult() interface{} {
	return epidemiology.NewEpidemiologyServiceGetEnvironmentExposureResult()
}

func getPatientEnvironmentExposuresHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*epidemiology.EpidemiologyServiceGetPatientEnvironmentExposuresArgs)
	realResult := result.(*epidemiology.EpidemiologyServiceGetPatientEnvironmentExposuresResult)
	success, err := handler.(epidemiology.EpidemiologyService).GetPatientEnvironmentExposures(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEpidemiologyServiceGetPatientEnvironmentExposuresArgs() interface{} {
	return epidemiology.NewEpidemiologyServiceGetPatientEnvironmentExposuresArgs()
}

func newEpidemiologyServiceGetPatientEnvironmentExposuresResult() interface{} {
	return epidemiology.NewEpidemiologyServiceGetPatientEnvironmentExposuresResult()
}

func addEnvironmentMonitorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*epidemiology.EpidemiologyServiceAddEnvironmentMonitorArgs)
	realResult := result.(*epidemiology.EpidemiologyServiceAddEnvironmentMonitorResult)
	success, err := handler.(epidemiology.EpidemiologyService).AddEnvironmentMonitor(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEpidemiologyServiceAddEnvironmentMonitorArgs() interface{} {
	return epidemiology.NewEpidemiologyServiceAddEnvironmentMonitorArgs()
}

func newEpidemiologyServiceAddEnvironmentMonitorResult() interface{} {
	return epidemiology.NewEpidemiologyServiceAddEnvironmentMonitorResult()
}

func getEnvironmentMonitorsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*epidemiology.EpidemiologyServiceGetEnvironmentMonitorsArgs)
	realResult := result.(*epidemiology.EpidemiologyServiceGetEnvironmentMonitorsResult)
	success, err := handler.(epidemiology.EpidemiologyService).GetEnvironmentMonitors(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEpidemiologyServiceGetEnvironmentMonitorsArgs() interface{} {
	return epidemiology.NewEpidemiologyServiceGetEnvironmentMonitorsArgs()
}

func newEpidemiologyServiceGetEnvironmentMonitorsResult() interface{} {
	return epidemiology.NewEpidemiologyServiceGetEnvironmentMonitorsResult()
}

func createLifestyleSurveyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*epidemiology.EpidemiologyServiceCreateLifestyleSurveyArgs)
	realResult := result.(*epidemiology.EpidemiologyServiceCreateLifestyleSurveyResult)
	success, err := handler.(epidemiology.EpidemiologyService).CreateLifestyleSurvey(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEpidemiologyServiceCreateLifestyleSurveyArgs() interface{} {
	return epidemiology.NewEpidemiologyServiceCreateLifestyleSurveyArgs()
}

func newEpidemiologyServiceCreateLifestyleSurveyResult() interface{} {
	return epidemiology.NewEpidemiologyServiceCreateLifestyleSurveyResult()
}

func getLifestyleSurveyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*epidemiology.EpidemiologyServiceGetLifestyleSurveyArgs)
	realResult := result.(*epidemiology.EpidemiologyServiceGetLifestyleSurveyResult)
	success, err := handler.(epidemiology.EpidemiologyService).GetLifestyleSurvey(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEpidemiologyServiceGetLifestyleSurveyArgs() interface{} {
	return epidemiology.NewEpidemiologyServiceGetLifestyleSurveyArgs()
}

func newEpidemiologyServiceGetLifestyleSurveyResult() interface{} {
	return epidemiology.NewEpidemiologyServiceGetLifestyleSurveyResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateEnvironmentExposure(ctx context.Context, req *epidemiology.CreateEnvironmentExposureRequest) (r *epidemiology.CreateEnvironmentExposureResponse, err error) {
	var _args epidemiology.EpidemiologyServiceCreateEnvironmentExposureArgs
	_args.Req = req
	var _result epidemiology.EpidemiologyServiceCreateEnvironmentExposureResult
	if err = p.c.Call(ctx, "CreateEnvironmentExposure", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetEnvironmentExposure(ctx context.Context, req *epidemiology.GetEnvironmentExposureRequest) (r *epidemiology.GetEnvironmentExposureResponse, err error) {
	var _args epidemiology.EpidemiologyServiceGetEnvironmentExposureArgs
	_args.Req = req
	var _result epidemiology.EpidemiologyServiceGetEnvironmentExposureResult
	if err = p.c.Call(ctx, "GetEnvironmentExposure", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPatientEnvironmentExposures(ctx context.Context, req *epidemiology.GetPatientEnvironmentExposuresRequest) (r *epidemiology.GetPatientEnvironmentExposuresResponse, err error) {
	var _args epidemiology.EpidemiologyServiceGetPatientEnvironmentExposuresArgs
	_args.Req = req
	var _result epidemiology.EpidemiologyServiceGetPatientEnvironmentExposuresResult
	if err = p.c.Call(ctx, "GetPatientEnvironmentExposures", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddEnvironmentMonitor(ctx context.Context, req *epidemiology.AddEnvironmentMonitorRequest) (r *epidemiology.AddEnvironmentMonitorResponse, err error) {
	var _args epidemiology.EpidemiologyServiceAddEnvironmentMonitorArgs
	_args.Req = req
	var _result epidemiology.EpidemiologyServiceAddEnvironmentMonitorResult
	if err = p.c.Call(ctx, "AddEnvironmentMonitor", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetEnvironmentMonitors(ctx context.Context, req *epidemiology.GetEnvironmentMonitorsRequest) (r *epidemiology.GetEnvironmentMonitorsResponse, err error) {
	var _args epidemiology.EpidemiologyServiceGetEnvironmentMonitorsArgs
	_args.Req = req
	var _result epidemiology.EpidemiologyServiceGetEnvironmentMonitorsResult
	if err = p.c.Call(ctx, "GetEnvironmentMonitors", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateLifestyleSurvey(ctx context.Context, req *epidemiology.CreateLifestyleSurveyRequest) (r *epidemiology.CreateLifestyleSurveyResponse, err error) {
	var _args epidemiology.EpidemiologyServiceCreateLifestyleSurveyArgs
	_args.Req = req
	var _result epidemiology.EpidemiologyServiceCreateLifestyleSurveyResult
	if err = p.c.Call(ctx, "CreateLifestyleSurvey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLifestyleSurvey(ctx context.Context, req *epidemiology.GetLifestyleSurveyRequest) (r *epidemiology.GetLifestyleSurveyResponse, err error) {
	var _args epidemiology.EpidemiologyServiceGetLifestyleSurveyArgs
	_args.Req = req
	var _result epidemiology.EpidemiologyServiceGetLifestyleSurveyResult
	if err = p.c.Call(ctx, "GetLifestyleSurvey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
