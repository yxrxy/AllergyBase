// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package followup

import (
	"context"
	"fmt"
	"github.com/yxrxy/AllergyBase/kitex_gen/model"
)

type CreateFollowupPlanRequest struct {
	Plan *model.FollowupPlan `thrift:"plan,1,required" frugal:"1,required,model.FollowupPlan" json:"plan"`
}

func NewCreateFollowupPlanRequest() *CreateFollowupPlanRequest {
	return &CreateFollowupPlanRequest{}
}

func (p *CreateFollowupPlanRequest) InitDefault() {
}

var CreateFollowupPlanRequest_Plan_DEFAULT *model.FollowupPlan

func (p *CreateFollowupPlanRequest) GetPlan() (v *model.FollowupPlan) {
	if !p.IsSetPlan() {
		return CreateFollowupPlanRequest_Plan_DEFAULT
	}
	return p.Plan
}
func (p *CreateFollowupPlanRequest) SetPlan(val *model.FollowupPlan) {
	p.Plan = val
}

func (p *CreateFollowupPlanRequest) IsSetPlan() bool {
	return p.Plan != nil
}

func (p *CreateFollowupPlanRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFollowupPlanRequest(%+v)", *p)
}

var fieldIDToName_CreateFollowupPlanRequest = map[int16]string{
	1: "plan",
}

type CreateFollowupPlanResponse struct {
	Base   *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	PlanId int64           `thrift:"planId,2,required" frugal:"2,required,i64" json:"planId"`
}

func NewCreateFollowupPlanResponse() *CreateFollowupPlanResponse {
	return &CreateFollowupPlanResponse{}
}

func (p *CreateFollowupPlanResponse) InitDefault() {
}

var CreateFollowupPlanResponse_Base_DEFAULT *model.BaseResp

func (p *CreateFollowupPlanResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateFollowupPlanResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *CreateFollowupPlanResponse) GetPlanId() (v int64) {
	return p.PlanId
}
func (p *CreateFollowupPlanResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateFollowupPlanResponse) SetPlanId(val int64) {
	p.PlanId = val
}

func (p *CreateFollowupPlanResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateFollowupPlanResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFollowupPlanResponse(%+v)", *p)
}

var fieldIDToName_CreateFollowupPlanResponse = map[int16]string{
	1: "Base",
	2: "planId",
}

type GetFollowupPlanRequest struct {
	PlanId int64 `thrift:"planId,1,required" frugal:"1,required,i64" json:"planId"`
}

func NewGetFollowupPlanRequest() *GetFollowupPlanRequest {
	return &GetFollowupPlanRequest{}
}

func (p *GetFollowupPlanRequest) InitDefault() {
}

func (p *GetFollowupPlanRequest) GetPlanId() (v int64) {
	return p.PlanId
}
func (p *GetFollowupPlanRequest) SetPlanId(val int64) {
	p.PlanId = val
}

func (p *GetFollowupPlanRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFollowupPlanRequest(%+v)", *p)
}

var fieldIDToName_GetFollowupPlanRequest = map[int16]string{
	1: "planId",
}

type GetFollowupPlanResponse struct {
	Base *model.BaseResp     `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Plan *model.FollowupPlan `thrift:"plan,2,required" frugal:"2,required,model.FollowupPlan" json:"plan"`
}

func NewGetFollowupPlanResponse() *GetFollowupPlanResponse {
	return &GetFollowupPlanResponse{}
}

func (p *GetFollowupPlanResponse) InitDefault() {
}

var GetFollowupPlanResponse_Base_DEFAULT *model.BaseResp

func (p *GetFollowupPlanResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetFollowupPlanResponse_Base_DEFAULT
	}
	return p.Base
}

var GetFollowupPlanResponse_Plan_DEFAULT *model.FollowupPlan

func (p *GetFollowupPlanResponse) GetPlan() (v *model.FollowupPlan) {
	if !p.IsSetPlan() {
		return GetFollowupPlanResponse_Plan_DEFAULT
	}
	return p.Plan
}
func (p *GetFollowupPlanResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetFollowupPlanResponse) SetPlan(val *model.FollowupPlan) {
	p.Plan = val
}

func (p *GetFollowupPlanResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetFollowupPlanResponse) IsSetPlan() bool {
	return p.Plan != nil
}

func (p *GetFollowupPlanResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFollowupPlanResponse(%+v)", *p)
}

var fieldIDToName_GetFollowupPlanResponse = map[int16]string{
	1: "Base",
	2: "plan",
}

type GetFollowupPlansRequest struct {
	Page     *int32  `thrift:"page,1,optional" frugal:"1,optional,i32" json:"page,omitempty"`
	PageSize *int32  `thrift:"pageSize,2,optional" frugal:"2,optional,i32" json:"pageSize,omitempty"`
	Status   *string `thrift:"status,3,optional" frugal:"3,optional,string" json:"status,omitempty"`
	PlanName *string `thrift:"planName,4,optional" frugal:"4,optional,string" json:"planName,omitempty"`
}

func NewGetFollowupPlansRequest() *GetFollowupPlansRequest {
	return &GetFollowupPlansRequest{}
}

func (p *GetFollowupPlansRequest) InitDefault() {
}

var GetFollowupPlansRequest_Page_DEFAULT int32

func (p *GetFollowupPlansRequest) GetPage() (v int32) {
	if !p.IsSetPage() {
		return GetFollowupPlansRequest_Page_DEFAULT
	}
	return *p.Page
}

var GetFollowupPlansRequest_PageSize_DEFAULT int32

func (p *GetFollowupPlansRequest) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return GetFollowupPlansRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var GetFollowupPlansRequest_Status_DEFAULT string

func (p *GetFollowupPlansRequest) GetStatus() (v string) {
	if !p.IsSetStatus() {
		return GetFollowupPlansRequest_Status_DEFAULT
	}
	return *p.Status
}

var GetFollowupPlansRequest_PlanName_DEFAULT string

func (p *GetFollowupPlansRequest) GetPlanName() (v string) {
	if !p.IsSetPlanName() {
		return GetFollowupPlansRequest_PlanName_DEFAULT
	}
	return *p.PlanName
}
func (p *GetFollowupPlansRequest) SetPage(val *int32) {
	p.Page = val
}
func (p *GetFollowupPlansRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *GetFollowupPlansRequest) SetStatus(val *string) {
	p.Status = val
}
func (p *GetFollowupPlansRequest) SetPlanName(val *string) {
	p.PlanName = val
}

func (p *GetFollowupPlansRequest) IsSetPage() bool {
	return p.Page != nil
}

func (p *GetFollowupPlansRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *GetFollowupPlansRequest) IsSetStatus() bool {
	return p.Status != nil
}

func (p *GetFollowupPlansRequest) IsSetPlanName() bool {
	return p.PlanName != nil
}

func (p *GetFollowupPlansRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFollowupPlansRequest(%+v)", *p)
}

var fieldIDToName_GetFollowupPlansRequest = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "status",
	4: "planName",
}

type GetFollowupPlansResponse struct {
	Base  *model.BaseResp       `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Plans []*model.FollowupPlan `thrift:"plans,2,required" frugal:"2,required,list<model.FollowupPlan>" json:"plans"`
	Total int32                 `thrift:"total,3,required" frugal:"3,required,i32" json:"total"`
}

func NewGetFollowupPlansResponse() *GetFollowupPlansResponse {
	return &GetFollowupPlansResponse{}
}

func (p *GetFollowupPlansResponse) InitDefault() {
}

var GetFollowupPlansResponse_Base_DEFAULT *model.BaseResp

func (p *GetFollowupPlansResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetFollowupPlansResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetFollowupPlansResponse) GetPlans() (v []*model.FollowupPlan) {
	return p.Plans
}

func (p *GetFollowupPlansResponse) GetTotal() (v int32) {
	return p.Total
}
func (p *GetFollowupPlansResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetFollowupPlansResponse) SetPlans(val []*model.FollowupPlan) {
	p.Plans = val
}
func (p *GetFollowupPlansResponse) SetTotal(val int32) {
	p.Total = val
}

func (p *GetFollowupPlansResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetFollowupPlansResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFollowupPlansResponse(%+v)", *p)
}

var fieldIDToName_GetFollowupPlansResponse = map[int16]string{
	1: "Base",
	2: "plans",
	3: "total",
}

type GetPatientFollowupPlansRequest struct {
	PatientId int64 `thrift:"patientId,1,required" frugal:"1,required,i64" json:"patientId"`
}

func NewGetPatientFollowupPlansRequest() *GetPatientFollowupPlansRequest {
	return &GetPatientFollowupPlansRequest{}
}

func (p *GetPatientFollowupPlansRequest) InitDefault() {
}

func (p *GetPatientFollowupPlansRequest) GetPatientId() (v int64) {
	return p.PatientId
}
func (p *GetPatientFollowupPlansRequest) SetPatientId(val int64) {
	p.PatientId = val
}

func (p *GetPatientFollowupPlansRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPatientFollowupPlansRequest(%+v)", *p)
}

var fieldIDToName_GetPatientFollowupPlansRequest = map[int16]string{
	1: "patientId",
}

type GetPatientFollowupPlansResponse struct {
	Base  *model.BaseResp       `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Plans []*model.FollowupPlan `thrift:"plans,2,required" frugal:"2,required,list<model.FollowupPlan>" json:"plans"`
}

func NewGetPatientFollowupPlansResponse() *GetPatientFollowupPlansResponse {
	return &GetPatientFollowupPlansResponse{}
}

func (p *GetPatientFollowupPlansResponse) InitDefault() {
}

var GetPatientFollowupPlansResponse_Base_DEFAULT *model.BaseResp

func (p *GetPatientFollowupPlansResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetPatientFollowupPlansResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetPatientFollowupPlansResponse) GetPlans() (v []*model.FollowupPlan) {
	return p.Plans
}
func (p *GetPatientFollowupPlansResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetPatientFollowupPlansResponse) SetPlans(val []*model.FollowupPlan) {
	p.Plans = val
}

func (p *GetPatientFollowupPlansResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetPatientFollowupPlansResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPatientFollowupPlansResponse(%+v)", *p)
}

var fieldIDToName_GetPatientFollowupPlansResponse = map[int16]string{
	1: "Base",
	2: "plans",
}

type CreateFollowupRecordRequest struct {
	Record *model.FollowupRecord `thrift:"record,1,required" frugal:"1,required,model.FollowupRecord" json:"record"`
}

func NewCreateFollowupRecordRequest() *CreateFollowupRecordRequest {
	return &CreateFollowupRecordRequest{}
}

func (p *CreateFollowupRecordRequest) InitDefault() {
}

var CreateFollowupRecordRequest_Record_DEFAULT *model.FollowupRecord

func (p *CreateFollowupRecordRequest) GetRecord() (v *model.FollowupRecord) {
	if !p.IsSetRecord() {
		return CreateFollowupRecordRequest_Record_DEFAULT
	}
	return p.Record
}
func (p *CreateFollowupRecordRequest) SetRecord(val *model.FollowupRecord) {
	p.Record = val
}

func (p *CreateFollowupRecordRequest) IsSetRecord() bool {
	return p.Record != nil
}

func (p *CreateFollowupRecordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFollowupRecordRequest(%+v)", *p)
}

var fieldIDToName_CreateFollowupRecordRequest = map[int16]string{
	1: "record",
}

type CreateFollowupRecordResponse struct {
	Base     *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	RecordId int64           `thrift:"recordId,2,required" frugal:"2,required,i64" json:"recordId"`
}

func NewCreateFollowupRecordResponse() *CreateFollowupRecordResponse {
	return &CreateFollowupRecordResponse{}
}

func (p *CreateFollowupRecordResponse) InitDefault() {
}

var CreateFollowupRecordResponse_Base_DEFAULT *model.BaseResp

func (p *CreateFollowupRecordResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateFollowupRecordResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *CreateFollowupRecordResponse) GetRecordId() (v int64) {
	return p.RecordId
}
func (p *CreateFollowupRecordResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateFollowupRecordResponse) SetRecordId(val int64) {
	p.RecordId = val
}

func (p *CreateFollowupRecordResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateFollowupRecordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFollowupRecordResponse(%+v)", *p)
}

var fieldIDToName_CreateFollowupRecordResponse = map[int16]string{
	1: "Base",
	2: "recordId",
}

type GetFollowupRecordRequest struct {
	RecordId int64 `thrift:"recordId,1,required" frugal:"1,required,i64" json:"recordId"`
}

func NewGetFollowupRecordRequest() *GetFollowupRecordRequest {
	return &GetFollowupRecordRequest{}
}

func (p *GetFollowupRecordRequest) InitDefault() {
}

func (p *GetFollowupRecordRequest) GetRecordId() (v int64) {
	return p.RecordId
}
func (p *GetFollowupRecordRequest) SetRecordId(val int64) {
	p.RecordId = val
}

func (p *GetFollowupRecordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFollowupRecordRequest(%+v)", *p)
}

var fieldIDToName_GetFollowupRecordRequest = map[int16]string{
	1: "recordId",
}

type GetFollowupRecordResponse struct {
	Base   *model.BaseResp       `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Record *model.FollowupRecord `thrift:"record,2,required" frugal:"2,required,model.FollowupRecord" json:"record"`
}

func NewGetFollowupRecordResponse() *GetFollowupRecordResponse {
	return &GetFollowupRecordResponse{}
}

func (p *GetFollowupRecordResponse) InitDefault() {
}

var GetFollowupRecordResponse_Base_DEFAULT *model.BaseResp

func (p *GetFollowupRecordResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetFollowupRecordResponse_Base_DEFAULT
	}
	return p.Base
}

var GetFollowupRecordResponse_Record_DEFAULT *model.FollowupRecord

func (p *GetFollowupRecordResponse) GetRecord() (v *model.FollowupRecord) {
	if !p.IsSetRecord() {
		return GetFollowupRecordResponse_Record_DEFAULT
	}
	return p.Record
}
func (p *GetFollowupRecordResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetFollowupRecordResponse) SetRecord(val *model.FollowupRecord) {
	p.Record = val
}

func (p *GetFollowupRecordResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetFollowupRecordResponse) IsSetRecord() bool {
	return p.Record != nil
}

func (p *GetFollowupRecordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFollowupRecordResponse(%+v)", *p)
}

var fieldIDToName_GetFollowupRecordResponse = map[int16]string{
	1: "Base",
	2: "record",
}

type GetPlanFollowupRecordsRequest struct {
	PlanId int64 `thrift:"planId,1,required" frugal:"1,required,i64" json:"planId"`
}

func NewGetPlanFollowupRecordsRequest() *GetPlanFollowupRecordsRequest {
	return &GetPlanFollowupRecordsRequest{}
}

func (p *GetPlanFollowupRecordsRequest) InitDefault() {
}

func (p *GetPlanFollowupRecordsRequest) GetPlanId() (v int64) {
	return p.PlanId
}
func (p *GetPlanFollowupRecordsRequest) SetPlanId(val int64) {
	p.PlanId = val
}

func (p *GetPlanFollowupRecordsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPlanFollowupRecordsRequest(%+v)", *p)
}

var fieldIDToName_GetPlanFollowupRecordsRequest = map[int16]string{
	1: "planId",
}

type GetPlanFollowupRecordsResponse struct {
	Base    *model.BaseResp         `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Records []*model.FollowupRecord `thrift:"records,2,required" frugal:"2,required,list<model.FollowupRecord>" json:"records"`
}

func NewGetPlanFollowupRecordsResponse() *GetPlanFollowupRecordsResponse {
	return &GetPlanFollowupRecordsResponse{}
}

func (p *GetPlanFollowupRecordsResponse) InitDefault() {
}

var GetPlanFollowupRecordsResponse_Base_DEFAULT *model.BaseResp

func (p *GetPlanFollowupRecordsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetPlanFollowupRecordsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetPlanFollowupRecordsResponse) GetRecords() (v []*model.FollowupRecord) {
	return p.Records
}
func (p *GetPlanFollowupRecordsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetPlanFollowupRecordsResponse) SetRecords(val []*model.FollowupRecord) {
	p.Records = val
}

func (p *GetPlanFollowupRecordsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetPlanFollowupRecordsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPlanFollowupRecordsResponse(%+v)", *p)
}

var fieldIDToName_GetPlanFollowupRecordsResponse = map[int16]string{
	1: "Base",
	2: "records",
}

type AddMedicationMonitorRequest struct {
	Monitor *model.MedicationMonitor `thrift:"monitor,1,required" frugal:"1,required,model.MedicationMonitor" json:"monitor"`
}

func NewAddMedicationMonitorRequest() *AddMedicationMonitorRequest {
	return &AddMedicationMonitorRequest{}
}

func (p *AddMedicationMonitorRequest) InitDefault() {
}

var AddMedicationMonitorRequest_Monitor_DEFAULT *model.MedicationMonitor

func (p *AddMedicationMonitorRequest) GetMonitor() (v *model.MedicationMonitor) {
	if !p.IsSetMonitor() {
		return AddMedicationMonitorRequest_Monitor_DEFAULT
	}
	return p.Monitor
}
func (p *AddMedicationMonitorRequest) SetMonitor(val *model.MedicationMonitor) {
	p.Monitor = val
}

func (p *AddMedicationMonitorRequest) IsSetMonitor() bool {
	return p.Monitor != nil
}

func (p *AddMedicationMonitorRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMedicationMonitorRequest(%+v)", *p)
}

var fieldIDToName_AddMedicationMonitorRequest = map[int16]string{
	1: "monitor",
}

type AddMedicationMonitorResponse struct {
	Base      *model.BaseResp `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	MonitorId int64           `thrift:"monitorId,2,required" frugal:"2,required,i64" json:"monitorId"`
}

func NewAddMedicationMonitorResponse() *AddMedicationMonitorResponse {
	return &AddMedicationMonitorResponse{}
}

func (p *AddMedicationMonitorResponse) InitDefault() {
}

var AddMedicationMonitorResponse_Base_DEFAULT *model.BaseResp

func (p *AddMedicationMonitorResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AddMedicationMonitorResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *AddMedicationMonitorResponse) GetMonitorId() (v int64) {
	return p.MonitorId
}
func (p *AddMedicationMonitorResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *AddMedicationMonitorResponse) SetMonitorId(val int64) {
	p.MonitorId = val
}

func (p *AddMedicationMonitorResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddMedicationMonitorResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMedicationMonitorResponse(%+v)", *p)
}

var fieldIDToName_AddMedicationMonitorResponse = map[int16]string{
	1: "Base",
	2: "monitorId",
}

type GetFollowupMedicationsRequest struct {
	FollowupId int64 `thrift:"followupId,1,required" frugal:"1,required,i64" json:"followupId"`
}

func NewGetFollowupMedicationsRequest() *GetFollowupMedicationsRequest {
	return &GetFollowupMedicationsRequest{}
}

func (p *GetFollowupMedicationsRequest) InitDefault() {
}

func (p *GetFollowupMedicationsRequest) GetFollowupId() (v int64) {
	return p.FollowupId
}
func (p *GetFollowupMedicationsRequest) SetFollowupId(val int64) {
	p.FollowupId = val
}

func (p *GetFollowupMedicationsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFollowupMedicationsRequest(%+v)", *p)
}

var fieldIDToName_GetFollowupMedicationsRequest = map[int16]string{
	1: "followupId",
}

type GetFollowupMedicationsResponse struct {
	Base        *model.BaseResp            `thrift:"Base,1,required" frugal:"1,required,model.BaseResp" json:"Base"`
	Medications []*model.MedicationMonitor `thrift:"medications,2,required" frugal:"2,required,list<model.MedicationMonitor>" json:"medications"`
}

func NewGetFollowupMedicationsResponse() *GetFollowupMedicationsResponse {
	return &GetFollowupMedicationsResponse{}
}

func (p *GetFollowupMedicationsResponse) InitDefault() {
}

var GetFollowupMedicationsResponse_Base_DEFAULT *model.BaseResp

func (p *GetFollowupMedicationsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return GetFollowupMedicationsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetFollowupMedicationsResponse) GetMedications() (v []*model.MedicationMonitor) {
	return p.Medications
}
func (p *GetFollowupMedicationsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *GetFollowupMedicationsResponse) SetMedications(val []*model.MedicationMonitor) {
	p.Medications = val
}

func (p *GetFollowupMedicationsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetFollowupMedicationsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFollowupMedicationsResponse(%+v)", *p)
}

var fieldIDToName_GetFollowupMedicationsResponse = map[int16]string{
	1: "Base",
	2: "medications",
}

type FollowupService interface {
	CreateFollowupPlan(ctx context.Context, req *CreateFollowupPlanRequest) (r *CreateFollowupPlanResponse, err error)

	GetFollowupPlan(ctx context.Context, req *GetFollowupPlanRequest) (r *GetFollowupPlanResponse, err error)

	GetFollowupPlans(ctx context.Context, req *GetFollowupPlansRequest) (r *GetFollowupPlansResponse, err error)

	GetPatientFollowupPlans(ctx context.Context, req *GetPatientFollowupPlansRequest) (r *GetPatientFollowupPlansResponse, err error)

	CreateFollowupRecord(ctx context.Context, req *CreateFollowupRecordRequest) (r *CreateFollowupRecordResponse, err error)

	GetFollowupRecord(ctx context.Context, req *GetFollowupRecordRequest) (r *GetFollowupRecordResponse, err error)

	GetPlanFollowupRecords(ctx context.Context, req *GetPlanFollowupRecordsRequest) (r *GetPlanFollowupRecordsResponse, err error)

	AddMedicationMonitor(ctx context.Context, req *AddMedicationMonitorRequest) (r *AddMedicationMonitorResponse, err error)

	GetFollowupMedications(ctx context.Context, req *GetFollowupMedicationsRequest) (r *GetFollowupMedicationsResponse, err error)
}

type FollowupServiceCreateFollowupPlanArgs struct {
	Req *CreateFollowupPlanRequest `thrift:"req,1" frugal:"1,default,CreateFollowupPlanRequest" json:"req"`
}

func NewFollowupServiceCreateFollowupPlanArgs() *FollowupServiceCreateFollowupPlanArgs {
	return &FollowupServiceCreateFollowupPlanArgs{}
}

func (p *FollowupServiceCreateFollowupPlanArgs) InitDefault() {
}

var FollowupServiceCreateFollowupPlanArgs_Req_DEFAULT *CreateFollowupPlanRequest

func (p *FollowupServiceCreateFollowupPlanArgs) GetReq() (v *CreateFollowupPlanRequest) {
	if !p.IsSetReq() {
		return FollowupServiceCreateFollowupPlanArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowupServiceCreateFollowupPlanArgs) SetReq(val *CreateFollowupPlanRequest) {
	p.Req = val
}

func (p *FollowupServiceCreateFollowupPlanArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowupServiceCreateFollowupPlanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceCreateFollowupPlanArgs(%+v)", *p)
}

var fieldIDToName_FollowupServiceCreateFollowupPlanArgs = map[int16]string{
	1: "req",
}

type FollowupServiceCreateFollowupPlanResult struct {
	Success *CreateFollowupPlanResponse `thrift:"success,0,optional" frugal:"0,optional,CreateFollowupPlanResponse" json:"success,omitempty"`
}

func NewFollowupServiceCreateFollowupPlanResult() *FollowupServiceCreateFollowupPlanResult {
	return &FollowupServiceCreateFollowupPlanResult{}
}

func (p *FollowupServiceCreateFollowupPlanResult) InitDefault() {
}

var FollowupServiceCreateFollowupPlanResult_Success_DEFAULT *CreateFollowupPlanResponse

func (p *FollowupServiceCreateFollowupPlanResult) GetSuccess() (v *CreateFollowupPlanResponse) {
	if !p.IsSetSuccess() {
		return FollowupServiceCreateFollowupPlanResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowupServiceCreateFollowupPlanResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateFollowupPlanResponse)
}

func (p *FollowupServiceCreateFollowupPlanResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupServiceCreateFollowupPlanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceCreateFollowupPlanResult(%+v)", *p)
}

var fieldIDToName_FollowupServiceCreateFollowupPlanResult = map[int16]string{
	0: "success",
}

type FollowupServiceGetFollowupPlanArgs struct {
	Req *GetFollowupPlanRequest `thrift:"req,1" frugal:"1,default,GetFollowupPlanRequest" json:"req"`
}

func NewFollowupServiceGetFollowupPlanArgs() *FollowupServiceGetFollowupPlanArgs {
	return &FollowupServiceGetFollowupPlanArgs{}
}

func (p *FollowupServiceGetFollowupPlanArgs) InitDefault() {
}

var FollowupServiceGetFollowupPlanArgs_Req_DEFAULT *GetFollowupPlanRequest

func (p *FollowupServiceGetFollowupPlanArgs) GetReq() (v *GetFollowupPlanRequest) {
	if !p.IsSetReq() {
		return FollowupServiceGetFollowupPlanArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowupServiceGetFollowupPlanArgs) SetReq(val *GetFollowupPlanRequest) {
	p.Req = val
}

func (p *FollowupServiceGetFollowupPlanArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowupServiceGetFollowupPlanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceGetFollowupPlanArgs(%+v)", *p)
}

var fieldIDToName_FollowupServiceGetFollowupPlanArgs = map[int16]string{
	1: "req",
}

type FollowupServiceGetFollowupPlanResult struct {
	Success *GetFollowupPlanResponse `thrift:"success,0,optional" frugal:"0,optional,GetFollowupPlanResponse" json:"success,omitempty"`
}

func NewFollowupServiceGetFollowupPlanResult() *FollowupServiceGetFollowupPlanResult {
	return &FollowupServiceGetFollowupPlanResult{}
}

func (p *FollowupServiceGetFollowupPlanResult) InitDefault() {
}

var FollowupServiceGetFollowupPlanResult_Success_DEFAULT *GetFollowupPlanResponse

func (p *FollowupServiceGetFollowupPlanResult) GetSuccess() (v *GetFollowupPlanResponse) {
	if !p.IsSetSuccess() {
		return FollowupServiceGetFollowupPlanResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowupServiceGetFollowupPlanResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFollowupPlanResponse)
}

func (p *FollowupServiceGetFollowupPlanResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupServiceGetFollowupPlanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceGetFollowupPlanResult(%+v)", *p)
}

var fieldIDToName_FollowupServiceGetFollowupPlanResult = map[int16]string{
	0: "success",
}

type FollowupServiceGetFollowupPlansArgs struct {
	Req *GetFollowupPlansRequest `thrift:"req,1" frugal:"1,default,GetFollowupPlansRequest" json:"req"`
}

func NewFollowupServiceGetFollowupPlansArgs() *FollowupServiceGetFollowupPlansArgs {
	return &FollowupServiceGetFollowupPlansArgs{}
}

func (p *FollowupServiceGetFollowupPlansArgs) InitDefault() {
}

var FollowupServiceGetFollowupPlansArgs_Req_DEFAULT *GetFollowupPlansRequest

func (p *FollowupServiceGetFollowupPlansArgs) GetReq() (v *GetFollowupPlansRequest) {
	if !p.IsSetReq() {
		return FollowupServiceGetFollowupPlansArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowupServiceGetFollowupPlansArgs) SetReq(val *GetFollowupPlansRequest) {
	p.Req = val
}

func (p *FollowupServiceGetFollowupPlansArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowupServiceGetFollowupPlansArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceGetFollowupPlansArgs(%+v)", *p)
}

var fieldIDToName_FollowupServiceGetFollowupPlansArgs = map[int16]string{
	1: "req",
}

type FollowupServiceGetFollowupPlansResult struct {
	Success *GetFollowupPlansResponse `thrift:"success,0,optional" frugal:"0,optional,GetFollowupPlansResponse" json:"success,omitempty"`
}

func NewFollowupServiceGetFollowupPlansResult() *FollowupServiceGetFollowupPlansResult {
	return &FollowupServiceGetFollowupPlansResult{}
}

func (p *FollowupServiceGetFollowupPlansResult) InitDefault() {
}

var FollowupServiceGetFollowupPlansResult_Success_DEFAULT *GetFollowupPlansResponse

func (p *FollowupServiceGetFollowupPlansResult) GetSuccess() (v *GetFollowupPlansResponse) {
	if !p.IsSetSuccess() {
		return FollowupServiceGetFollowupPlansResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowupServiceGetFollowupPlansResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFollowupPlansResponse)
}

func (p *FollowupServiceGetFollowupPlansResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupServiceGetFollowupPlansResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceGetFollowupPlansResult(%+v)", *p)
}

var fieldIDToName_FollowupServiceGetFollowupPlansResult = map[int16]string{
	0: "success",
}

type FollowupServiceGetPatientFollowupPlansArgs struct {
	Req *GetPatientFollowupPlansRequest `thrift:"req,1" frugal:"1,default,GetPatientFollowupPlansRequest" json:"req"`
}

func NewFollowupServiceGetPatientFollowupPlansArgs() *FollowupServiceGetPatientFollowupPlansArgs {
	return &FollowupServiceGetPatientFollowupPlansArgs{}
}

func (p *FollowupServiceGetPatientFollowupPlansArgs) InitDefault() {
}

var FollowupServiceGetPatientFollowupPlansArgs_Req_DEFAULT *GetPatientFollowupPlansRequest

func (p *FollowupServiceGetPatientFollowupPlansArgs) GetReq() (v *GetPatientFollowupPlansRequest) {
	if !p.IsSetReq() {
		return FollowupServiceGetPatientFollowupPlansArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowupServiceGetPatientFollowupPlansArgs) SetReq(val *GetPatientFollowupPlansRequest) {
	p.Req = val
}

func (p *FollowupServiceGetPatientFollowupPlansArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowupServiceGetPatientFollowupPlansArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceGetPatientFollowupPlansArgs(%+v)", *p)
}

var fieldIDToName_FollowupServiceGetPatientFollowupPlansArgs = map[int16]string{
	1: "req",
}

type FollowupServiceGetPatientFollowupPlansResult struct {
	Success *GetPatientFollowupPlansResponse `thrift:"success,0,optional" frugal:"0,optional,GetPatientFollowupPlansResponse" json:"success,omitempty"`
}

func NewFollowupServiceGetPatientFollowupPlansResult() *FollowupServiceGetPatientFollowupPlansResult {
	return &FollowupServiceGetPatientFollowupPlansResult{}
}

func (p *FollowupServiceGetPatientFollowupPlansResult) InitDefault() {
}

var FollowupServiceGetPatientFollowupPlansResult_Success_DEFAULT *GetPatientFollowupPlansResponse

func (p *FollowupServiceGetPatientFollowupPlansResult) GetSuccess() (v *GetPatientFollowupPlansResponse) {
	if !p.IsSetSuccess() {
		return FollowupServiceGetPatientFollowupPlansResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowupServiceGetPatientFollowupPlansResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPatientFollowupPlansResponse)
}

func (p *FollowupServiceGetPatientFollowupPlansResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupServiceGetPatientFollowupPlansResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceGetPatientFollowupPlansResult(%+v)", *p)
}

var fieldIDToName_FollowupServiceGetPatientFollowupPlansResult = map[int16]string{
	0: "success",
}

type FollowupServiceCreateFollowupRecordArgs struct {
	Req *CreateFollowupRecordRequest `thrift:"req,1" frugal:"1,default,CreateFollowupRecordRequest" json:"req"`
}

func NewFollowupServiceCreateFollowupRecordArgs() *FollowupServiceCreateFollowupRecordArgs {
	return &FollowupServiceCreateFollowupRecordArgs{}
}

func (p *FollowupServiceCreateFollowupRecordArgs) InitDefault() {
}

var FollowupServiceCreateFollowupRecordArgs_Req_DEFAULT *CreateFollowupRecordRequest

func (p *FollowupServiceCreateFollowupRecordArgs) GetReq() (v *CreateFollowupRecordRequest) {
	if !p.IsSetReq() {
		return FollowupServiceCreateFollowupRecordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowupServiceCreateFollowupRecordArgs) SetReq(val *CreateFollowupRecordRequest) {
	p.Req = val
}

func (p *FollowupServiceCreateFollowupRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowupServiceCreateFollowupRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceCreateFollowupRecordArgs(%+v)", *p)
}

var fieldIDToName_FollowupServiceCreateFollowupRecordArgs = map[int16]string{
	1: "req",
}

type FollowupServiceCreateFollowupRecordResult struct {
	Success *CreateFollowupRecordResponse `thrift:"success,0,optional" frugal:"0,optional,CreateFollowupRecordResponse" json:"success,omitempty"`
}

func NewFollowupServiceCreateFollowupRecordResult() *FollowupServiceCreateFollowupRecordResult {
	return &FollowupServiceCreateFollowupRecordResult{}
}

func (p *FollowupServiceCreateFollowupRecordResult) InitDefault() {
}

var FollowupServiceCreateFollowupRecordResult_Success_DEFAULT *CreateFollowupRecordResponse

func (p *FollowupServiceCreateFollowupRecordResult) GetSuccess() (v *CreateFollowupRecordResponse) {
	if !p.IsSetSuccess() {
		return FollowupServiceCreateFollowupRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowupServiceCreateFollowupRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateFollowupRecordResponse)
}

func (p *FollowupServiceCreateFollowupRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupServiceCreateFollowupRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceCreateFollowupRecordResult(%+v)", *p)
}

var fieldIDToName_FollowupServiceCreateFollowupRecordResult = map[int16]string{
	0: "success",
}

type FollowupServiceGetFollowupRecordArgs struct {
	Req *GetFollowupRecordRequest `thrift:"req,1" frugal:"1,default,GetFollowupRecordRequest" json:"req"`
}

func NewFollowupServiceGetFollowupRecordArgs() *FollowupServiceGetFollowupRecordArgs {
	return &FollowupServiceGetFollowupRecordArgs{}
}

func (p *FollowupServiceGetFollowupRecordArgs) InitDefault() {
}

var FollowupServiceGetFollowupRecordArgs_Req_DEFAULT *GetFollowupRecordRequest

func (p *FollowupServiceGetFollowupRecordArgs) GetReq() (v *GetFollowupRecordRequest) {
	if !p.IsSetReq() {
		return FollowupServiceGetFollowupRecordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowupServiceGetFollowupRecordArgs) SetReq(val *GetFollowupRecordRequest) {
	p.Req = val
}

func (p *FollowupServiceGetFollowupRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowupServiceGetFollowupRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceGetFollowupRecordArgs(%+v)", *p)
}

var fieldIDToName_FollowupServiceGetFollowupRecordArgs = map[int16]string{
	1: "req",
}

type FollowupServiceGetFollowupRecordResult struct {
	Success *GetFollowupRecordResponse `thrift:"success,0,optional" frugal:"0,optional,GetFollowupRecordResponse" json:"success,omitempty"`
}

func NewFollowupServiceGetFollowupRecordResult() *FollowupServiceGetFollowupRecordResult {
	return &FollowupServiceGetFollowupRecordResult{}
}

func (p *FollowupServiceGetFollowupRecordResult) InitDefault() {
}

var FollowupServiceGetFollowupRecordResult_Success_DEFAULT *GetFollowupRecordResponse

func (p *FollowupServiceGetFollowupRecordResult) GetSuccess() (v *GetFollowupRecordResponse) {
	if !p.IsSetSuccess() {
		return FollowupServiceGetFollowupRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowupServiceGetFollowupRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFollowupRecordResponse)
}

func (p *FollowupServiceGetFollowupRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupServiceGetFollowupRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceGetFollowupRecordResult(%+v)", *p)
}

var fieldIDToName_FollowupServiceGetFollowupRecordResult = map[int16]string{
	0: "success",
}

type FollowupServiceGetPlanFollowupRecordsArgs struct {
	Req *GetPlanFollowupRecordsRequest `thrift:"req,1" frugal:"1,default,GetPlanFollowupRecordsRequest" json:"req"`
}

func NewFollowupServiceGetPlanFollowupRecordsArgs() *FollowupServiceGetPlanFollowupRecordsArgs {
	return &FollowupServiceGetPlanFollowupRecordsArgs{}
}

func (p *FollowupServiceGetPlanFollowupRecordsArgs) InitDefault() {
}

var FollowupServiceGetPlanFollowupRecordsArgs_Req_DEFAULT *GetPlanFollowupRecordsRequest

func (p *FollowupServiceGetPlanFollowupRecordsArgs) GetReq() (v *GetPlanFollowupRecordsRequest) {
	if !p.IsSetReq() {
		return FollowupServiceGetPlanFollowupRecordsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowupServiceGetPlanFollowupRecordsArgs) SetReq(val *GetPlanFollowupRecordsRequest) {
	p.Req = val
}

func (p *FollowupServiceGetPlanFollowupRecordsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowupServiceGetPlanFollowupRecordsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceGetPlanFollowupRecordsArgs(%+v)", *p)
}

var fieldIDToName_FollowupServiceGetPlanFollowupRecordsArgs = map[int16]string{
	1: "req",
}

type FollowupServiceGetPlanFollowupRecordsResult struct {
	Success *GetPlanFollowupRecordsResponse `thrift:"success,0,optional" frugal:"0,optional,GetPlanFollowupRecordsResponse" json:"success,omitempty"`
}

func NewFollowupServiceGetPlanFollowupRecordsResult() *FollowupServiceGetPlanFollowupRecordsResult {
	return &FollowupServiceGetPlanFollowupRecordsResult{}
}

func (p *FollowupServiceGetPlanFollowupRecordsResult) InitDefault() {
}

var FollowupServiceGetPlanFollowupRecordsResult_Success_DEFAULT *GetPlanFollowupRecordsResponse

func (p *FollowupServiceGetPlanFollowupRecordsResult) GetSuccess() (v *GetPlanFollowupRecordsResponse) {
	if !p.IsSetSuccess() {
		return FollowupServiceGetPlanFollowupRecordsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowupServiceGetPlanFollowupRecordsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPlanFollowupRecordsResponse)
}

func (p *FollowupServiceGetPlanFollowupRecordsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupServiceGetPlanFollowupRecordsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceGetPlanFollowupRecordsResult(%+v)", *p)
}

var fieldIDToName_FollowupServiceGetPlanFollowupRecordsResult = map[int16]string{
	0: "success",
}

type FollowupServiceAddMedicationMonitorArgs struct {
	Req *AddMedicationMonitorRequest `thrift:"req,1" frugal:"1,default,AddMedicationMonitorRequest" json:"req"`
}

func NewFollowupServiceAddMedicationMonitorArgs() *FollowupServiceAddMedicationMonitorArgs {
	return &FollowupServiceAddMedicationMonitorArgs{}
}

func (p *FollowupServiceAddMedicationMonitorArgs) InitDefault() {
}

var FollowupServiceAddMedicationMonitorArgs_Req_DEFAULT *AddMedicationMonitorRequest

func (p *FollowupServiceAddMedicationMonitorArgs) GetReq() (v *AddMedicationMonitorRequest) {
	if !p.IsSetReq() {
		return FollowupServiceAddMedicationMonitorArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowupServiceAddMedicationMonitorArgs) SetReq(val *AddMedicationMonitorRequest) {
	p.Req = val
}

func (p *FollowupServiceAddMedicationMonitorArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowupServiceAddMedicationMonitorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceAddMedicationMonitorArgs(%+v)", *p)
}

var fieldIDToName_FollowupServiceAddMedicationMonitorArgs = map[int16]string{
	1: "req",
}

type FollowupServiceAddMedicationMonitorResult struct {
	Success *AddMedicationMonitorResponse `thrift:"success,0,optional" frugal:"0,optional,AddMedicationMonitorResponse" json:"success,omitempty"`
}

func NewFollowupServiceAddMedicationMonitorResult() *FollowupServiceAddMedicationMonitorResult {
	return &FollowupServiceAddMedicationMonitorResult{}
}

func (p *FollowupServiceAddMedicationMonitorResult) InitDefault() {
}

var FollowupServiceAddMedicationMonitorResult_Success_DEFAULT *AddMedicationMonitorResponse

func (p *FollowupServiceAddMedicationMonitorResult) GetSuccess() (v *AddMedicationMonitorResponse) {
	if !p.IsSetSuccess() {
		return FollowupServiceAddMedicationMonitorResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowupServiceAddMedicationMonitorResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddMedicationMonitorResponse)
}

func (p *FollowupServiceAddMedicationMonitorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupServiceAddMedicationMonitorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceAddMedicationMonitorResult(%+v)", *p)
}

var fieldIDToName_FollowupServiceAddMedicationMonitorResult = map[int16]string{
	0: "success",
}

type FollowupServiceGetFollowupMedicationsArgs struct {
	Req *GetFollowupMedicationsRequest `thrift:"req,1" frugal:"1,default,GetFollowupMedicationsRequest" json:"req"`
}

func NewFollowupServiceGetFollowupMedicationsArgs() *FollowupServiceGetFollowupMedicationsArgs {
	return &FollowupServiceGetFollowupMedicationsArgs{}
}

func (p *FollowupServiceGetFollowupMedicationsArgs) InitDefault() {
}

var FollowupServiceGetFollowupMedicationsArgs_Req_DEFAULT *GetFollowupMedicationsRequest

func (p *FollowupServiceGetFollowupMedicationsArgs) GetReq() (v *GetFollowupMedicationsRequest) {
	if !p.IsSetReq() {
		return FollowupServiceGetFollowupMedicationsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowupServiceGetFollowupMedicationsArgs) SetReq(val *GetFollowupMedicationsRequest) {
	p.Req = val
}

func (p *FollowupServiceGetFollowupMedicationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowupServiceGetFollowupMedicationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceGetFollowupMedicationsArgs(%+v)", *p)
}

var fieldIDToName_FollowupServiceGetFollowupMedicationsArgs = map[int16]string{
	1: "req",
}

type FollowupServiceGetFollowupMedicationsResult struct {
	Success *GetFollowupMedicationsResponse `thrift:"success,0,optional" frugal:"0,optional,GetFollowupMedicationsResponse" json:"success,omitempty"`
}

func NewFollowupServiceGetFollowupMedicationsResult() *FollowupServiceGetFollowupMedicationsResult {
	return &FollowupServiceGetFollowupMedicationsResult{}
}

func (p *FollowupServiceGetFollowupMedicationsResult) InitDefault() {
}

var FollowupServiceGetFollowupMedicationsResult_Success_DEFAULT *GetFollowupMedicationsResponse

func (p *FollowupServiceGetFollowupMedicationsResult) GetSuccess() (v *GetFollowupMedicationsResponse) {
	if !p.IsSetSuccess() {
		return FollowupServiceGetFollowupMedicationsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowupServiceGetFollowupMedicationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFollowupMedicationsResponse)
}

func (p *FollowupServiceGetFollowupMedicationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowupServiceGetFollowupMedicationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowupServiceGetFollowupMedicationsResult(%+v)", *p)
}

var fieldIDToName_FollowupServiceGetFollowupMedicationsResult = map[int16]string{
	0: "success",
}
