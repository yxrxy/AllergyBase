// Code generated by Kitex v0.13.1. DO NOT EDIT.

package followupservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	followup "github.com/yxrxy/AllergyBase/kitex_gen/followup"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateFollowupPlan(ctx context.Context, req *followup.CreateFollowupPlanRequest, callOptions ...callopt.Option) (r *followup.CreateFollowupPlanResponse, err error)
	GetFollowupPlan(ctx context.Context, req *followup.GetFollowupPlanRequest, callOptions ...callopt.Option) (r *followup.GetFollowupPlanResponse, err error)
	GetFollowupPlans(ctx context.Context, req *followup.GetFollowupPlansRequest, callOptions ...callopt.Option) (r *followup.GetFollowupPlansResponse, err error)
	GetPatientFollowupPlans(ctx context.Context, req *followup.GetPatientFollowupPlansRequest, callOptions ...callopt.Option) (r *followup.GetPatientFollowupPlansResponse, err error)
	CreateFollowupRecord(ctx context.Context, req *followup.CreateFollowupRecordRequest, callOptions ...callopt.Option) (r *followup.CreateFollowupRecordResponse, err error)
	GetFollowupRecord(ctx context.Context, req *followup.GetFollowupRecordRequest, callOptions ...callopt.Option) (r *followup.GetFollowupRecordResponse, err error)
	GetPlanFollowupRecords(ctx context.Context, req *followup.GetPlanFollowupRecordsRequest, callOptions ...callopt.Option) (r *followup.GetPlanFollowupRecordsResponse, err error)
	AddMedicationMonitor(ctx context.Context, req *followup.AddMedicationMonitorRequest, callOptions ...callopt.Option) (r *followup.AddMedicationMonitorResponse, err error)
	GetFollowupMedications(ctx context.Context, req *followup.GetFollowupMedicationsRequest, callOptions ...callopt.Option) (r *followup.GetFollowupMedicationsResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kFollowupServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kFollowupServiceClient struct {
	*kClient
}

func (p *kFollowupServiceClient) CreateFollowupPlan(ctx context.Context, req *followup.CreateFollowupPlanRequest, callOptions ...callopt.Option) (r *followup.CreateFollowupPlanResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateFollowupPlan(ctx, req)
}

func (p *kFollowupServiceClient) GetFollowupPlan(ctx context.Context, req *followup.GetFollowupPlanRequest, callOptions ...callopt.Option) (r *followup.GetFollowupPlanResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowupPlan(ctx, req)
}

func (p *kFollowupServiceClient) GetFollowupPlans(ctx context.Context, req *followup.GetFollowupPlansRequest, callOptions ...callopt.Option) (r *followup.GetFollowupPlansResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowupPlans(ctx, req)
}

func (p *kFollowupServiceClient) GetPatientFollowupPlans(ctx context.Context, req *followup.GetPatientFollowupPlansRequest, callOptions ...callopt.Option) (r *followup.GetPatientFollowupPlansResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPatientFollowupPlans(ctx, req)
}

func (p *kFollowupServiceClient) CreateFollowupRecord(ctx context.Context, req *followup.CreateFollowupRecordRequest, callOptions ...callopt.Option) (r *followup.CreateFollowupRecordResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateFollowupRecord(ctx, req)
}

func (p *kFollowupServiceClient) GetFollowupRecord(ctx context.Context, req *followup.GetFollowupRecordRequest, callOptions ...callopt.Option) (r *followup.GetFollowupRecordResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowupRecord(ctx, req)
}

func (p *kFollowupServiceClient) GetPlanFollowupRecords(ctx context.Context, req *followup.GetPlanFollowupRecordsRequest, callOptions ...callopt.Option) (r *followup.GetPlanFollowupRecordsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPlanFollowupRecords(ctx, req)
}

func (p *kFollowupServiceClient) AddMedicationMonitor(ctx context.Context, req *followup.AddMedicationMonitorRequest, callOptions ...callopt.Option) (r *followup.AddMedicationMonitorResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddMedicationMonitor(ctx, req)
}

func (p *kFollowupServiceClient) GetFollowupMedications(ctx context.Context, req *followup.GetFollowupMedicationsRequest, callOptions ...callopt.Option) (r *followup.GetFollowupMedicationsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowupMedications(ctx, req)
}
