// Code generated by Kitex v0.13.1. DO NOT EDIT.

package followupservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	followup "github.com/yxrxy/AllergyBase/kitex_gen/followup"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateFollowupPlan": kitex.NewMethodInfo(
		createFollowupPlanHandler,
		newFollowupServiceCreateFollowupPlanArgs,
		newFollowupServiceCreateFollowupPlanResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFollowupPlan": kitex.NewMethodInfo(
		getFollowupPlanHandler,
		newFollowupServiceGetFollowupPlanArgs,
		newFollowupServiceGetFollowupPlanResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFollowupPlans": kitex.NewMethodInfo(
		getFollowupPlansHandler,
		newFollowupServiceGetFollowupPlansArgs,
		newFollowupServiceGetFollowupPlansResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPatientFollowupPlans": kitex.NewMethodInfo(
		getPatientFollowupPlansHandler,
		newFollowupServiceGetPatientFollowupPlansArgs,
		newFollowupServiceGetPatientFollowupPlansResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateFollowupRecord": kitex.NewMethodInfo(
		createFollowupRecordHandler,
		newFollowupServiceCreateFollowupRecordArgs,
		newFollowupServiceCreateFollowupRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFollowupRecord": kitex.NewMethodInfo(
		getFollowupRecordHandler,
		newFollowupServiceGetFollowupRecordArgs,
		newFollowupServiceGetFollowupRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPlanFollowupRecords": kitex.NewMethodInfo(
		getPlanFollowupRecordsHandler,
		newFollowupServiceGetPlanFollowupRecordsArgs,
		newFollowupServiceGetPlanFollowupRecordsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AddMedicationMonitor": kitex.NewMethodInfo(
		addMedicationMonitorHandler,
		newFollowupServiceAddMedicationMonitorArgs,
		newFollowupServiceAddMedicationMonitorResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFollowupMedications": kitex.NewMethodInfo(
		getFollowupMedicationsHandler,
		newFollowupServiceGetFollowupMedicationsArgs,
		newFollowupServiceGetFollowupMedicationsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	followupServiceServiceInfo                = NewServiceInfo()
	followupServiceServiceInfoForClient       = NewServiceInfoForClient()
	followupServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return followupServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return followupServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return followupServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "FollowupService"
	handlerType := (*followup.FollowupService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "followup",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func createFollowupPlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*followup.FollowupServiceCreateFollowupPlanArgs)
	realResult := result.(*followup.FollowupServiceCreateFollowupPlanResult)
	success, err := handler.(followup.FollowupService).CreateFollowupPlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowupServiceCreateFollowupPlanArgs() interface{} {
	return followup.NewFollowupServiceCreateFollowupPlanArgs()
}

func newFollowupServiceCreateFollowupPlanResult() interface{} {
	return followup.NewFollowupServiceCreateFollowupPlanResult()
}

func getFollowupPlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*followup.FollowupServiceGetFollowupPlanArgs)
	realResult := result.(*followup.FollowupServiceGetFollowupPlanResult)
	success, err := handler.(followup.FollowupService).GetFollowupPlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowupServiceGetFollowupPlanArgs() interface{} {
	return followup.NewFollowupServiceGetFollowupPlanArgs()
}

func newFollowupServiceGetFollowupPlanResult() interface{} {
	return followup.NewFollowupServiceGetFollowupPlanResult()
}

func getFollowupPlansHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*followup.FollowupServiceGetFollowupPlansArgs)
	realResult := result.(*followup.FollowupServiceGetFollowupPlansResult)
	success, err := handler.(followup.FollowupService).GetFollowupPlans(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowupServiceGetFollowupPlansArgs() interface{} {
	return followup.NewFollowupServiceGetFollowupPlansArgs()
}

func newFollowupServiceGetFollowupPlansResult() interface{} {
	return followup.NewFollowupServiceGetFollowupPlansResult()
}

func getPatientFollowupPlansHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*followup.FollowupServiceGetPatientFollowupPlansArgs)
	realResult := result.(*followup.FollowupServiceGetPatientFollowupPlansResult)
	success, err := handler.(followup.FollowupService).GetPatientFollowupPlans(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowupServiceGetPatientFollowupPlansArgs() interface{} {
	return followup.NewFollowupServiceGetPatientFollowupPlansArgs()
}

func newFollowupServiceGetPatientFollowupPlansResult() interface{} {
	return followup.NewFollowupServiceGetPatientFollowupPlansResult()
}

func createFollowupRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*followup.FollowupServiceCreateFollowupRecordArgs)
	realResult := result.(*followup.FollowupServiceCreateFollowupRecordResult)
	success, err := handler.(followup.FollowupService).CreateFollowupRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowupServiceCreateFollowupRecordArgs() interface{} {
	return followup.NewFollowupServiceCreateFollowupRecordArgs()
}

func newFollowupServiceCreateFollowupRecordResult() interface{} {
	return followup.NewFollowupServiceCreateFollowupRecordResult()
}

func getFollowupRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*followup.FollowupServiceGetFollowupRecordArgs)
	realResult := result.(*followup.FollowupServiceGetFollowupRecordResult)
	success, err := handler.(followup.FollowupService).GetFollowupRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowupServiceGetFollowupRecordArgs() interface{} {
	return followup.NewFollowupServiceGetFollowupRecordArgs()
}

func newFollowupServiceGetFollowupRecordResult() interface{} {
	return followup.NewFollowupServiceGetFollowupRecordResult()
}

func getPlanFollowupRecordsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*followup.FollowupServiceGetPlanFollowupRecordsArgs)
	realResult := result.(*followup.FollowupServiceGetPlanFollowupRecordsResult)
	success, err := handler.(followup.FollowupService).GetPlanFollowupRecords(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowupServiceGetPlanFollowupRecordsArgs() interface{} {
	return followup.NewFollowupServiceGetPlanFollowupRecordsArgs()
}

func newFollowupServiceGetPlanFollowupRecordsResult() interface{} {
	return followup.NewFollowupServiceGetPlanFollowupRecordsResult()
}

func addMedicationMonitorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*followup.FollowupServiceAddMedicationMonitorArgs)
	realResult := result.(*followup.FollowupServiceAddMedicationMonitorResult)
	success, err := handler.(followup.FollowupService).AddMedicationMonitor(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowupServiceAddMedicationMonitorArgs() interface{} {
	return followup.NewFollowupServiceAddMedicationMonitorArgs()
}

func newFollowupServiceAddMedicationMonitorResult() interface{} {
	return followup.NewFollowupServiceAddMedicationMonitorResult()
}

func getFollowupMedicationsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*followup.FollowupServiceGetFollowupMedicationsArgs)
	realResult := result.(*followup.FollowupServiceGetFollowupMedicationsResult)
	success, err := handler.(followup.FollowupService).GetFollowupMedications(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowupServiceGetFollowupMedicationsArgs() interface{} {
	return followup.NewFollowupServiceGetFollowupMedicationsArgs()
}

func newFollowupServiceGetFollowupMedicationsResult() interface{} {
	return followup.NewFollowupServiceGetFollowupMedicationsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateFollowupPlan(ctx context.Context, req *followup.CreateFollowupPlanRequest) (r *followup.CreateFollowupPlanResponse, err error) {
	var _args followup.FollowupServiceCreateFollowupPlanArgs
	_args.Req = req
	var _result followup.FollowupServiceCreateFollowupPlanResult
	if err = p.c.Call(ctx, "CreateFollowupPlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowupPlan(ctx context.Context, req *followup.GetFollowupPlanRequest) (r *followup.GetFollowupPlanResponse, err error) {
	var _args followup.FollowupServiceGetFollowupPlanArgs
	_args.Req = req
	var _result followup.FollowupServiceGetFollowupPlanResult
	if err = p.c.Call(ctx, "GetFollowupPlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowupPlans(ctx context.Context, req *followup.GetFollowupPlansRequest) (r *followup.GetFollowupPlansResponse, err error) {
	var _args followup.FollowupServiceGetFollowupPlansArgs
	_args.Req = req
	var _result followup.FollowupServiceGetFollowupPlansResult
	if err = p.c.Call(ctx, "GetFollowupPlans", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPatientFollowupPlans(ctx context.Context, req *followup.GetPatientFollowupPlansRequest) (r *followup.GetPatientFollowupPlansResponse, err error) {
	var _args followup.FollowupServiceGetPatientFollowupPlansArgs
	_args.Req = req
	var _result followup.FollowupServiceGetPatientFollowupPlansResult
	if err = p.c.Call(ctx, "GetPatientFollowupPlans", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateFollowupRecord(ctx context.Context, req *followup.CreateFollowupRecordRequest) (r *followup.CreateFollowupRecordResponse, err error) {
	var _args followup.FollowupServiceCreateFollowupRecordArgs
	_args.Req = req
	var _result followup.FollowupServiceCreateFollowupRecordResult
	if err = p.c.Call(ctx, "CreateFollowupRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowupRecord(ctx context.Context, req *followup.GetFollowupRecordRequest) (r *followup.GetFollowupRecordResponse, err error) {
	var _args followup.FollowupServiceGetFollowupRecordArgs
	_args.Req = req
	var _result followup.FollowupServiceGetFollowupRecordResult
	if err = p.c.Call(ctx, "GetFollowupRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPlanFollowupRecords(ctx context.Context, req *followup.GetPlanFollowupRecordsRequest) (r *followup.GetPlanFollowupRecordsResponse, err error) {
	var _args followup.FollowupServiceGetPlanFollowupRecordsArgs
	_args.Req = req
	var _result followup.FollowupServiceGetPlanFollowupRecordsResult
	if err = p.c.Call(ctx, "GetPlanFollowupRecords", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddMedicationMonitor(ctx context.Context, req *followup.AddMedicationMonitorRequest) (r *followup.AddMedicationMonitorResponse, err error) {
	var _args followup.FollowupServiceAddMedicationMonitorArgs
	_args.Req = req
	var _result followup.FollowupServiceAddMedicationMonitorResult
	if err = p.c.Call(ctx, "AddMedicationMonitor", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowupMedications(ctx context.Context, req *followup.GetFollowupMedicationsRequest) (r *followup.GetFollowupMedicationsResponse, err error) {
	var _args followup.FollowupServiceGetFollowupMedicationsArgs
	_args.Req = req
	var _result followup.FollowupServiceGetFollowupMedicationsResult
	if err = p.c.Call(ctx, "GetFollowupMedications", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
